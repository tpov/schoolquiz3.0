Index: app/src/main/java/com/tpov/schoolquiz/data/fierbase/Profile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data.fierbase\r\n\r\nimport com.google.firebase.database.IgnoreExtraProperties\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\n\r\n@IgnoreExtraProperties\r\ndata class Profile constructor(\r\n    val tpovId: Int,\r\n    val login: String,\r\n    val name: String,\r\n    val nickname: String,\r\n    val birthday: String,\r\n    val points: Points,\r\n    val datePremium: String,\r\n    val buy: Buy,\r\n    val trophy: String,\r\n    val friends: String,\r\n    val city: String,\r\n    val logo: Int,\r\n    val timeInGames: TimeInGames,\r\n    val addPoints: AddPoints,\r\n    val dates: Dates,\r\n    val idFirebase: String,\r\n    val languages: String,\r\n    val qualification: Qualification\r\n) {\r\n    constructor() : this(\r\n        0,\r\n        \"\",\r\n        \"\",\r\n        \"\",\r\n        \"\",\r\n        Points(0, 0, 0, 0),\r\n        \"\",\r\n        Buy(0, 0, 0, \"\", \"\", \"\"),\r\n        \"\",\r\n        \"\",\r\n        \"\",\r\n        0,\r\n        TimeInGames(0,0,0, 0),\r\n        AddPoints(0, 0, 0, 0, \"\"),\r\n        Dates(\"\", \"\"),\r\n        \"\",\r\n        \"\",\r\n        Qualification(0,0,0,0,0,0,0)\r\n    )\r\n}\r\n\r\n\r\n@IgnoreExtraProperties\r\ndata class Qualification(\r\n    val gamer: Int,\r\n    val sponsor: Int,\r\n    val tester: Int,\r\n    val translater: Int,\r\n    val moderator: Int,\r\n    val admin: Int,\r\n    val developer: Int\r\n) {\r\n    constructor() : this(\r\n        0, 0, 0, 0, 0, 0, 0\r\n    )\r\n}\r\n\r\n@IgnoreExtraProperties\r\ndata class TimeInGames(\r\n    val allTime: Int,\r\n    val timeInQuiz: Int,\r\n    val timeInChat: Int,\r\n    val smsPoints: Int\r\n) {\r\n    constructor() : this(\r\n        0,0,0, 0\r\n    )\r\n}\r\n\r\n@IgnoreExtraProperties\r\ndata class Buy(\r\n    val heart: Int,\r\n    val goldHeart: Int,\r\n    val quizPlace: Int,\r\n    val theme: String,\r\n    val music: String,\r\n    val logo: String\r\n) {\r\n    constructor() : this(\r\n        0, 0, 0, \"\", \"\", \"\"\r\n    )\r\n}\r\n\r\n@IgnoreExtraProperties\r\ndata class Points(\r\n    val gold: Int,\r\n    val skill: Int,\r\n    val skillInSesone: Int,\r\n    val nolics: Int\r\n) {\r\n    constructor() : this(\r\n        0, 0, 0, 0\r\n    )\r\n}\r\n\r\n@IgnoreExtraProperties\r\ndata class AddPoints(\r\n    val addGold: Int,\r\n    val addSkill: Int,\r\n    val addSkillInSesone: Int,\r\n    val addNolics: Int,\r\n    val addTrophy: String\r\n) {\r\n    constructor() : this(\r\n        0, 0, 0, 0, \"\"\r\n    )\r\n}\r\n\r\n@IgnoreExtraProperties\r\ndata class Dates(\r\n    val dataCreateAcc: String,\r\n    val dateSynch: String\r\n) {\r\n    constructor() : this(\r\n        \"\", \"\"\r\n    )\r\n}\r\n\r\nfun ProfileEntity.toProfile(): Profile {\r\n    return Profile(\r\n        tpovId = this.tpovId,\r\n        login = this.login,\r\n        name = this.name,\r\n        nickname = this.nickname,\r\n        birthday = this.birthday,\r\n        points = Points(\r\n            gold = this.pointsGold,\r\n            skill = this.pointsSkill,\r\n            skillInSesone = this.pointsSkillInSeason,\r\n            nolics = this.pointsNolics\r\n        ),\r\n        datePremium = this.datePremium,\r\n        buy = Buy(\r\n            heart = this.buyHeart,\r\n            goldHeart = this.buyGoldHeart,\r\n            quizPlace = this.buyQuizPlace,\r\n            theme = this.buyTheme,\r\n            music = this.buyMusic,\r\n            logo = this.buyLogo\r\n        ),\r\n        trophy = this.trophy,\r\n        friends = this.friends,\r\n        city = this.city,\r\n        logo = this.logo,\r\n        timeInGames = TimeInGames(\r\n            allTime = this.timeInGamesAllTime,\r\n            timeInQuiz = this.timeInGamesInQuiz,\r\n            timeInChat = this.timeInGamesInChat,\r\n            smsPoints = this.timeInGamesSmsPoints\r\n        ),\r\n        addPoints = AddPoints(\r\n            this.addPointsGold,\r\n            this.addPointsSkill,\r\n            this.addPointsSkillInSeason,\r\n            this.addPointsNolics,\r\n            this.addTrophy\r\n        ),\r\n        dates = Dates(this.dataCreateAcc, this.dateSynch),\r\n        idFirebase = this.idFirebase,\r\n        languages = this.languages,\r\n        qualification = Qualification(\r\n            this.gamer,\r\n            this.sponsor,\r\n            this.tester,\r\n            this.translater,\r\n            this.moderator,\r\n            this.admin,\r\n            this.developer\r\n        )\r\n    )\r\n\r\n}\r\n\r\nfun Profile.toProfileEntity(): ProfileEntity {\r\n    return ProfileEntity(\r\n        id = null,\r\n        tpovId = this.tpovId,\r\n        login = this.login,\r\n        name = this.name,\r\n        birthday = this.birthday,\r\n        pointsGold = this.points.gold,\r\n        pointsSkill = this.points.skill,\r\n        pointsSkillInSeason = this.points.skillInSesone,\r\n        pointsNolics = this.points.nolics,\r\n        datePremium = this.datePremium,\r\n        buyHeart = this.buy.heart,\r\n        buyGoldHeart = this.buy.goldHeart,\r\n        buyQuizPlace = this.buy.quizPlace,\r\n        buyTheme = this.buy.theme,\r\n        buyMusic = this.buy.music,\r\n        buyLogo = this.buy.logo,\r\n        trophy = this.trophy,\r\n        friends = this.friends,\r\n        city = this.city,\r\n        logo = this.logo,\r\n        timeInGamesAllTime = this.timeInGames.allTime,\r\n        timeInGamesInQuiz = this.timeInGames.timeInQuiz,\r\n        timeInGamesInChat = this.timeInGames.timeInChat,\r\n        timeInGamesSmsPoints = this.timeInGames.smsPoints,\r\n        addPointsGold = this.addPoints.addGold,\r\n        addPointsSkill = this.addPoints.addSkill,\r\n        addPointsSkillInSeason = this.addPoints.addSkillInSesone,\r\n        addPointsNolics = this.addPoints.addNolics,\r\n        addTrophy = this.addPoints.addTrophy,\r\n        dataCreateAcc = this.dates.dataCreateAcc,\r\n        dateSynch = this.dates.dateSynch,\r\n        idFirebase = this.idFirebase,\r\n        languages = this.languages,\r\n        gamer = this.qualification.gamer,\r\n        sponsor = this.qualification.sponsor,\r\n        tester = this.qualification.tester,\r\n        translater = this.qualification.translater,\r\n        moderator = this.qualification.moderator,\r\n        admin = this.qualification.admin,\r\n        developer = this.qualification.developer,\r\n        nickname = this.nickname\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Profile.kt b/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Profile.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Profile.kt	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Profile.kt	(date 1682580139120)
@@ -127,7 +127,7 @@
     return Profile(
         tpovId = this.tpovId,
         login = this.login,
-        name = this.name,
+        name = this.name ?: "",
         nickname = this.nickname,
         birthday = this.birthday,
         points = Points(
Index: app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport android.widget.Toast\r\nimport androidx.lifecycle.MutableLiveData\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.*\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.StorageReference\r\nimport com.tpov.schoolquiz.data.database.QuizDao\r\nimport com.tpov.schoolquiz.data.database.entities.*\r\nimport com.tpov.schoolquiz.data.fierbase.*\r\nimport com.tpov.schoolquiz.domain.repository.RepositoryFB\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.*\r\nimport kotlinx.coroutines.flow.Flow\r\nimport java.io.File\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n\r\n@Singleton\r\nclass RepositoryFBImpl @Inject constructor(\r\n    private val dao: QuizDao,\r\n    private val application: Application\r\n) : RepositoryFB {\r\n\r\n    private lateinit var chatValueEventListener: ValueEventListener\r\n    private val context = application.baseContext\r\n    var synthLiveData = MutableLiveData<Int>()\r\n    var synth = 0\r\n    var synthGetData = 0\r\n    var synthSetData = 0\r\n    override fun deleteAllQuiz() {\r\n        FirebaseDatabase.getInstance().getReference(\"question1\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question2\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question3\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question4\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question5\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question6\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question7\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question8\").setValue(null)\r\n\r\n        FirebaseDatabase.getInstance().getReference(\"quiz1\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz2\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz3\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz4\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz5\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz6\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz7\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz8\").setValue(null)\r\n\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail1\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail2\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail3\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail4\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail5\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail6\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail7\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail8\").setValue(null)\r\n\r\n    }\r\n\r\n    override fun getValSynth(): MutableLiveData<Int> {\r\n        log(\"getValSynth()  ${synthLiveData.value}\")\r\n        log(\"getValSynth()s  $synth\")\r\n        return synthLiveData\r\n    }\r\n\r\n    override fun getPlayersList() {\r\n        val playersListRef = FirebaseDatabase.getInstance().getReference(\"players/listPlayers\")\r\n        playersListRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n\r\n                val playersList = mutableListOf<PlayersEntity>()\r\n                log(\"getPlayersList snapshot: $snapshot\")\r\n                for (playerSnapshot in snapshot.children) {\r\n\r\n                    log(\"getPlayersList playerSnapshot: $playerSnapshot\")\r\n                    val player = playerSnapshot.getValue(Players::class.java)\r\n                    if (player != null) {\r\n                        log(\"getPlayersList player: $player\")\r\n                        playersList.add(\r\n                            player.toPlayersEntity().copy(id = playerSnapshot.key?.toInt())\r\n                        )\r\n                    }\r\n                }\r\n                dao.deletePlayersList()\r\n                dao.insertPlayersList(playersList)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                // Обработка ошибок\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getTranslateFB(lvlTranslate: Int) {\r\n        val questionRef3 = FirebaseDatabase.getInstance().getReference(\"question3\")\r\n        val questionRef4 = FirebaseDatabase.getInstance().getReference(\"question4\")\r\n        val questionRef5 = FirebaseDatabase.getInstance().getReference(\"question5\")\r\n        val questionRef6 = FirebaseDatabase.getInstance().getReference(\"question6\")\r\n        val questionRef7 = FirebaseDatabase.getInstance().getReference(\"question7\")\r\n        val questionRef8 = FirebaseDatabase.getInstance().getReference(\"question8\")\r\n\r\n        questionRef3.limitToLast(1).addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestion snapshot: ${snapshot.key}\")\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    if (dao.getQuizByIdDB(idQuizSnap.key?.toInt()!!) != null) {\r\n                        log(\"getQuestion idQuizSnap: ${idQuizSnap.key}\")\r\n                        for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            log(\"getQuestion idQuestionSnap: ${idQuestionSnap.key}\")\r\n                            for (languageSnap in idQuestionSnap.children) { // перебор всех вопросов внутри language\r\n                                log(\"getQuestion languageSnap: ${languageSnap.key}\")\r\n                                val question = languageSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    dao.insertQuestion(\r\n                                        QuestionEntity(\r\n                                            null,\r\n                                            idQuestionSnap.key?.toInt() ?: 0,\r\n                                            question.nameQuestion,\r\n                                            question.answerQuestion,\r\n                                            question.typeQuestion,\r\n                                            idQuizSnap.key?.toInt() ?: -1,\r\n                                            languageSnap.key ?: \"eu\",\r\n                                            question.lvlTranslate\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestion8Data ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    init {\r\n        val referenceValue = Integer.toHexString(System.identityHashCode(getValSynth()))\r\n\r\n        log(\"fun init referenceValue :$referenceValue\")\r\n    }\r\n\r\n    @OptIn(DelicateCoroutinesApi::class)\r\n    override fun getChatData(): Flow<List<ChatEntity>> {\r\n        val chatRef = FirebaseDatabase.getInstance().getReference(\"chat\")\r\n        val dateFormat = SimpleDateFormat(\"HH:mm:ss - dd/MM/yy\")\r\n        chatValueEventListener =\r\n            chatRef.limitToLast(10).addValueEventListener(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    log(\"getChatData snapshot: $snapshot\")\r\n                    GlobalScope.launch {\r\n                        // Получаем данные из snapshot и сохраняем их в локальную базу данных\r\n\r\n                        for (dateSnapshot in snapshot.children) {\r\n                            log(\"getChatData dateSnapshot: $dateSnapshot\")\r\n                            for (data in dateSnapshot.children) {\r\n                                log(\"getChatData data: $data\")\r\n                                val chat = data.getValue(Chat::class.java)\r\n                                val date1 = dateFormat.parse(chat?.time.toString())\r\n                                var date2: Date? =\r\n                                    if (SharedPreferencesManager.getTimeMassage() == \"0\") {\r\n                                        SharedPreferencesManager.setTimeMassage(TimeManager.getCurrentTime())\r\n                                        dateFormat.parse(SharedPreferencesManager.getTimeMassage())\r\n                                    } else dateFormat.parse(SharedPreferencesManager.getTimeMassage())\r\n\r\n                                log(\"getChatData (date1.after(date2): ${(date1.after(date2))}\")\r\n                                if (chat != null && (date1.after(date2))) {\r\n                                    dao.insertChat(chat.toChatEntity())\r\n                                    SharedPreferencesManager.setTimeMassage(chat.time)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n                    // Обработка ошибок\r\n                }\r\n            })\r\n        return dao.getChat()\r\n    }\r\n\r\n    override fun removeChatListener() {\r\n        val chatRef = FirebaseDatabase.getInstance().getReference(\"chat\")\r\n        chatRef.removeEventListener(chatValueEventListener)\r\n    }\r\n\r\n    fun savePictureToLocalDirectory(\r\n        pictureString: String,\r\n        callback: (path: String?) -> Unit\r\n    ) {\r\n        log(\"fun savePictureToLocalDirectory()\")\r\n        if (!context.cacheDir.exists()) context.cacheDir.mkdir()\r\n        val directory = File(context.cacheDir, \"\")\r\n        var uid = FirebaseAuth.getInstance().currentUser?.uid\r\n\r\n        val storage: FirebaseStorage = FirebaseStorage.getInstance()\r\n        val storageRef: StorageReference = storage.reference\r\n        val pathReference: StorageReference = storageRef.child(\"picture/$pictureString\")\r\n\r\n        val file = File(directory, \"$pictureString\")\r\n\r\n        log(\"savePictureToLocalDirectory() путь сохранения картинки: $pictureString\")\r\n        pathReference.getFile(file).addOnSuccessListener {\r\n            // Обработка успешного скачивания картинки\r\n            log(\"savePictureToLocalDirectory() картинка получена успешно\")\r\n\r\n            callback(\"$pictureString\")\r\n        }.addOnFailureListener {\r\n\r\n            log(\"savePictureToLocalDirectory() ошибка получение картинки: $it\")\r\n            // Обработка ошибок\r\n            callback(null)\r\n        }\r\n    }\r\n\r\n    override fun getQuiz8Data() {\r\n        log(\"fun getQuiz8Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz8\"))\r\n    }\r\n\r\n    @OptIn(DelicateCoroutinesApi::class)\r\n    override fun getQuiz7Data() {\r\n        log(\"fun getQuiz7Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz7\"))\r\n    }\r\n\r\n    private fun getQuiz(\r\n        quizRef: DatabaseReference\r\n    ) {\r\n        log(\"fun getQuiz()\")\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                for (data in snapshot.children) {\r\n                    val versionQuiz =\r\n                        SharedPreferencesManager.getVersionQuiz(data.key ?: \"-1\", context)\r\n                    val quiz = data.getValue(Quiz::class.java)\r\n\r\n                    log(\"getQuiz(), data: ${data.key}, versionQuiz: $versionQuiz, quizEntity: $quiz\")\r\n                    if (quiz != null && versionQuiz < quiz.versionQuiz) {\r\n                        savePictureToLocalDirectory(\r\n                            quiz.picture\r\n                        ) { path ->\r\n                            log(\"getQuiz() версия квеста меньше - обновляем, или добавляем\")\r\n                            if (versionQuiz == -1) dao.insertQuiz(\r\n                                quiz.toQuizEntity(\r\n                                    data.key!!.toInt(),\r\n                                    0,\r\n                                    0,\r\n                                    0,\r\n                                    path ?: \"\"\r\n                                )\r\n                            )\r\n                            else dao.updateQuiz(\r\n                                quiz.toQuizEntity(\r\n                                    data.key!!.toInt(),\r\n                                    0,\r\n                                    0,\r\n                                    0,\r\n                                    path\r\n                                )\r\n                            )\r\n                            val refQuestion = when (quiz.event) {\r\n                                2 -> FirebaseDatabase.getInstance().getReference(\"question2\")\r\n                                3 -> FirebaseDatabase.getInstance().getReference(\"question3\")\r\n                                4 -> FirebaseDatabase.getInstance().getReference(\"question4\")\r\n                                5 -> FirebaseDatabase.getInstance().getReference(\"question5\")\r\n                                6 -> FirebaseDatabase.getInstance().getReference(\"question6\")\r\n                                7 -> FirebaseDatabase.getInstance().getReference(\"question7\")\r\n                                8 -> FirebaseDatabase.getInstance().getReference(\"question8\")\r\n                                else -> FirebaseDatabase.getInstance()\r\n                                    .getReference(\"question1/${quiz.tpovId}\")\r\n                            }\r\n\r\n                            val refQuestionDetail = when (quiz.event) {\r\n                                1 -> FirebaseDatabase.getInstance()\r\n                                    .getReference(\"question_detail1/${getTpovId()}\")\r\n\r\n                                2 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                3 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                4 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                5 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                6 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                7 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                8 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                else -> FirebaseDatabase.getInstance()\r\n                                    .getReference(\"\")\r\n                            }\r\n                            getQuestion(refQuestion, data.key!!)\r\n                            getQuestionDetail(refQuestionDetail, data.key!!)\r\n\r\n                            SharedPreferencesManager.setVersionQuiz(\r\n                                data.key!!,\r\n                                quiz.versionQuiz,\r\n                                context\r\n                            )\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuiz6Data() {\r\n        log(\"fun getQuiz6Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz6\"))\r\n    }\r\n\r\n    override fun getQuiz5Data() {\r\n        log(\"fun getQuiz5Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz5\"))\r\n    }\r\n\r\n    override fun getQuiz4Data() {\r\n        log(\"fun getQuiz4Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz4\"))\r\n    }\r\n\r\n    override fun getQuiz3Data() {\r\n        log(\"fun getQuiz3Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz3\"))\r\n    }\r\n\r\n    override fun getQuiz2Data() {\r\n        log(\"fun getQuiz2Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz2\"))\r\n    }\r\n\r\n    override fun getQuiz1Data() {\r\n        log(\"fun getQuiz1Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz1/${getTpovId()}\"))\r\n    }\r\n\r\n    private fun getTpovId(): Int {\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        return sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n    }\r\n\r\n    override fun getQuestion8() {\r\n        log(\"fun getQuestion8Data\")\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question8\")\r\n        getQuestion(questionRef, \"-1\")\r\n    }\r\n\r\n    private fun getQuestion(questionRef: DatabaseReference, idQuiz: String) {\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestion snapshot: ${snapshot.key}\")\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    if (idQuizSnap.key == idQuiz) {\r\n                        dao.deleteQuestionByIdQuiz(idQuizSnap.key?.toInt() ?: -1)\r\n                        log(\"getQuestion idQuizSnap: ${idQuizSnap.key}\")\r\n                        for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            log(\"getQuestion idQuestionSnap: ${idQuestionSnap.key}\")\r\n                            for (languageSnap in idQuestionSnap.children) { // перебор всех вопросов внутри language\r\n                                log(\"getQuestion languageSnap: ${languageSnap.key}\")\r\n                                val question = languageSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    dao.insertQuestion(\r\n                                        QuestionEntity(\r\n                                            null,\r\n                                            idQuestionSnap.key?.toInt() ?: 0,\r\n                                            question.nameQuestion,\r\n                                            question.answerQuestion,\r\n                                            question.typeQuestion,\r\n                                            idQuizSnap.key?.toInt() ?: -1,\r\n                                            languageSnap.key ?: \"eu\",\r\n                                            question.lvlTranslate\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestion8Data ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion7() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question7\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion6() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question6\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion5() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question5\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion4() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question4\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion3() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question3\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion2() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question2\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion1() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question1/$${getTpovId()}\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail1() {\r\n        log(\"fun getQuestionDetail1()\")\r\n        getQuestionDetail(\r\n            FirebaseDatabase.getInstance().getReference(\"question_detail1/$${getTpovId()}\"), \"-1\"\r\n        )\r\n    }\r\n\r\n    override fun getQuestionDetail2() {\r\n        log(\"fun getQuestionDetail2()\")\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail2\"), \"-1\")\r\n    }\r\n\r\n    private fun getQuestionDetail(questionRef: DatabaseReference, idQuiz: String) {\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestionDetail2() snapshot: ${snapshot.key}\")\r\n                for (user in snapshot.children) {\r\n                    log(\"getQuestionDetail2() user: ${user.key}\")\r\n                    if (user.key == idQuiz && dao.getQuestionDetailList().size != user.childrenCount.toInt()) {\r\n                        dao.deleteQuestionDetailByIdQuiz(idQuiz.toInt())\r\n                        for (idQuizSnap in user.children) {                                             //\r\n                            log(\"getQuestionDetail2() idQuizSnap: ${idQuizSnap.key}\")\r\n                            val questionDetailEntity =\r\n                                idQuizSnap.getValue(QuestionDetail::class.java)\r\n                            if (questionDetailEntity != null) {\r\n                                log(\"getQuestionDetail2() квест не пустой, добавляем в список\")\r\n\r\n                                dao.insertQuizDetail(\r\n                                    questionDetailEntity.toQuestionDetailEntity(\r\n                                        null,\r\n                                        idQuiz.toInt(),\r\n                                        true\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestionDetail2() ошибка: $error\")\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail3() {\r\n        log(\"fun getQuestionDetail3()\")\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail3\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail4() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail4\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail5() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail5\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail6() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail6\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail7() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail7\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail8() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail8\"), \"-1\")\r\n    }\r\n\r\n    override fun getProfile() {\r\n        log(\"fun getProfile()\")\r\n        val profileRef = FirebaseDatabase.getInstance().getReference(\"Profiles\")\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n\r\n        profileRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getProfile() snapshot: ${snapshot.key}\")\r\n                val tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n                val profile = snapshot.child(\"$tpovId\").getValue(Profile::class.java)\r\n\r\n                log(\"getProfile() tpovId: $tpovId\")\r\n\r\n                if (profile != null) {\r\n                    log(\"getProfile() профиль не пустой\")\r\n                    if (dao.getProfileByTpovId(tpovId) == null) {\r\n                        log(\"getProfile() профиль по tpovid пустой, создаем новый\")\r\n                        dao.insertProfile(profile.toProfileEntity())\r\n\r\n                    } else {\r\n                        log(\"getProfile() профиль по tpovid найден\")\r\n                        dao.updateProfiles(\r\n                            dao.getProfileByFirebaseId(\r\n                                FirebaseAuth.getInstance().currentUser?.uid ?: \"\"\r\n                            )\r\n                                .copy(\r\n                                    addPointsGold = profile.addPoints.addGold,\r\n                                    addPointsNolics = profile.addPoints.addNolics,\r\n                                    addTrophy = profile.addPoints.addTrophy,\r\n                                    addPointsSkill = profile.addPoints.addSkill,\r\n                                    addPointsSkillInSeason = profile.addPoints.addSkillInSesone,\r\n                                    gamer = profile.qualification.gamer,\r\n                                    sponsor = profile.qualification.sponsor,\r\n                                    tester = profile.qualification.tester,\r\n                                    translater = profile.qualification.translater,\r\n                                    moderator = profile.qualification.moderator,\r\n                                    admin = profile.qualification.admin,\r\n                                    developer = profile.qualification.developer\r\n                                )\r\n                        )\r\n                    }\r\n                    synthLiveData.value = ++synth\r\n                    log(\"getProfile() synth: ${synthLiveData.value}\")\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getProfile() ошибка \")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun setEvent() {\r\n        log(\"fun setEvent\")\r\n\r\n        val tpovId = getTpovId()\r\n        val quizEventDB = dao.getQuizEvent()\r\n        val database = FirebaseDatabase.getInstance()\r\n\r\n        val quizRef2 = database.getReference(\"quiz2\")\r\n        val quizRef3 = database.getReference(\"quiz3\")\r\n        val quizRef4 = database.getReference(\"quiz4\")\r\n        val quizRef5 = database.getReference(\"quiz5\")\r\n        val quizRef6 = database.getReference(\"quiz6\")\r\n        val quizRef7 = database.getReference(\"quiz7\")\r\n        val quizRef8 = database.getReference(\"quiz8\")\r\n        val questionRef2 = database.getReference(\"question2\")\r\n        val questionRef3 = database.getReference(\"question3\")\r\n        val questionRef4 = database.getReference(\"question4\")\r\n        val questionRef5 = database.getReference(\"question5\")\r\n        val questionRef6 = database.getReference(\"question6\")\r\n        val questionRef7 = database.getReference(\"question7\")\r\n        val questionRef8 = database.getReference(\"question8\")\r\n        val playersRef = database.getReference(\"players\")\r\n        val playersQuiz = playersRef.child(\"quiz\")\r\n\r\n        for (quiz in quizEventDB) {\r\n            log(\"fun setEvent event: ${quiz.event}, quiz.id.toString(): ${quiz.id.toString()}\")\r\n            when (quiz.event) {\r\n                3 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}, quiz.id.toString(): ${quiz.id.toString()}\")\r\n                    quizRef3.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef2.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef3.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question).addOnSuccessListener {\r\n                                questionRef2.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n\r\n                }\r\n\r\n                4 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}\")\r\n                    quizRef4.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef3.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef4.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question).addOnSuccessListener {\r\n                                questionRef3.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n                }\r\n\r\n                5 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}\")\r\n                    quizRef5.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef4.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef5.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question)\r\n                            .addOnSuccessListener {\r\n                                questionRef4.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n                }\r\n\r\n                6 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}\")\r\n                    quizRef6.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef5.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef6.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question)\r\n                            .addOnSuccessListener {\r\n                                questionRef5.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n                }\r\n\r\n                7 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}\")\r\n                    quizRef7.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef6.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef7.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question)\r\n                            .addOnSuccessListener {\r\n                                questionRef6.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n                }\r\n\r\n                8 -> {\r\n                    quizRef7.child(\"${quiz.id}\").removeValue()\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef7.child(\"${question.idQuiz}\").removeValue()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override suspend fun setQuizData() {\r\n        log(\"fun setQuizData()\")\r\n        var tpovId = getTpovId()\r\n        var quizDB = dao.getQuizEvent()\r\n\r\n        var idQuiz = 0\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val quizRef1 = database.getReference(\"quiz1\")\r\n        val quizRef2 = database.getReference(\"quiz2\")\r\n        val quizRef3 = database.getReference(\"quiz3\")\r\n        val quizRef4 = database.getReference(\"quiz4\")\r\n        val quizRef5 = database.getReference(\"quiz5\")\r\n        val quizRef6 = database.getReference(\"quiz6\")\r\n        val quizRef7 = database.getReference(\"quiz7\")\r\n        val quizRef8 = database.getReference(\"quiz8\")\r\n\r\n        val playersRef = database.getReference(\"players\")\r\n        // создаем скоуп для запуска корутин\r\n        val coroutineScope = CoroutineScope(Dispatchers.Default)\r\n        val playersQuiz = playersRef.child(\"quiz\")\r\n\r\n// запускаем корутину\r\n        coroutineScope.launch {\r\n            log(\"setQuizData() launch\")\r\n            var readValue = true\r\n            var blockServer = false\r\n            quizDB.forEach {\r\n                if (it.id!! < 100) {\r\n                    log(\"setQuizData() найден квест который не был синхронизирован с сервером\")\r\n                    blockServer = true\r\n                }\r\n            }\r\n\r\n            val databaseReference = FirebaseDatabase.getInstance().getReference(\"players\")\r\n            databaseReference.child(\"read\").addValueEventListener(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    if (blockServer) {\r\n                        readValue = dataSnapshot.value as Boolean\r\n                        log(\"setQuizData() databaseReference readValue: $readValue\")\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    log(\"setQuizData() databaseReference error read fb: $databaseError\")\r\n                }\r\n            })\r\n\r\n            playersRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    log(\"setQuizData() playersRef snapshot: $snapshot\")\r\n\r\n                    coroutineScope.launch {\r\n                        if (blockServer) {\r\n                            var i = 0\r\n                            while (!readValue) {\r\n                                log(\"setQuizData() playersRef сервер занят, ждем\")\r\n                                delay(100) // заменяем Thread.sleep() на delay()\r\n                                i++\r\n\r\n                                if (i == 300) Toast.makeText(\r\n                                    context,\r\n                                    \"Если сервер не освободится в течении 3 минут - будет совершена принудительная синхронизация, возможно она решит проблему\",\r\n                                    Toast.LENGTH_LONG\r\n                                ).show()\r\n                                if (i == 600 * 3) break\r\n                            }\r\n\r\n                            val players =\r\n                                snapshot.value as Map<*, *> // Преобразование значений в Map\r\n                            idQuiz =\r\n                                (players[\"idQuiz\"] as Long).toInt() // Получение значения переменной allQuiz\r\n                            log(\"setQuizData() playersRef idQuiz: $idQuiz\")\r\n                            val updates = hashMapOf<String, Any>(\"read\" to false)\r\n                            playersRef.updateChildren(updates)\r\n                        }\r\n\r\n                        quizDB.forEach { quiz ->\r\n                            val quizRatingMap = mapOf(\r\n                                \"rating\" to quiz.rating,\r\n                                \"stars\" to quiz.starsAll\r\n                            )\r\n\r\n                            log(\"setQuizData() playersRef quizDB перебираем: $quiz\")\r\n                            if (quiz.event == 1) {\r\n                                log(\"setQuizData() playersRef quizDB event1\")\r\n\r\n                                if (quiz.id!! >= 100) {\r\n                                    log(\"setQuizData() playersRef quizDB event1 id >= 100 просто созраняем на сервер\")\r\n                                    quizRef1.child(\"${tpovId}/${quiz.id.toString()}\")\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${quiz.tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                } else {\r\n                                    log(\"setQuizData() playersRef quizDB event1 id < 100 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    val oldId = quiz.id\r\n                                    quiz.id = idQuiz\r\n                                    quizRef1.child(\"${tpovId}/$idQuiz\").setValue(quiz)\r\n                                        .addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${quiz.tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId!!).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz,\r\n                                        context\r\n                                    )\r\n                                }\r\n\r\n                            } else if (quiz.event == 2) {\r\n                                log(\"setQuizData() playersRef quizDB event2\")\r\n                                if (quiz.id!! >= 100) {\r\n                                    log(\"setQuizData() playersRef quizDB id >= 100  event2 просто созраняем на сервер\")\r\n                                    quizRef2.child(\"${tpovId}/${quiz.id.toString()}\")\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                } else {\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef2.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz,\r\n                                        context\r\n                                    )\r\n                                }\r\n\r\n                            } else if (quiz.event == 3) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef3.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz,\r\n                                        context\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef3.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n\r\n                                }\r\n                            } else if (quiz.event == 4) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef4.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz,\r\n                                        context\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef4.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            } else if (quiz.event == 5) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef5.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz,\r\n                                        context\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef5.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            } else if (quiz.event == 6) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef6.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz,\r\n                                        context\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef6.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            } else if (quiz.event == 7) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef7.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz,\r\n                                        context\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef7.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            } else if (quiz.event == 8) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    log(\"setQuizData() event8 просто сохраняем на сервер\")\r\n                                    quizRef8.child(quiz.id.toString()).setValue(quiz)\r\n                                        .addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz,\r\n                                        context\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef8.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n                    log(\"setQuizData() error: $error\")\r\n                }\r\n            })\r\n\r\n            var synth2 = true\r\n            log(\"setQuizData() dao.getQuizList(tpovId): ${dao.getQuizList(tpovId)}\")\r\n            while (synth2) {\r\n                synth2 = false\r\n                dao.getQuizList(tpovId).forEach {\r\n                    log(\"setQuizData() it: $it\")\r\n                    if (it.id!! < 100) synth2 = true\r\n                }\r\n            }\r\n            synthLiveData.postValue(++synth)\r\n            if (blockServer) {\r\n\r\n                log(\"setQuizData() blockServer = true\")\r\n                coroutineScope.launch {\r\n                    while (true) {\r\n                        var openServer = true\r\n                        quizDB.forEach {\r\n                            if (it.id!! < 100) openServer = false\r\n                        }\r\n                        log(\"setQuizData() сервер не завершился, ждем..\")\r\n                        if (openServer) break\r\n                        delay(100)\r\n                    }\r\n\r\n                    log(\"setQuizData() открываем доступ к серверу\")\r\n\r\n                    val databaseReference = FirebaseDatabase.getInstance().reference\r\n                    val updates = hashMapOf<String, Any>(\r\n                        \"players/read\" to true,\r\n                        \"players/idQuiz\" to idQuiz\r\n                    )\r\n                    databaseReference.updateChildren(updates).addOnFailureListener {\r\n                        log(\"setQuizData() ошибка : $it\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun setQuestionData() {\r\n        val tpovId = getTpovId()\r\n\r\n        log(\"fun setQuestionData()\")\r\n        var question = dao.getQuestionList()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val questionRef1 = database.getReference(\"question1\")\r\n        val questionRef2 = database.getReference(\"question2\")\r\n        val questionRef3 = database.getReference(\"question3\")\r\n        val questionRef4 = database.getReference(\"question4\")\r\n        val questionRef5 = database.getReference(\"question5\")\r\n        val questionRef6 = database.getReference(\"question6\")\r\n        val questionRef7 = database.getReference(\"question7\")\r\n        val questionRef8 = database.getReference(\"question8\")\r\n\r\n        var i = 0\r\n        question.forEach {\r\n            log(\r\n                \"setQuestionData() перебираем квесты size: ${question.size}, dao.getQuizTpovIdById(it.idQuiz): ${\r\n                    dao.getQuizTpovIdById(\r\n                        it.idQuiz\r\n                    )\r\n                }, = tpovid: $tpovId\"\r\n            )\r\n            synthLiveData.value = --synth\r\n            log(\"setQuestionData() найдет квест it: ${it}\")\r\n            if (dao.getEventByIdQuiz(it.idQuiz) == 1) questionRef1.child(\"${tpovId}/${it.idQuiz}/${it.numQuestion}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener {\r\n                    synthLiveData.value = ++synth\r\n                }\r\n            if (dao.getEventByIdQuiz(it.idQuiz) == 2) questionRef2.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (dao.getEventByIdQuiz(it.idQuiz) == 3) questionRef3.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (dao.getEventByIdQuiz(it.idQuiz) == 4) questionRef4.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (dao.getEventByIdQuiz(it.idQuiz) == 5) questionRef5.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (dao.getEventByIdQuiz(it.idQuiz) == 6) questionRef6.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (dao.getEventByIdQuiz(it.idQuiz) == 7) questionRef7.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (dao.getEventByIdQuiz(it.idQuiz) == 8) questionRef8.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n        }\r\n\r\n        synthLiveData.value = ++synth\r\n\r\n\r\n    }\r\n\r\n    override fun setTpovIdFB() {\r\n\r\n        log(\"fun setTpovIdFB()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val ref = database.getReference(\"players\")\r\n        val uid = FirebaseAuth.getInstance().uid\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        log(\"setTpovIdFB() tpovId = $tpovId\")\r\n\r\n        ref.child(\"listTpovId/$uid\").setValue(tpovId).addOnSuccessListener {\r\n            log(\"setTpovIdFB() успех загрузки на сервер\")\r\n            synthLiveData.value = ++synth\r\n        }.addOnFailureListener {\r\n\r\n            log(\"setTpovIdFB() ошибка: $it\")\r\n        }\r\n    }\r\n\r\n    override fun getTpovIdFB() {\r\n        synth = 0\r\n        synthLiveData.value = 0\r\n        log(\"fun getTpovIdFB()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val uid = FirebaseAuth.getInstance().uid\r\n        val ref = database.getReference(\"players\")\r\n\r\n        ref.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getTpovIdFB() snapshot: $snapshot\")\r\n\r\n                val tpovId: Long =\r\n                    snapshot.child(\"listTpovId/$uid\").getValue(Long::class.java) ?: 0\r\n                log(\"getTpovIdFB() tpovId: $tpovId\")\r\n                val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n                with(sharedPref.edit()) {\r\n                    putInt(\"tpovId\", tpovId.toInt())\r\n                    apply()\r\n                }\r\n\r\n                log(\"getTpovIdFB()/ set tpovId: $tpovId\")\r\n                synthLiveData.value = ++synth\r\n\r\n                log(\"getTpovIdFB()/ set synth: ${synthLiveData.value}\")\r\n                log(\"getTpovIdFB()/ set synth: ${synth}\")\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getTpovIdFB() ошибка $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun setQuestionDetail() {\r\n        val tpovId = getTpovId()\r\n        log(\"fun setQuestionDetail()\")\r\n\r\n        var questionDetail = dao.getQuestionDetailList()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n\r\n        val questionDetailRefs = arrayOf(\r\n            database.getReference(\"question_detail1/${tpovId}\"),\r\n            database.getReference(\"question_detail2\"),\r\n            database.getReference(\"question_detail3\"),\r\n            database.getReference(\"question_detail4\"),\r\n            database.getReference(\"question_detail5\"),\r\n            database.getReference(\"question_detail6\"),\r\n            database.getReference(\"question_detail7\"),\r\n            database.getReference(\"question_detail8\")\r\n        )\r\n\r\n        questionDetail.forEach {\r\n            if (dao.getQuizTpovIdById(it.idQuiz) == tpovId && !it.synthFB) {\r\n                synthLiveData.value = --synth\r\n                log(\"setQuestionDetail() найден квест с таким же tpovId, idQuiz: ${it.idQuiz}\")\r\n                val event = dao.getEventByIdQuiz(it.idQuiz)\r\n                if (event in 1..8) {\r\n                    questionDetailRefs[event!! - 1].child(\"${it.idQuiz}\").push()\r\n                        .setValue(it).addOnSuccessListener { _ ->\r\n                            dao.updateQuizDetail(it.copy(synthFB = true))\r\n                            synthLiveData.value = ++synth\r\n                        }\r\n                }\r\n            }\r\n        }\r\n        synthLiveData.value = ++synth\r\n    }\r\n\r\n    override fun setProfile() {\r\n        log(\"fun setProfile()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val profileRef = database.getReference(\"Profiles\")\r\n        val profilesRef = database.getReference(\"players\")\r\n        var idUsers = 0\r\n        var oldIdUser = 0\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        val profile = dao.getProfileByTpovId(tpovId)\r\n\r\n        log(\"setProfile() tpovId: $tpovId\")\r\n        if (tpovId == 0) {\r\n\r\n            profilesRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n\r\n                    log(\"setProfile() snapshot: ${snapshot.key}\")\r\n                    idUsers =\r\n                        ((snapshot.value as Map<*, *>)[\"idUser\"] as Long).toInt() // Получение значения переменной allQuiz\r\n                    oldIdUser = tpovId\r\n                    idUsers++\r\n\r\n                    profilesRef.updateChildren(\r\n                        hashMapOf<String, Any>(\r\n                            \"idUser\" to idUsers\r\n                        )\r\n                    )\r\n\r\n                    profileRef.child(idUsers.toString()).setValue(\r\n                        profile.copy(\r\n                            tpovId = idUsers,\r\n                            idFirebase = FirebaseAuth.getInstance().currentUser?.uid ?: \"\",\r\n                            dateSynch = TimeManager.getCurrentTime()\r\n                        ).toProfile()\r\n                    ).addOnSuccessListener {\r\n\r\n                        dao.updateProfiles(\r\n                            profile.copy(\r\n                                tpovId = idUsers,\r\n                                idFirebase = FirebaseAuth.getInstance().currentUser?.uid ?: \"\",\r\n                                dateSynch = TimeManager.getCurrentTime()\r\n                            )\r\n                        )\r\n\r\n                        dao.getQuizList(oldIdUser).forEach {\r\n                            dao.updateQuiz(it.copy(tpovId = idUsers))\r\n                        }\r\n\r\n                        with(sharedPref.edit()) {\r\n                            putInt(\"tpovId\", idUsers)\r\n                            apply()\r\n                        }\r\n                        setTpovIdFB()\r\n\r\n                        log(\"setProfile() tpovId: $tpovId\")\r\n                    }.addOnFailureListener {\r\n                        log(\"setProfile() error1: $it\")\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n\r\n                    log(\"setProfile() error2: $error\")\r\n\r\n                }\r\n            })\r\n\r\n\r\n        } else {\r\n            log(\"setProfile() id != 0 просто сохраняем на сервер profile: $profile, tpovId: $tpovId\")\r\n            try {\r\n                log(\"setProfile() id != 0 просто сохраняем на сервер profile: $profile, tpovId: $tpovId\")\r\n                profileRef.child(tpovId.toString()).setValue(profile.toProfile())\r\n                    .addOnSuccessListener {\r\n                        synthLiveData.value = ++synth\r\n                    }\r\n\r\n                log(\"setProfile() id != 0 просто сохраняем на сервер\")\r\n            } catch (e: java.lang.Exception) {\r\n                synthLiveData.value = ++synth\r\n                log(\"setProfile() id != 0 и в бд пусто, ничего не отправляем\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    override fun getUserName(): Profile {\r\n        val tpovId = getTpovId()\r\n        log(\"fun getUserName()\")\r\n        val profileRef = FirebaseDatabase.getInstance().getReference(\"Profiles\")\r\n        var profile = Profile()\r\n\r\n        profileRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getUserName() snapshot: ${snapshot.key}\")\r\n                profile = snapshot.child(\"$tpovId\").getValue(Profile::class.java)!!\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getUserName() ошибка \")\r\n            }\r\n\r\n        })\r\n        return profile\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    fun log(m: String) {\r\n        Logcat.log(m, \"RepositoryFB\", Logcat.LOG_FIREBASE)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt b/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt	(date 1682579053114)
@@ -22,16 +22,20 @@
 import java.util.*
 import javax.inject.Inject
 import javax.inject.Singleton
-
+interface ProgressListener {
+    fun onProgressUpdate(progress: Int, text: String)
+}
 @Singleton
 class RepositoryFBImpl @Inject constructor(
     private val dao: QuizDao,
     private val application: Application
-) : RepositoryFB {
+) : RepositoryFB, ProgressListener {
 
     private lateinit var chatValueEventListener: ValueEventListener
     private val context = application.baseContext
     var synthLiveData = MutableLiveData<Int>()
+    var progressLiveData = MutableLiveData<Int>()
+    var textprogressLiveData = MutableLiveData<String>()
     var synth = 0
     var synthGetData = 0
     var synthSetData = 0
@@ -72,21 +76,23 @@
     }
 
     override fun getPlayersList() {
+
         val playersListRef = FirebaseDatabase.getInstance().getReference("players/listPlayers")
         playersListRef.addListenerForSingleValueEvent(object : ValueEventListener {
             override fun onDataChange(snapshot: DataSnapshot) {
-
                 val playersList = mutableListOf<PlayersEntity>()
-                log("getPlayersList snapshot: $snapshot")
+                val totalCount = snapshot.childrenCount.toInt()
+                var loadedCount = 0
+
                 for (playerSnapshot in snapshot.children) {
-
-                    log("getPlayersList playerSnapshot: $playerSnapshot")
                     val player = playerSnapshot.getValue(Players::class.java)
                     if (player != null) {
-                        log("getPlayersList player: $player")
                         playersList.add(
                             player.toPlayersEntity().copy(id = playerSnapshot.key?.toInt())
                         )
+                        loadedCount++
+                        val progress = (100.0 * loadedCount / totalCount).toInt()
+                        onProgressUpdate(progress, "Загрузка списка игроков")
                     }
                 }
                 dao.deletePlayersList()
@@ -98,7 +104,12 @@
             }
         })
     }
+    override fun onProgressUpdate(progress: Int, text: String) {
+        // Здесь вы обновите LiveData, которую ваша активити будет наблюдать
 
+        progressLiveData.postValue(progress)
+        textprogressLiveData.postValue(text)
+    }
     override fun getTranslateFB(lvlTranslate: Int) {
         val questionRef3 = FirebaseDatabase.getInstance().getReference("question3")
         val questionRef4 = FirebaseDatabase.getInstance().getReference("question4")
Index: app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.mainactivity\r\n\r\nimport android.Manifest.permission.READ_EXTERNAL_STORAGE\r\nimport android.Manifest.permission.WRITE_EXTERNAL_STORAGE\r\nimport android.animation.Animator\r\nimport android.animation.AnimatorListenerAdapter\r\nimport android.animation.ObjectAnimator\r\nimport android.animation.ValueAnimator\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.drawable.ClipDrawable\r\nimport android.graphics.drawable.LayerDrawable\r\nimport android.os.Bundle\r\nimport android.view.Gravity\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.view.animation.LinearInterpolator\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.gms.ads.interstitial.InterstitialAd\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.databinding.ActivityMainBinding\r\nimport com.tpov.schoolquiz.presentation.MainApp\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.dowload.DownloadFragment\r\nimport com.tpov.schoolquiz.presentation.factory.ViewModelFactory\r\nimport com.tpov.schoolquiz.presentation.fragment.FragmentManager\r\nimport com.tpov.schoolquiz.presentation.mainactivity.info.InfoFragment\r\nimport com.tpov.schoolquiz.presentation.network.AutorisationFragment\r\nimport com.tpov.schoolquiz.presentation.network.chat.ChatFragment\r\nimport com.tpov.schoolquiz.presentation.network.event.EventFragment\r\nimport com.tpov.schoolquiz.presentation.network.profile.ProfileFragment\r\nimport com.tpov.schoolquiz.presentation.network.profile.UsersFragment\r\nimport com.tpov.schoolquiz.presentation.setting.SettingsFragment\r\nimport com.tpov.schoolquiz.presentation.shop.ShopFragment\r\nimport kotlinx.coroutines.*\r\nimport java.text.NumberFormat\r\nimport javax.inject.Inject\r\n\r\n/**\r\n * This is the main screen of the application, it consists of a panel that shows how much spare is left.\r\n * questions of the day and a fragment that displays user and system questions\r\n */\r\n\r\n@InternalCoroutinesApi\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityMainBinding\r\n\r\n    private var iAd: InterstitialAd? = null\r\n    private var numQuestionNotDate = 0\r\n    private lateinit var viewModel: MainActivityViewModel\r\n    private var fr1 = 1\r\n    private var fr2 = 1\r\n\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n\r\n    private var recreateActivity: Boolean = false\r\n\r\n    private val component by lazy {\r\n        (application as MainApp).component\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        component.inject(this)\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        log(\"onCreate()\")\r\n        // Remove the action bar\r\n        supportActionBar?.hide()\r\n\r\n        val imageResGold = R.drawable.baseline_favorite_24_gold\r\n        val imageRes = R.drawable.baseline_favorite_24\r\n\r\n        val filledDrawable = ContextCompat.getDrawable(this, imageRes)\r\n        val filledDrawableGold = ContextCompat.getDrawable(this, imageResGold)\r\n        val emptyDrawable = ContextCompat.getDrawable(this, R.drawable.baseline_favorite_24_empty)\r\n\r\n        val layers = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layersGold = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawableGold, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layerDrawable = LayerDrawable(layers)\r\n        val layerDrawableGold = LayerDrawable(layersGold)\r\n\r\n        layerDrawable.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawableGold.setDrawableByLayerId(0, emptyDrawable)\r\n\r\n        layerDrawable.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawableGold.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawableGold, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n\r\n        layerDrawable.setId(0, android.R.id.background)\r\n        layerDrawableGold.setId(0, android.R.id.background)\r\n        layerDrawable.setId(1, android.R.id.progress)\r\n        layerDrawableGold.setId(1, android.R.id.progress)\r\n\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                READ_EXTERNAL_STORAGE\r\n            ) == PackageManager.PERMISSION_GRANTED &&\r\n            ContextCompat.checkSelfPermission(\r\n                this,\r\n                WRITE_EXTERNAL_STORAGE\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            // Разрешения уже предоставлены, выполнить нужную функцию\r\n            viewModel = ViewModelProvider(this, viewModelFactory)[MainActivityViewModel::class.java]\r\n            viewModel.init()\r\n        } else {\r\n            // Разрешения не предоставлены, запросить их\r\n            requestStoragePermission()\r\n        }\r\n\r\n        setButtonNavListener()\r\n        numQuestionNotDate = intent.getIntExtra(NUM_QUESTION_NOT_NUL, 0)\r\n\r\n        FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n        SetItemMenu.setHomeMenu(binding, 1, this)\r\n\r\n        loadNumQuestionNotDate()\r\n\r\n        binding.drawerLayout.addDrawerListener(object : DrawerLayout.DrawerListener {\r\n            override fun onDrawerSlide(drawerView: View, slideOffset: Float) {\r\n                // Вычисляем на сколько нужно сдвинуть элемент LinearLayout\r\n                val slideX = drawerView.width * slideOffset\r\n                binding.cv.translationX = slideX\r\n            }\r\n\r\n            override fun onDrawerOpened(drawerView: View) {\r\n                // Вызывается при открытии шторки\r\n            }\r\n\r\n            override fun onDrawerClosed(drawerView: View) {\r\n                // Вызывается при закрытии шторки\r\n            }\r\n\r\n            override fun onDrawerStateChanged(newState: Int) {\r\n                // Вызывается при изменении состояния шторки\r\n            }\r\n        })\r\n\r\n        binding.tvName.text = \"\"\r\n        val textToShow = \"${viewModel.getProfile.nickname}  \\uD83E\\uDD47\\uD83E\\uDD48️\\uD83C\\uDFC6\\uD83C\\uDF97️\\uD83C\\uDF83\\uD83C\\uDF84\\uD83C\\uDF81\\uD83D\\uDCFB\\uD83C\\uDFA7\\uD83C\\uDF9E️\\uD83E\\uDE99\\uD83D\\uDCC0\\uD83D\\uDCB5❤️\"\r\n        showTextWithDelay(binding.tvName, textToShow, 50L)\r\n\r\n        listenerDrawer()\r\n        val imvNolics = binding.imvNolics\r\n        val imvStars = binding.imvStars\r\n        val imvGold = binding.imvGold\r\n        val imvPremium = binding.imvPremiun\r\n        val tvPbLoad = binding.tvPbLoad\r\n\r\n        val startValue = 0\r\n        val targetValue = 1000\r\n        val animationDuration = 3000L\r\n\r\n\r\n        val imageViewGold = binding.pbLifeGold1\r\n        val imageViewLife1 = binding.pbLife1\r\n        val imageViewLife2 = binding.pbLife2\r\n        val imageViewLife3 = binding.pbLife3\r\n        val imageViewLife4 = binding.pbLife4\r\n        val imageViewLife5 = binding.pbLife5\r\n\r\n        imageViewGold.setImageDrawable(layerDrawableGold)\r\n        //imageViewLife1.setImageDrawable(layerDrawable)\r\n        //imageViewLife2.setImageDrawable(layerDrawable)\r\n        //imageViewLife3.setImageDrawable(layerDrawable)\r\n        //imageViewLife4.setImageDrawable(layerDrawable)\r\n        imageViewLife5.setImageDrawable(layerDrawable)\r\n\r\n        val level = 5000 //0..10000\r\n        layerDrawable.findDrawableByLayerId(android.R.id.progress).level = 3000\r\n        layerDrawableGold.findDrawableByLayerId(android.R.id.progress).level = 7000\r\n        SetItemMenu.setHomeMenu(binding, fr2, this)\r\n\r\n\r\n        val yRotateAnimationDuration = 1000\r\n        val repeatDelay = 6000L // Задержка между повторениями (1 минута)\r\n        var initialDelay = 1000L // Начальная задержка перед запуском анимации\r\n        var addInitialDelay = 250L\r\n\r\n\r\n        showTextWithDelay(binding.tvPbLoad, \"Соединение с сервером...\", 50)\r\n\r\n        startAnimationWithRepeat(imvStars, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        animateValueFloat(binding.tvStars, 0.0f, 8.5f, animationDuration, initialDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvNolics, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        animateValue(binding.tvNolics, startValue, targetValue, animationDuration, initialDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imageViewLife1, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imageViewLife2, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imageViewLife3, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imageViewLife4, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imageViewLife5, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imageViewGold, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvGold, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        animateValue(binding.tvGold, startValue, 100, animationDuration, initialDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvPremium, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        animateValue(binding.tvCountPremiun, startValue, 999, animationDuration, initialDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n    }\r\n\r\n    private fun animateValue(textView: TextView, startValue: Int, endValue: Int, duration: Long, startDelay: Long) {\r\n        val valueAnimator = ValueAnimator.ofInt(startValue, endValue).apply {\r\n            setDuration(duration)\r\n            setStartDelay(startDelay)\r\n            interpolator = LinearInterpolator()\r\n        }\r\n        valueAnimator.addUpdateListener { animation ->\r\n            textView.text = NumberFormat.getIntegerInstance().format(animation.animatedValue)\r\n        }\r\n        valueAnimator.start()\r\n    }\r\n\r\n    private fun animateValueFloat(textView: TextView, startValue: Float, endValue: Float, duration: Long, startDelay: Long) {\r\n        val valueAnimator = ValueAnimator.ofFloat(startValue, endValue).apply {\r\n            setDuration(duration)\r\n            setStartDelay(startDelay)\r\n            interpolator = LinearInterpolator()\r\n        }\r\n        valueAnimator.addUpdateListener { animation ->\r\n            textView.text = String.format(\"%.1f\", animation.animatedValue)\r\n        }\r\n        valueAnimator.start()\r\n    }\r\n\r\n\r\n\r\n    private fun showTextWithDelay(textView: TextView, text: String, delayInMillis: Long) {\r\n        CoroutineScope(Dispatchers.Main).launch {\r\n            for (char in text) {\r\n                textView.append(char.toString())\r\n                delay(delayInMillis)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun startAnimationWithRepeat(imageView: ImageView, duration: Int, initialDelay: Long, repeatDelay: Long) {\r\n        val animator = ObjectAnimator.ofFloat(imageView, \"rotationY\", 0f, 360f).apply {\r\n            this.duration = duration.toLong()\r\n        }\r\n\r\n        animator.addListener(object : AnimatorListenerAdapter() {\r\n            override fun onAnimationEnd(animation: Animator) {\r\n                animation.removeListener(this)\r\n                imageView.postDelayed({\r\n                    animation.addListener(this)\r\n                    animation.start()\r\n                }, repeatDelay)\r\n            }\r\n        })\r\n\r\n        imageView.postDelayed({\r\n            animator.start()\r\n        }, initialDelay)\r\n    }\r\n\r\n\r\n    // Использование функции в вашем коде\r\n\r\n\r\n    override fun onPrepareOptionsMenu(menu: Menu): Boolean {\r\n        return super.onPrepareOptionsMenu(menu)\r\n    }\r\n\r\n    private fun listenerDrawer() {\r\n\r\n        log(\"fun listenerDrawer()\")\r\n\r\n        binding.navigationView.setNavigationItemSelectedListener { menuItem ->\r\n\r\n            binding.drawerLayout.closeDrawer(GravityCompat.START)\r\n            // ваш код обработки нажатия на элемент меню\r\n\r\n            log(\"listenerDrawer() menuItem: ${menuItem.toString()}\")\r\n            when (menuItem.toString()) {\r\n                resources.getString(R.string.nav_chat) -> {\r\n                    FragmentManager.setFragment(ChatFragment.newInstance(), this)\r\n                    SetItemMenu.setNetworkMenu(binding, 3, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_downloads) -> {\r\n                    FragmentManager.setFragment(DownloadFragment(), this)\r\n                    SetItemMenu.setHomeMenu(binding, 4, this) // Используйте подходящий номер пункта меню\r\n                }\r\n\r\n                resources.getString(R.string.nav_enter) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 10, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_exit) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 11, this)\r\n                    FirebaseAuth.getInstance().signOut()\r\n                }\r\n\r\n                resources.getString(R.string.nav_global) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 8, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_friends) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 9, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_home) -> {\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_leaders) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 11, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_massages) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 5, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_my_quiz) -> {\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(1), this)\r\n                    SetItemMenu.setHomeMenu(binding, 2, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_news) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 7, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_players) -> {\r\n                    FragmentManager.setFragment(UsersFragment.newInstance(), this)\r\n                    SetItemMenu.setNetworkMenu(binding, 6, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_reports) -> {\r\n\r\n                }\r\n\r\n                resources.getString(R.string.nav_task) -> {\r\n                    FragmentManager.setFragment(EventFragment.newInstance(), this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_settings) -> {\r\n                    FragmentManager.setFragment(SettingsFragment.newInstance(), this)\r\n                }\r\n\r\n            }\r\n\r\n                binding.navigationView.inflateMenu(R.menu.navigation_manu)\r\n            true // не забудьте вернуть значение true, чтобы показать, что событие было обработано\r\n\r\n        }\r\n    }\r\n\r\n    private fun requestStoragePermission() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE),\r\n            REQUEST_CODE_STORAGE_PERMISSION\r\n        )\r\n    }\r\n\r\n    //Окраживаем квадратики в красный и зеленый в зависимости сколько осталось запасных вопросов-дня\r\n    private fun loadNumQuestionNotDate() = with(binding) {\r\n\r\n        if (numQuestionNotDate > 0) textView10.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 1) textView9.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 2) textView8.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 3) textView7.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 4) textView6.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 5) textView5.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 6) textView4.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 7) textView3.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 8) textView2.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 9) textView.setBackgroundResource(R.color.num_chack_norice_green)\r\n    }\r\n\r\n    fun replaceFragment(fragment: Fragment) {\r\n        val fragmentManager = supportFragmentManager\r\n        val transaction = fragmentManager.beginTransaction()\r\n        transaction.replace(R.id.title_fragment, fragment)\r\n        transaction.addToBackStack(null)\r\n        transaction.commit()\r\n\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n\r\n        if (requestCode == REQUEST_CODE_STORAGE_PERMISSION) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED &&\r\n                grantResults[1] == PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                // Разрешения получены, выполнить нужную функцию\r\n                viewModel =\r\n                    ViewModelProvider(this, viewModelFactory)[MainActivityViewModel::class.java]\r\n                viewModel.init()\r\n            } else {\r\n                // Разрешения не получены, вывести сообщение об ошибке\r\n                Toast.makeText(\r\n                    this,\r\n                    \"Storage permission is required to use this app\",\r\n                    Toast.LENGTH_LONG\r\n                ).show()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun setVisibleMenu(itemId: MenuItem) {\r\n\r\n        log(\"fun setVisibleMenu()\")\r\n        log(\"setVisibleMenu() itemId.itemId = ${itemId}\")\r\n        when (itemId.itemId) {\r\n\r\n            R.id.menu_home -> {\r\n                if (fr1 != 1) {\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                    fr1 = 1\r\n                }\r\n            }\r\n\r\n            R.id.menu_adb -> {\r\n                if (fr1 != 2) {\r\n\r\n                    fr1 = 2\r\n                }\r\n            }\r\n\r\n            R.id.menu_settings -> {\r\n                if (fr1 != 3) {\r\n\r\n                    fr1 = 3\r\n                }\r\n            }\r\n\r\n            R.id.menu_info -> {\r\n                if (fr1 != 4) {\r\n\r\n                    fr1 = 4\r\n                }\r\n            }\r\n\r\n            R.id.menu_network -> {\r\n                if (fr1 != 5) {\r\n                    SetItemMenu.setNetworkMenu(binding, 1, this)\r\n                    fr1 = 5\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setButtonNavListener() {\r\n\r\n        log(\"fun setButtonNavListener()\")\r\n        binding.bNav.setOnItemSelectedListener {\r\n\r\n            setVisibleMenu(it)\r\n            when (it.itemId) {\r\n\r\n                R.id.menu_home -> {\r\n\r\n                    log(\"setButtonNavListener() menu_home\")\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                }\r\n\r\n                R.id.menu_adb -> {\r\n                    FragmentManager.setFragment(ShopFragment.newInstance(), this)\r\n                }\r\n\r\n                R.id.menu_settings -> {\r\n                    log(\"setButtonNavListener() menu_settings\")\r\n                }\r\n\r\n                R.id.menu_info -> {\r\n                    log(\"setButtonNavListener() menu_info\")\r\n                    FragmentManager.setFragment(InfoFragment.newInstance(), this)\r\n                }\r\n\r\n                R.id.menu_network -> {\r\n\r\n                    log(\"setButtonNavListener() menu_network\")\r\n                    val user = FirebaseAuth.getInstance()\r\n                    if (user.currentUser != null) {\r\n                        log(\"setButtonNavListener() Аккаунт зареган\")\r\n                        Toast.makeText(this@MainActivity, \"Аккаунт найден\", Toast.LENGTH_LONG)\r\n                            .show()\r\n\r\n                        FragmentManager.setFragment(ProfileFragment.newInstance(), this)\r\n                    } else {\r\n\r\n                        log(\"setButtonNavListener() Аккаунт не зареган\")\r\n                        Toast.makeText(\r\n                            this@MainActivity,\r\n                            \"Аккаунт не найден, авторизуйтесь.\",\r\n                            Toast.LENGTH_LONG\r\n                        ).show()\r\n                        FragmentManager.setFragment(AutorisationFragment.newInstance(), this)\r\n                    }\r\n                }\r\n            }\r\n            true\r\n        }\r\n    }\r\n\r\n    fun log(massage: String) {\r\n        Logcat.log(massage, \"MainActivity\", Logcat.LOG_ACTIVITY)\r\n    }\r\n\r\n    companion object {\r\n\r\n        const val NUM_QUESTION_NOT_NUL = \"num_question_not_nul\"\r\n        const val SHOP_LIST = \"shop_list\"\r\n        const val REQUEST_CODE_STORAGE_PERMISSION = 1001\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt	(date 1682580090521)
@@ -161,7 +161,7 @@
         })
 
         binding.tvName.text = ""
-        val textToShow = "${viewModel.getProfile.nickname}  \uD83E\uDD47\uD83E\uDD48️\uD83C\uDFC6\uD83C\uDF97️\uD83C\uDF83\uD83C\uDF84\uD83C\uDF81\uD83D\uDCFB\uD83C\uDFA7\uD83C\uDF9E️\uD83E\uDE99\uD83D\uDCC0\uD83D\uDCB5❤️"
+        val textToShow = "${viewModel.getProfile?.nickname ?: ""}  \uD83E\uDD47\uD83E\uDD48️\uD83C\uDFC6\uD83C\uDF97️\uD83C\uDF83\uD83C\uDF84\uD83C\uDF81\uD83D\uDCFB\uD83C\uDFA7\uD83C\uDF9E️\uD83E\uDE99\uD83D\uDCC0\uD83D\uDCB5❤️"
         showTextWithDelay(binding.tvName, textToShow, 50L)
 
         listenerDrawer()
Index: app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadedResourcesAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.dowload\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.tpov.schoolquiz.R\r\n\r\n// DownloadedResourcesAdapter.kt\r\nclass DownloadedResourcesAdapter(\r\n    private val onDeleteResource: (DownloadedResource) -> Unit\r\n) : RecyclerView.Adapter<DownloadedResourcesAdapter.DownloadedResourceViewHolder>() {\r\n\r\n    private val downloadedResourcesList = mutableListOf<DownloadedResource>()\r\n\r\n    fun submitList(list: List<DownloadedResource>) {\r\n        downloadedResourcesList.clear()\r\n        downloadedResourcesList.addAll(list)\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DownloadedResourceViewHolder {\r\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_downloaded_resource, parent, false)\r\n        return DownloadedResourceViewHolder(view, onDeleteResource)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: DownloadedResourceViewHolder, position: Int) {\r\n        holder.bind(downloadedResourcesList[position])\r\n\r\n    }\r\n\r\n    override fun getItemCount(): Int = downloadedResourcesList.size\r\n\r\n    class DownloadedResourceViewHolder(\r\n        itemView: View,\r\n        private val onDeleteResource: (DownloadedResource) -> Unit\r\n    ) : RecyclerView.ViewHolder(itemView) {\r\n        private val tvResourceName = itemView.findViewById<TextView>(R.id.tv_resource_name)\r\n        private val tvResourceSize = itemView.findViewById<TextView>(R.id.tv_resource_size)\r\n        private val btnDeleteResource = itemView.findViewById<ImageButton>(R.id.btn_delete_resource)\r\n\r\n        fun bind(downloadedResource: DownloadedResource) {\r\n            tvResourceName.text = downloadedResource.fileName\r\n            tvResourceSize.text = \"${downloadedResource.fileSize} КБ\"\r\n            btnDeleteResource.setOnClickListener {\r\n                onDeleteResource(downloadedResource)\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadedResourcesAdapter.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadedResourcesAdapter.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadedResourcesAdapter.kt	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadedResourcesAdapter.kt	(date 1682579586552)
@@ -39,14 +39,16 @@
     ) : RecyclerView.ViewHolder(itemView) {
         private val tvResourceName = itemView.findViewById<TextView>(R.id.tv_resource_name)
         private val tvResourceSize = itemView.findViewById<TextView>(R.id.tv_resource_size)
+        private val tvResourceImageSize = itemView.findViewById<TextView>(R.id.tv_resource_size)
         private val btnDeleteResource = itemView.findViewById<ImageButton>(R.id.btn_delete_resource)
 
         fun bind(downloadedResource: DownloadedResource) {
             tvResourceName.text = downloadedResource.fileName
-            tvResourceSize.text = "${downloadedResource.fileSize} КБ"
+            tvResourceSize.text = "${downloadedResource.fileSize / 1024} КБ"
+            tvResourceImageSize.text = downloadedResource.imageSize
             btnDeleteResource.setOnClickListener {
                 onDeleteResource(downloadedResource)
             }
         }
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.dialog\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.LinearLayout\r\nimport android.widget.RadioButton\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.material.textfield.TextInputEditText\r\nimport com.google.mlkit.common.model.DownloadConditions\r\nimport com.google.mlkit.nl.languageid.LanguageIdentification\r\nimport com.google.mlkit.nl.languageid.LanguageIdentifier\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.databinding.CreateQuestionDialogBinding\r\nimport com.tpov.schoolquiz.presentation.mainactivity.MainActivityViewModel\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport java.util.*\r\n\r\n\r\nclass CreateQuestionDialog() : DialogFragment() {\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private val mainActivityViewModel by lazy {\r\n        ViewModelProvider(requireActivity())[MainActivityViewModel::class.java]\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    @RequiresApi(Build.VERSION_CODES.Q)\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder = AlertDialog.Builder(activity)\r\n        val binding = CreateQuestionDialogBinding.inflate(LayoutInflater.from(activity))\r\n        var question = ArrayList<QuestionEntity>()\r\n        val sharedPref = context?.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0)\r\n        var nameQuestion = \"\"\r\n        var intvQuestion2 = TextInputEditText(requireContext())\r\n        var questionLayout2 = LinearLayout(context)\r\n        var tvQuestion2 = TextView(context)\r\n        var sumbolQuestion2 = TextView(context)\r\n\r\n        val languageIdentifier = LanguageIdentification.getClient()\r\n        val conditions = DownloadConditions.Builder()\r\n            .requireWifi()\r\n            .build()\r\n\r\n        builder.setView(binding.root)\r\n\r\n        var numQuestion = 0\r\n        var nameQuiz = \"\"\r\n\r\n\r\n        binding.tvNext.setOnClickListener {\r\n\r\n            tvQuestion2.text =\r\n                \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n            tvQuestion2 = TextView(context)\r\n\r\n            intvQuestion2.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(\r\n                    s: CharSequence?,\r\n                    start: Int,\r\n                    count: Int,\r\n                    after: Int\r\n                ) {\r\n                }\r\n\r\n                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                    nameQuestion = \"\"\r\n                    nameQuestion = s.toString()\r\n                    tvQuestion2.text =\r\n                        \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n                }\r\n\r\n                override fun afterTextChanged(s: Editable?) {}\r\n            })\r\n            if (numQuestion != 0) {\r\n                getLanguage(languageIdentifier, nameQuestion) { lang ->\r\n                    question.add(\r\n                        QuestionEntity(\r\n                            null,\r\n                            numQuestion - 1,\r\n                            nameQuestion,\r\n                            getTextTrue(binding.rbTrue).toBoolean(),\r\n                            getTypeText(binding.rbLightQuestion).toBoolean(),\r\n                            -1,\r\n                            lang,\r\n                            mainActivityViewModel.getProfileFBLiveData.value?.translater ?: -1\r\n                        )\r\n                    )\r\n                }\r\n\r\n            } else {\r\n                nameQuiz = binding.intvQuiz.text.toString()\r\n            }\r\n\r\n            Log.d(\"adasfgdrh\", \"===question ${question}\")\r\n            // Создание нового question_layout\r\n\r\n\r\n            questionLayout2.id = View.generateViewId()\r\n            questionLayout2.orientation = LinearLayout.HORIZONTAL\r\n\r\n            tvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(500, LinearLayout.LayoutParams.WRAP_CONTENT)\r\n            questionLayout2.addView(tvQuestion2)\r\n\r\n            // Добавление TextView для символа\r\n            sumbolQuestion2.layoutParams = LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT\r\n            )\r\n            sumbolQuestion2.text = \" -$ \"\r\n            questionLayout2.addView(sumbolQuestion2)\r\n            questionLayout2.background = null\r\n            // Добавление TextInputEditText для ввода текста вопроса\r\n            intvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 2F)\r\n            intvQuestion2.hint = \"your question\"\r\n            intvQuestion2.requestFocus()\r\n            val cursorDrawable = ContextCompat.getDrawable(requireContext(), R.drawable.cursor)\r\n            intvQuestion2.textCursorDrawable = cursorDrawable\r\n            questionLayout2.addView(intvQuestion2)\r\n\r\n            sumbolQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            tvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            intvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n\r\n            tvQuestion2.maxLines = 1\r\n            intvQuestion2.background = null\r\n\r\n            intvQuestion2.width = 30\r\n            // Добавление нового question_layout в layout\r\n            binding.layout.addView(questionLayout2)\r\n            questionLayout2 = LinearLayout(context)\r\n            sumbolQuestion2 = TextView(context)\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n\r\n            binding.rbTrue.setOnCheckedChangeListener { _, _ ->\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n\r\n            }\r\n\r\n            binding.rbLightQuestion.setOnCheckedChangeListener { _, _ ->\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n\r\n            numQuestion++\r\n        }\r\n\r\n        binding.tvEnd.setOnClickListener {\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n            tvQuestion2 = TextView(context)\r\n            intvQuestion2.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(\r\n                    s: CharSequence?,\r\n                    start: Int,\r\n                    count: Int,\r\n                    after: Int\r\n                ) {\r\n                    // вызывается перед изменением текста в поле\r\n                }\r\n\r\n                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                    nameQuestion = \"\"\r\n                    nameQuestion = s.toString()\r\n                    Log.d(\"adasfgdrh\", \"Текст изменился: $s\")\r\n                }\r\n\r\n                override fun afterTextChanged(s: Editable?) {\r\n                    // вызывается после изменения текста в поле\r\n                }\r\n            })\r\n\r\n            if (numQuestion != 0) {\r\n                getLanguage(languageIdentifier, nameQuestion) { lang ->\r\n\r\n                    question.add(\r\n                        QuestionEntity(\r\n                            null,\r\n                            numQuestion,\r\n                            nameQuestion,\r\n                            getTextTrue(binding.rbTrue).toBoolean(),\r\n                            getTypeText(binding.rbLightQuestion).toBoolean(),\r\n                            -1,\r\n                            lang,\r\n                            mainActivityViewModel.getProfile.translater\r\n                        )\r\n                    )\r\n                }\r\n            } else {\r\n                nameQuiz = binding.intvQuiz.text.toString()\r\n            }\r\n\r\n            Log.d(\"adasfgdrh\", \"===question $question\")\r\n            // Создание нового question_layout\r\n\r\n\r\n            questionLayout2.id = View.generateViewId()\r\n            questionLayout2.orientation = LinearLayout.HORIZONTAL\r\n\r\n            tvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(500, LinearLayout.LayoutParams.WRAP_CONTENT)\r\n            tvQuestion2.text =\r\n                \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|${++numQuestion}\"\r\n\r\n            binding.rbLightQuestion.setOnCheckedChangeListener { _, _ ->\r\n                // Установка значения tvQuestion2 в зависимости от состояния кнопок\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n\r\n            binding.rbTrue.setOnCheckedChangeListener { _, _ ->\r\n                // Установка значения tvQuestion2 в зависимости от состояния кнопок\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n            questionLayout2.addView(tvQuestion2)\r\n\r\n            // Добавление TextView для символа\r\n            sumbolQuestion2.layoutParams = LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT\r\n            )\r\n            sumbolQuestion2.text = \" -$ \"\r\n            questionLayout2.addView(sumbolQuestion2)\r\n            questionLayout2.background = null\r\n            // Добавление TextInputEditText для ввода текста вопроса\r\n            intvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 2F)\r\n            intvQuestion2.hint = \"your question\"\r\n            intvQuestion2.requestFocus()\r\n            val cursorDrawable = ContextCompat.getDrawable(requireContext(), R.drawable.cursor)\r\n            intvQuestion2.textCursorDrawable = cursorDrawable\r\n            questionLayout2.addView(intvQuestion2)\r\n\r\n            sumbolQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            tvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            intvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n\r\n            tvQuestion2.maxLines = 1\r\n            intvQuestion2.background = null\r\n\r\n            intvQuestion2.width = 30\r\n\r\n            // Добавление нового question_layout в layout\r\n            binding.layout.addView(questionLayout2)\r\n            questionLayout2 = LinearLayout(context)\r\n            tvQuestion2 = TextView(context)\r\n            sumbolQuestion2 = TextView(context)\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n                mainActivityViewModel.insertQuiz(\r\n                    QuizEntity(\r\n                        null,\r\n                        nameQuiz,\r\n                        mainActivityViewModel.getProfile.name,\r\n                        TimeManager.getCurrentTime(),\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        null,\r\n                        1,\r\n                        0,\r\n                        0,\r\n                        false,\r\n                        tpovId ?: 0\r\n                    )\r\n                )\r\n\r\n                question.forEach {\r\n                    mainActivityViewModel.insertQuestion(\r\n                        it.copy(\r\n                            idQuiz = mainActivityViewModel.getIdQuizByNameQuiz(\r\n                                nameQuiz\r\n                            )\r\n                        )\r\n                    )\r\n            }\r\n        }\r\n\r\n        return builder.create()\r\n    }\r\n\r\n    private fun getLanguage(\r\n        languageIdentifier: LanguageIdentifier,\r\n        nameQuestion: String,\r\n        callback: (String) -> Unit\r\n    ) {\r\n        var lang = \"\"\r\n\r\n        languageIdentifier.identifyLanguage(nameQuestion)\r\n            .addOnSuccessListener { language ->\r\n                lang = language ?: \"und\"\r\n                if (lang == \"und\") {\r\n                    val userLocale: Locale = Locale.getDefault()\r\n                    val userLanguageCode: String = userLocale.language\r\n                    lang = userLanguageCode\r\n                }\r\n                callback(lang)\r\n            }\r\n            .addOnFailureListener {\r\n                val userLocale: Locale = Locale.getDefault()\r\n                val userLanguageCode: String = userLocale.language\r\n                lang = userLanguageCode\r\n                callback(lang)\r\n            }\r\n    }\r\n\r\n    private fun getTextTrue(rbTrue: RadioButton): String {\r\n        return if (rbTrue.isChecked) \"true\"\r\n        else \"false\"\r\n    }\r\n\r\n    private fun getTypeText(rbLightQuestion: RadioButton): String {\r\n        return if (rbLightQuestion.isChecked) \"false\"\r\n        else \"true\"\r\n    }\r\n\r\n    companion object {\r\n        const val NAME = \"name\"\r\n\r\n        fun newInstance(name: String): CreateQuestionDialog {\r\n            val fragment = CreateQuestionDialog()\r\n            val args = Bundle()\r\n            args.putString(\"name\", name)\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt	(date 1682580184045)
@@ -268,7 +268,7 @@
                     QuizEntity(
                         null,
                         nameQuiz,
-                        mainActivityViewModel.getProfile.name,
+                        mainActivityViewModel.getProfile.name ?: "",
                         TimeManager.getCurrentTime(),
                         0,
                         0,
Index: app/src/main/java/com/tpov/schoolquiz/data/database/entities/ProfileEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data.database.entities\r\n\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\n\r\n@Entity(tableName = \"profiles\")\r\ndata class ProfileEntity(\r\n    @PrimaryKey\r\n    val id: Int?,\r\n    val tpovId: Int,\r\n    val login: String,\r\n    val name: String,\r\n    val nickname: String,\r\n    val birthday: String,\r\n    val datePremium: String,\r\n    val trophy: String,\r\n    val friends: String,\r\n    val city: String,\r\n    val logo: Int,\r\n    val timeInGamesAllTime: Int,\r\n    val timeInGamesInQuiz: Int,\r\n    val timeInGamesInChat: Int,\r\n    val timeInGamesSmsPoints: Int,\r\n    val pointsGold: Int,\r\n    val pointsSkill: Int,\r\n    val pointsSkillInSeason: Int,\r\n    val pointsNolics: Int,\r\n    val buyHeart: Int,\r\n    val buyGoldHeart: Int,\r\n    val buyQuizPlace: Int,\r\n    val buyTheme: String,\r\n    val buyMusic: String,\r\n    val buyLogo: String,\r\n    val addPointsGold: Int,\r\n    val addPointsSkill: Int,\r\n    val addPointsSkillInSeason: Int,\r\n    val addPointsNolics: Int,\r\n    val addTrophy: String,\r\n\r\n    val dataCreateAcc: String,\r\n    val dateSynch: String,\r\n    val idFirebase: String,\r\n    val languages: String,\r\n\r\n    val gamer: Int,\r\n    val sponsor: Int,\r\n    val tester: Int,\r\n    val translater: Int,\r\n    val moderator: Int,\r\n    val admin: Int,\r\n    val developer: Int\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ProfileEntity.kt b/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ProfileEntity.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ProfileEntity.kt	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ProfileEntity.kt	(date 1682580090844)
@@ -9,7 +9,7 @@
     val id: Int?,
     val tpovId: Int,
     val login: String,
-    val name: String,
+    val name: String?,
     val nickname: String,
     val birthday: String,
     val datePremium: String,
Index: .idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ /dev/null	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
@@ -1,34 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1" date="1681885256406" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19.04.2023 9:20 [Changes]" />
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/fileHashes/fileHashes.lock" />
-    <option name="AFTER_PATH" value=".gradle/7.6/fileHashes/fileHashes.lock" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/fileHashes.lock" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/fileHashes/fileHashes.bin" />
-    <option name="AFTER_PATH" value=".gradle/7.6/fileHashes/fileHashes.bin" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/fileHashes.bin" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/buildOutputCleanup/buildOutputCleanup.lock" />
-    <option name="AFTER_PATH" value=".gradle/buildOutputCleanup/buildOutputCleanup.lock" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/buildOutputCleanup.lock" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/executionHistory/executionHistory.bin" />
-    <option name="AFTER_PATH" value=".gradle/7.6/executionHistory/executionHistory.bin" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/executionHistory.bin" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/executionHistory/executionHistory.lock" />
-    <option name="AFTER_PATH" value=".gradle/7.6/executionHistory/executionHistory.lock" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/executionHistory.lock" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/fileHashes/resourceHashesCache.bin" />
-    <option name="AFTER_PATH" value=".gradle/7.6/fileHashes/resourceHashesCache.bin" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/resourceHashesCache.bin" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: app/schemas/com.tpov.schoolquiz.data.database.QuizDatabase/1.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"formatVersion\": 1,\r\n  \"database\": {\r\n    \"version\": 1,\r\n    \"identityHash\": \"04eabf808ccbc001862c0d6b1d5c0fb7\",\r\n    \"entities\": [\r\n      {\r\n        \"tableName\": \"table_data\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `idQuiz` INTEGER NOT NULL, `data` TEXT NOT NULL, `codeAnswer` TEXT, `hardQuiz` INTEGER NOT NULL, `synthFB` INTEGER NOT NULL)\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"id\",\r\n            \"columnName\": \"id\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"idQuiz\",\r\n            \"columnName\": \"idQuiz\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"data\",\r\n            \"columnName\": \"data\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"codeAnswer\",\r\n            \"columnName\": \"codeAnswer\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"hardQuiz\",\r\n            \"columnName\": \"hardQuiz\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"synthFB\",\r\n            \"columnName\": \"synthFB\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"columnNames\": [\r\n            \"id\"\r\n          ],\r\n          \"autoGenerate\": true\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      },\r\n      {\r\n        \"tableName\": \"table_players\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER, `gamer` INTEGER NOT NULL, `sponsor` INTEGER NOT NULL, `tester` INTEGER NOT NULL, `translater` INTEGER NOT NULL, `moderator` INTEGER NOT NULL, `admin` INTEGER NOT NULL, `developer` INTEGER NOT NULL, `timeInGamesAllTime` INTEGER NOT NULL, `timeInGamesInQuiz` INTEGER NOT NULL, `timeInGamesInChat` INTEGER NOT NULL, `timeInGamesSmsPoints` INTEGER NOT NULL, `ratingPlayer` INTEGER NOT NULL, `ratingAnswer` INTEGER NOT NULL, `ratingQuiz` INTEGER NOT NULL, `skill` INTEGER NOT NULL, PRIMARY KEY(`id`))\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"id\",\r\n            \"columnName\": \"id\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"gamer\",\r\n            \"columnName\": \"gamer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"sponsor\",\r\n            \"columnName\": \"sponsor\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"tester\",\r\n            \"columnName\": \"tester\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"translater\",\r\n            \"columnName\": \"translater\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"moderator\",\r\n            \"columnName\": \"moderator\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"admin\",\r\n            \"columnName\": \"admin\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"developer\",\r\n            \"columnName\": \"developer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"timeInGamesAllTime\",\r\n            \"columnName\": \"timeInGamesAllTime\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"timeInGamesInQuiz\",\r\n            \"columnName\": \"timeInGamesInQuiz\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"timeInGamesInChat\",\r\n            \"columnName\": \"timeInGamesInChat\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"timeInGamesSmsPoints\",\r\n            \"columnName\": \"timeInGamesSmsPoints\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"ratingPlayer\",\r\n            \"columnName\": \"ratingPlayer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"ratingAnswer\",\r\n            \"columnName\": \"ratingAnswer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"ratingQuiz\",\r\n            \"columnName\": \"ratingQuiz\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"skill\",\r\n            \"columnName\": \"skill\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"columnNames\": [\r\n            \"id\"\r\n          ],\r\n          \"autoGenerate\": false\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      },\r\n      {\r\n        \"tableName\": \"new_user_table\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `numQuestion` INTEGER NOT NULL, `nameQuestion` TEXT NOT NULL, `answerQuestion` INTEGER NOT NULL, `hardQuestion` INTEGER NOT NULL, `idQuiz` INTEGER NOT NULL, `language` TEXT NOT NULL, `lvlTranslate` INTEGER NOT NULL)\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"id\",\r\n            \"columnName\": \"id\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"numQuestion\",\r\n            \"columnName\": \"numQuestion\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"nameQuestion\",\r\n            \"columnName\": \"nameQuestion\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"answerQuestion\",\r\n            \"columnName\": \"answerQuestion\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"hardQuestion\",\r\n            \"columnName\": \"hardQuestion\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"idQuiz\",\r\n            \"columnName\": \"idQuiz\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"language\",\r\n            \"columnName\": \"language\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"lvlTranslate\",\r\n            \"columnName\": \"lvlTranslate\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"columnNames\": [\r\n            \"id\"\r\n          ],\r\n          \"autoGenerate\": true\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      },\r\n      {\r\n        \"tableName\": \"front_list\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `nameQuiz` TEXT NOT NULL, `user_name` TEXT NOT NULL, `data` TEXT NOT NULL, `stars` INTEGER NOT NULL, `starsPlayer` INTEGER NOT NULL, `numQ` INTEGER NOT NULL, `numHQ` INTEGER NOT NULL, `starsAll` INTEGER NOT NULL, `starsAllPlayer` INTEGER NOT NULL, `versionQuiz` INTEGER NOT NULL, `picture` TEXT, `event` INTEGER NOT NULL, `rating` INTEGER NOT NULL, `ratingPlayer` INTEGER NOT NULL, `showDeleteButton` INTEGER NOT NULL, `tpovId` INTEGER NOT NULL)\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"id\",\r\n            \"columnName\": \"id\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"nameQuiz\",\r\n            \"columnName\": \"nameQuiz\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"userName\",\r\n            \"columnName\": \"user_name\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"data\",\r\n            \"columnName\": \"data\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"stars\",\r\n            \"columnName\": \"stars\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"starsPlayer\",\r\n            \"columnName\": \"starsPlayer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"numQ\",\r\n            \"columnName\": \"numQ\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"numHQ\",\r\n            \"columnName\": \"numHQ\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"starsAll\",\r\n            \"columnName\": \"starsAll\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"starsAllPlayer\",\r\n            \"columnName\": \"starsAllPlayer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"versionQuiz\",\r\n            \"columnName\": \"versionQuiz\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"picture\",\r\n            \"columnName\": \"picture\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"event\",\r\n            \"columnName\": \"event\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"rating\",\r\n            \"columnName\": \"rating\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"ratingPlayer\",\r\n            \"columnName\": \"ratingPlayer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"showDeleteButton\",\r\n            \"columnName\": \"showDeleteButton\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"tpovId\",\r\n            \"columnName\": \"tpovId\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"columnNames\": [\r\n            \"id\"\r\n          ],\r\n          \"autoGenerate\": true\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      },\r\n      {\r\n        \"tableName\": \"table_generate_question\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `date` TEXT NOT NULL, `question` TEXT NOT NULL, `answer` TEXT NOT NULL, `questionTranslate` TEXT NOT NULL, `answerTranslate` TEXT NOT NULL)\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"id\",\r\n            \"columnName\": \"id\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"date\",\r\n            \"columnName\": \"date\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"question\",\r\n            \"columnName\": \"question\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"answer\",\r\n            \"columnName\": \"answer\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"questionTranslate\",\r\n            \"columnName\": \"questionTranslate\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"answerTranslate\",\r\n            \"columnName\": \"answerTranslate\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"columnNames\": [\r\n            \"id\"\r\n          ],\r\n          \"autoGenerate\": true\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      },\r\n      {\r\n        \"tableName\": \"profiles\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER, `tpovId` INTEGER NOT NULL, `login` TEXT NOT NULL, `name` TEXT NOT NULL, `nickname` TEXT NOT NULL, `birthday` TEXT NOT NULL, `datePremium` TEXT NOT NULL, `trophy` TEXT NOT NULL, `friends` TEXT NOT NULL, `city` TEXT NOT NULL, `logo` INTEGER NOT NULL, `timeInGamesAllTime` INTEGER NOT NULL, `timeInGamesInQuiz` INTEGER NOT NULL, `timeInGamesInChat` INTEGER NOT NULL, `timeInGamesSmsPoints` INTEGER NOT NULL, `pointsGold` INTEGER NOT NULL, `pointsSkill` INTEGER NOT NULL, `pointsSkillInSeason` INTEGER NOT NULL, `pointsNolics` INTEGER NOT NULL, `buyHeart` INTEGER NOT NULL, `buyGoldHeart` INTEGER NOT NULL, `buyQuizPlace` INTEGER NOT NULL, `buyTheme` TEXT NOT NULL, `buyMusic` TEXT NOT NULL, `buyLogo` TEXT NOT NULL, `addPointsGold` INTEGER NOT NULL, `addPointsSkill` INTEGER NOT NULL, `addPointsSkillInSeason` INTEGER NOT NULL, `addPointsNolics` INTEGER NOT NULL, `addTrophy` TEXT NOT NULL, `dataCreateAcc` TEXT NOT NULL, `dateSynch` TEXT NOT NULL, `idFirebase` TEXT NOT NULL, `languages` TEXT NOT NULL, `gamer` INTEGER NOT NULL, `sponsor` INTEGER NOT NULL, `tester` INTEGER NOT NULL, `translater` INTEGER NOT NULL, `moderator` INTEGER NOT NULL, `admin` INTEGER NOT NULL, `developer` INTEGER NOT NULL, PRIMARY KEY(`id`))\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"id\",\r\n            \"columnName\": \"id\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"tpovId\",\r\n            \"columnName\": \"tpovId\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"login\",\r\n            \"columnName\": \"login\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"name\",\r\n            \"columnName\": \"name\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"nickname\",\r\n            \"columnName\": \"nickname\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"birthday\",\r\n            \"columnName\": \"birthday\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"datePremium\",\r\n            \"columnName\": \"datePremium\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"trophy\",\r\n            \"columnName\": \"trophy\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"friends\",\r\n            \"columnName\": \"friends\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"city\",\r\n            \"columnName\": \"city\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"logo\",\r\n            \"columnName\": \"logo\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"timeInGamesAllTime\",\r\n            \"columnName\": \"timeInGamesAllTime\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"timeInGamesInQuiz\",\r\n            \"columnName\": \"timeInGamesInQuiz\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"timeInGamesInChat\",\r\n            \"columnName\": \"timeInGamesInChat\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"timeInGamesSmsPoints\",\r\n            \"columnName\": \"timeInGamesSmsPoints\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"pointsGold\",\r\n            \"columnName\": \"pointsGold\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"pointsSkill\",\r\n            \"columnName\": \"pointsSkill\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"pointsSkillInSeason\",\r\n            \"columnName\": \"pointsSkillInSeason\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"pointsNolics\",\r\n            \"columnName\": \"pointsNolics\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"buyHeart\",\r\n            \"columnName\": \"buyHeart\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"buyGoldHeart\",\r\n            \"columnName\": \"buyGoldHeart\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"buyQuizPlace\",\r\n            \"columnName\": \"buyQuizPlace\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"buyTheme\",\r\n            \"columnName\": \"buyTheme\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"buyMusic\",\r\n            \"columnName\": \"buyMusic\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"buyLogo\",\r\n            \"columnName\": \"buyLogo\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"addPointsGold\",\r\n            \"columnName\": \"addPointsGold\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"addPointsSkill\",\r\n            \"columnName\": \"addPointsSkill\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"addPointsSkillInSeason\",\r\n            \"columnName\": \"addPointsSkillInSeason\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"addPointsNolics\",\r\n            \"columnName\": \"addPointsNolics\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"addTrophy\",\r\n            \"columnName\": \"addTrophy\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"dataCreateAcc\",\r\n            \"columnName\": \"dataCreateAcc\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"dateSynch\",\r\n            \"columnName\": \"dateSynch\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"idFirebase\",\r\n            \"columnName\": \"idFirebase\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"languages\",\r\n            \"columnName\": \"languages\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"gamer\",\r\n            \"columnName\": \"gamer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"sponsor\",\r\n            \"columnName\": \"sponsor\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"tester\",\r\n            \"columnName\": \"tester\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"translater\",\r\n            \"columnName\": \"translater\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"moderator\",\r\n            \"columnName\": \"moderator\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"admin\",\r\n            \"columnName\": \"admin\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"developer\",\r\n            \"columnName\": \"developer\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"columnNames\": [\r\n            \"id\"\r\n          ],\r\n          \"autoGenerate\": false\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      },\r\n      {\r\n        \"tableName\": \"chat_data\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `time` TEXT NOT NULL, `user` TEXT NOT NULL, `msg` TEXT NOT NULL, `importance` INTEGER NOT NULL, `personalSms` INTEGER NOT NULL, `icon` TEXT NOT NULL, `rating` INTEGER NOT NULL)\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"id\",\r\n            \"columnName\": \"id\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": false\r\n          },\r\n          {\r\n            \"fieldPath\": \"time\",\r\n            \"columnName\": \"time\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"user\",\r\n            \"columnName\": \"user\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"msg\",\r\n            \"columnName\": \"msg\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"importance\",\r\n            \"columnName\": \"importance\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"personalSms\",\r\n            \"columnName\": \"personalSms\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"icon\",\r\n            \"columnName\": \"icon\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"rating\",\r\n            \"columnName\": \"rating\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"columnNames\": [\r\n            \"id\"\r\n          ],\r\n          \"autoGenerate\": true\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      }\r\n    ],\r\n    \"views\": [],\r\n    \"setupQueries\": [\r\n      \"CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)\",\r\n      \"INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '04eabf808ccbc001862c0d6b1d5c0fb7')\"\r\n    ]\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/schemas/com.tpov.schoolquiz.data.database.QuizDatabase/1.json b/app/schemas/com.tpov.schoolquiz.data.database.QuizDatabase/1.json
--- a/app/schemas/com.tpov.schoolquiz.data.database.QuizDatabase/1.json	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/app/schemas/com.tpov.schoolquiz.data.database.QuizDatabase/1.json	(date 1682580107984)
@@ -2,7 +2,7 @@
   "formatVersion": 1,
   "database": {
     "version": 1,
-    "identityHash": "04eabf808ccbc001862c0d6b1d5c0fb7",
+    "identityHash": "3ddcda660c52e299516ed2ba8fb66791",
     "entities": [
       {
         "tableName": "table_data",
@@ -394,7 +394,7 @@
       },
       {
         "tableName": "profiles",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER, `tpovId` INTEGER NOT NULL, `login` TEXT NOT NULL, `name` TEXT NOT NULL, `nickname` TEXT NOT NULL, `birthday` TEXT NOT NULL, `datePremium` TEXT NOT NULL, `trophy` TEXT NOT NULL, `friends` TEXT NOT NULL, `city` TEXT NOT NULL, `logo` INTEGER NOT NULL, `timeInGamesAllTime` INTEGER NOT NULL, `timeInGamesInQuiz` INTEGER NOT NULL, `timeInGamesInChat` INTEGER NOT NULL, `timeInGamesSmsPoints` INTEGER NOT NULL, `pointsGold` INTEGER NOT NULL, `pointsSkill` INTEGER NOT NULL, `pointsSkillInSeason` INTEGER NOT NULL, `pointsNolics` INTEGER NOT NULL, `buyHeart` INTEGER NOT NULL, `buyGoldHeart` INTEGER NOT NULL, `buyQuizPlace` INTEGER NOT NULL, `buyTheme` TEXT NOT NULL, `buyMusic` TEXT NOT NULL, `buyLogo` TEXT NOT NULL, `addPointsGold` INTEGER NOT NULL, `addPointsSkill` INTEGER NOT NULL, `addPointsSkillInSeason` INTEGER NOT NULL, `addPointsNolics` INTEGER NOT NULL, `addTrophy` TEXT NOT NULL, `dataCreateAcc` TEXT NOT NULL, `dateSynch` TEXT NOT NULL, `idFirebase` TEXT NOT NULL, `languages` TEXT NOT NULL, `gamer` INTEGER NOT NULL, `sponsor` INTEGER NOT NULL, `tester` INTEGER NOT NULL, `translater` INTEGER NOT NULL, `moderator` INTEGER NOT NULL, `admin` INTEGER NOT NULL, `developer` INTEGER NOT NULL, PRIMARY KEY(`id`))",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER, `tpovId` INTEGER NOT NULL, `login` TEXT NOT NULL, `name` TEXT, `nickname` TEXT NOT NULL, `birthday` TEXT NOT NULL, `datePremium` TEXT NOT NULL, `trophy` TEXT NOT NULL, `friends` TEXT NOT NULL, `city` TEXT NOT NULL, `logo` INTEGER NOT NULL, `timeInGamesAllTime` INTEGER NOT NULL, `timeInGamesInQuiz` INTEGER NOT NULL, `timeInGamesInChat` INTEGER NOT NULL, `timeInGamesSmsPoints` INTEGER NOT NULL, `pointsGold` INTEGER NOT NULL, `pointsSkill` INTEGER NOT NULL, `pointsSkillInSeason` INTEGER NOT NULL, `pointsNolics` INTEGER NOT NULL, `buyHeart` INTEGER NOT NULL, `buyGoldHeart` INTEGER NOT NULL, `buyQuizPlace` INTEGER NOT NULL, `buyTheme` TEXT NOT NULL, `buyMusic` TEXT NOT NULL, `buyLogo` TEXT NOT NULL, `addPointsGold` INTEGER NOT NULL, `addPointsSkill` INTEGER NOT NULL, `addPointsSkillInSeason` INTEGER NOT NULL, `addPointsNolics` INTEGER NOT NULL, `addTrophy` TEXT NOT NULL, `dataCreateAcc` TEXT NOT NULL, `dateSynch` TEXT NOT NULL, `idFirebase` TEXT NOT NULL, `languages` TEXT NOT NULL, `gamer` INTEGER NOT NULL, `sponsor` INTEGER NOT NULL, `tester` INTEGER NOT NULL, `translater` INTEGER NOT NULL, `moderator` INTEGER NOT NULL, `admin` INTEGER NOT NULL, `developer` INTEGER NOT NULL, PRIMARY KEY(`id`))",
         "fields": [
           {
             "fieldPath": "id",
@@ -418,7 +418,7 @@
             "fieldPath": "name",
             "columnName": "name",
             "affinity": "TEXT",
-            "notNull": true
+            "notNull": false
           },
           {
             "fieldPath": "nickname",
@@ -718,7 +718,7 @@
     "views": [],
     "setupQueries": [
       "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
-      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '04eabf808ccbc001862c0d6b1d5c0fb7')"
+      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '3ddcda660c52e299516ed2ba8fb66791')"
     ]
   }
 }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AndroidLayouts\">\r\n    <shared>\r\n      <config>\r\n        <device id=\"_device_class_phone\" />\r\n        <device id=\"_device_class_foldable\" />\r\n        <device id=\"_device_class_desktop\" />\r\n        <locale>uk</locale>\r\n        <target>android-33-ext4</target>\r\n      </config>\r\n    </shared>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5af0db75-4be5-4ef3-8f7e-967bab06300d\" name=\"Changes\" comment=\"Add colum db (all ratinf, starsPlayer)\">\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/file-system.probe\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/file-system.probe\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/compiler.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/compiler.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_17_04_2023_9_13_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_17_04_2023_9_13__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityAdapter.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityAdapter.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/res/layout/activity_main_item.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/res/layout/activity_main_item.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/local.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/local.properties\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[RD00802QA10E03592]\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Kotlin Object\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"layoutResourceFile\" />\r\n        <option value=\"valueResourceFile\" />\r\n        <option value=\"resourceFile\" />\r\n        <option value=\"Kotlin Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"GenerateSignedApkSettings\">\r\n    <option name=\"BUILD_TARGET_KEY\" value=\"apk\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"82b940d6209b5a50e1195a052700e8b42ea2da15\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"GithubProjectSettings\">\r\n    <option name=\"branchProtectionPatterns\">\r\n      <list>\r\n        <option value=\"master\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MdM8qyqboV1nJrQXz70kLiA3XM\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"PROJECT_TRUSTED_KEY\": \"true\",\r\n    \"com.google.services.firebase.aqiPopupShown\": \"true\",\r\n    \"project.structure.last.edited\": \"SDK Location\",\r\n    \"project.structure.proportion\": \"0.17\",\r\n    \"project.structure.side.proportion\": \"0.0\"\r\n  }\r\n}]]></component>\r\n  <component name=\"PsdUISettings\">\r\n    <option name=\"MODULE_TAB\" value=\"Properties\" />\r\n    <option name=\"LAST_EDITED_BUILD_TYPE\" value=\"release\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\java\\com\\tpov\\schoolquiz\\domain\" />\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\res\\drawable-hdpi\" />\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\res\\drawable-xxhdpi\" />\r\n      <recent name=\"F:\\Developer\\Programmer\\Android\\SchoolQuiz\\app\\src\\main\\res\\drawable\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\Программирование\\Android\\schoolquiz3.0\\app\\src\\main\\res\\anim\" />\r\n      <recent name=\"E:\\Программирование\\Android\\schoolquiz3.0\\app\\src\\main\\res\\drawable-xxhdpi\" />\r\n      <recent name=\"E:\\SchoolQuiz\\app\\src\\main\\java\\com\\tpov\\schoolquiz\\presentation\\network\\event\\translation\" />\r\n    </key>\r\n    <key name=\"MoveKotlinTopLevelDeclarationsDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.event\" />\r\n    </key>\r\n    <key name=\"CopyKotlinDeclarationDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tpov.schoolquiz.domain\" />\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.arena\" />\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.event\" />\r\n      <recent name=\"com.tpov.schoolquiz.data.fierbase\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" activateToolWindowBeforeRun=\"false\">\r\n      <module name=\"schoolquiz.app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"INSPECTION_WITHOUT_ACTIVITY_RESTART\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Hybrid>\r\n      <Java />\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5af0db75-4be5-4ef3-8f7e-967bab06300d\" name=\"Changes\" comment=\"\" />\r\n      <created>1678092861294</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678092861294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"build\">\r\n      <created>1680408918363</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680408918363</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"fix build\">\r\n      <created>1680435462178</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680435462178</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"fix event adapter\">\r\n      <created>1680449661463</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680449661463</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"create logcat custom\">\r\n      <created>1680493508899</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680493508899</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Refactoring repository FB&#10;fix synth data\">\r\n      <created>1680706876046</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680706876046</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"fix load quiz\">\r\n      <created>1680773588658</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680773588658</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"fix questionActivity\">\r\n      <created>1680779736038</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680779736038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Fix get question detail\">\r\n      <created>1680928726440</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680928726440</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Fix get question detail\">\r\n      <created>1680977705498</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680977705498</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"add 2event -&gt; 3event\">\r\n      <created>1681047372984</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681047372984</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"fix create question (number = 0)&#10;fix synth server\">\r\n      <created>1681051869138</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681051869138</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"create chat\">\r\n      <created>1681137571296</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681137571296</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"edit sort chat\">\r\n      <created>1681185211864</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681185211864</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"fix setEvent quiz\">\r\n      <created>1681186958854</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681186958854</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"edit autoswipe chat\">\r\n      <created>1681207294559</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681207294559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Edit registration fragment (delete to 2 path)\">\r\n      <created>1681221696668</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681221696668</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"create main list quiz and home list quiz\">\r\n      <created>1681376434409</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681376434409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"edit merge front fragment - arena fragment\">\r\n      <created>1681471483540</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681471483540</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Create setting and info\">\r\n      <created>1681725319556</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681725319556</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"fix main images\">\r\n      <created>1681982264179</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681982264179</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"fix main images\">\r\n      <created>1681982665577</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681982665577</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"fix main images (center gravity)\">\r\n      <created>1681984258945</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681984258945</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"fix main images (center gravity)\">\r\n      <created>1681984507809</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681984507809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\">\r\n      <created>1681988419524</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681988419524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\">\r\n      <created>1681996293308</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681996293308</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"26\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:io.reactivex.rxjava2:rxjava\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:com.google.protobuf:protobuf-java\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:io.grpc:grpc-api\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"fix build\" />\r\n    <MESSAGE value=\"fix event adapter\" />\r\n    <MESSAGE value=\"create logcat custom\" />\r\n    <MESSAGE value=\"Refactoring repository FB&#10;fix synth data\" />\r\n    <MESSAGE value=\"fix load quiz\" />\r\n    <MESSAGE value=\"fix questionActivity\" />\r\n    <MESSAGE value=\"fix load all questions\" />\r\n    <MESSAGE value=\"Fix numeration item in list FB\" />\r\n    <MESSAGE value=\"Fix get question detail\" />\r\n    <MESSAGE value=\"фвв 2event -&gt; 3event\" />\r\n    <MESSAGE value=\"add 2event -&gt; 3event\" />\r\n    <MESSAGE value=\"fix create question (number = 0)&#10;fix synth server\" />\r\n    <MESSAGE value=\"create chat\" />\r\n    <MESSAGE value=\"edit sort chat\" />\r\n    <MESSAGE value=\"fix setEvent quiz\" />\r\n    <MESSAGE value=\"edit autoswipe chat\" />\r\n    <MESSAGE value=\"Edit registration fragment (delete to 2 path)\" />\r\n    <MESSAGE value=\"create main list quiz and home list quiz\" />\r\n    <MESSAGE value=\"edit merge front fragment - arena fragment\" />\r\n    <MESSAGE value=\"Create setting and info\" />\r\n    <MESSAGE value=\"fix main images\" />\r\n    <MESSAGE value=\"fix main images (center gravity)\" />\r\n    <MESSAGE value=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\" />\r\n    <MESSAGE value=\"Edit MainItem (translate, checkbox)\" />\r\n    <MESSAGE value=\"Add animation mainActivity\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Add animation mainActivity\" />\r\n    <option name=\"OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/.idea/workspace.xml	(date 1682580243155)
@@ -15,33 +15,32 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5af0db75-4be5-4ef3-8f7e-967bab06300d" name="Changes" comment="Add colum db (all ratinf, starsPlayer)">
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
+    <list default="true" id="5af0db75-4be5-4ef3-8f7e-967bab06300d" name="Changes" comment="Load result question">
       <change beforePath="$PROJECT_DIR$/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/file-system.probe" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_17_04_2023_9_13_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_17_04_2023_9_13__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/buildOutputCleanup.lock" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/executionHistory.bin" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/executionHistory.lock" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/fileHashes.bin" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/fileHashes.lock" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/resourceHashesCache.bin" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/schemas/com.tpov.schoolquiz.data.database.QuizDatabase/1.json" beforeDir="false" afterPath="$PROJECT_DIR$/app/schemas/com.tpov.schoolquiz.data.database.QuizDatabase/1.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ProfileEntity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ProfileEntity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Profile.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Profile.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityAdapter.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityAdapter.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/activity_main_item.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_main_item.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/local.properties" beforeDir="false" afterPath="$PROJECT_DIR$/local.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadedResourcesAdapter.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadedResourcesAdapter.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[RD00802QA10E03592]" />
+  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[17e6bcfc]" />
   <component name="ExternalProjectsData">
     <projectState path="$PROJECT_DIR$">
       <ProjectState />
@@ -70,7 +69,6 @@
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="GitSEFilterConfiguration">
     <file-type-list>
@@ -99,15 +97,17 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "PROJECT_TRUSTED_KEY": "true",
-    "com.google.services.firebase.aqiPopupShown": "true",
-    "project.structure.last.edited": "SDK Location",
-    "project.structure.proportion": "0.17",
-    "project.structure.side.proportion": "0.0"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;PROJECT_TRUSTED_KEY&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
+    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
+    &quot;com.google.services.firebase.aqiPopupShown&quot;: &quot;true&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;SDK Location&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.17&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
   }
-}]]></component>
+}</component>
   <component name="PsdUISettings">
     <option name="MODULE_TAB" value="Properties" />
     <option name="LAST_EDITED_BUILD_TYPE" value="release" />
@@ -378,7 +378,14 @@
       <option name="project" value="LOCAL" />
       <updated>1681996293308</updated>
     </task>
-    <option name="localTasksCounter" value="26" />
+    <task id="LOCAL-00026" summary="Load result question">
+      <created>1682348194314</created>
+      <option name="number" value="00026" />
+      <option name="presentableId" value="LOCAL-00026" />
+      <option name="project" value="LOCAL" />
+      <updated>1682348194315</updated>
+    </task>
+    <option name="localTasksCounter" value="27" />
     <servers />
   </component>
   <component name="UnknownFeatures">
@@ -398,7 +405,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="fix build" />
     <MESSAGE value="fix event adapter" />
     <MESSAGE value="create logcat custom" />
     <MESSAGE value="Refactoring repository FB&#10;fix synth data" />
@@ -423,7 +429,8 @@
     <MESSAGE value="fix main images (center gravity)&#10;fix questionActivity &lt;- question8" />
     <MESSAGE value="Edit MainItem (translate, checkbox)" />
     <MESSAGE value="Add animation mainActivity" />
-    <option name="LAST_COMMIT_MESSAGE" value="Add animation mainActivity" />
+    <MESSAGE value="Load result question" />
+    <option name="LAST_COMMIT_MESSAGE" value="Load result question" />
     <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.dowload\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.tpov.schoolquiz.data.database.QuizDatabase\r\nimport com.tpov.schoolquiz.databinding.DownloadFragmentBinding\r\nimport com.tpov.schoolquiz.presentation.fragment.BaseFragment\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.launch\r\nimport java.io.File\r\n\r\nclass DownloadFragment : BaseFragment() {\r\n\r\n    private lateinit var binding: DownloadFragmentBinding\r\n    private lateinit var downloadedResourcesAdapter: DownloadedResourcesAdapter\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = DownloadFragmentBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        downloadedResourcesAdapter = DownloadedResourcesAdapter { downloadedResource ->\r\n            // Здесь добавьте код для удаления ресурса, например, удаление файла и обновление списка\r\n            // ...\r\n        }\r\n\r\n        binding.recyclerViewDownloadedResources.layoutManager = LinearLayoutManager(requireContext())\r\n        binding.recyclerViewDownloadedResources.adapter = downloadedResourcesAdapter\r\n\r\n        val downloadedResources = getDownloadedResources(requireContext())\r\n        downloadedResourcesAdapter.submitList(downloadedResources)\r\n        loadDownloadedResources()\r\n        loadDatabaseInfo()\r\n    }\r\n\r\n\r\n    private fun getDownloadedResources(context: Context): List<DownloadedResource> {\r\n        val downloadedResources = mutableListOf<DownloadedResource>()\r\n\r\n        val cacheDir = context.cacheDir\r\n        val imageDir = File(cacheDir, \"imageCache\") // Замените на название вашей директории для изображений\r\n        val musicDir = File(cacheDir, \"musicCache\") // Замените на название вашей директории для музыки\r\n\r\n        if (imageDir.exists()) {\r\n            for (file in imageDir.listFiles() ?: emptyArray()) {\r\n                val fileSizeInKb = file.length() / 1024\r\n                downloadedResources.add(DownloadedResource(file.name, fileSizeInKb, file.absolutePath))\r\n            }\r\n        }\r\n\r\n        if (musicDir.exists()) {\r\n            for (file in musicDir.listFiles() ?: emptyArray()) {\r\n                val fileSizeInKb = file.length() / 1024\r\n                downloadedResources.add(DownloadedResource(file.name, fileSizeInKb, file.absolutePath))\r\n            }\r\n        }\r\n\r\n        return downloadedResources\r\n    }\r\n\r\n    private fun loadDownloadedResources() {\r\n        lifecycleScope.launch {\r\n            val downloadedResources = getDownloadedResources(requireContext())\r\n            downloadedResourcesAdapter.submitList(downloadedResources)\r\n        }\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private fun loadDatabaseInfo() {\r\n        lifecycleScope.launch {\r\n            val quizDatabase = QuizDatabase.getDatabase(requireContext())\r\n            val quizDao = quizDatabase.getQuizDao()\r\n\r\n            val questionDetailCount = quizDao.getQuestionDetailCount()\r\n            val questionCount = quizDao.getQuestionCount()\r\n            val quizCount = quizDao.getQuizCount()\r\n            val apiQuestionCount = quizDao.getApiQuestionCount()\r\n            val profileCount = quizDao.getProfileCount()\r\n            val chatCount = quizDao.getChatCount()\r\n\r\n            val databaseInfo = \"\"\"\r\n            QuestionDetailEntity count: $questionDetailCount\r\n            QuestionEntity count: $questionCount\r\n            QuizEntity count: $quizCount\r\n            ApiQuestion count: $apiQuestionCount\r\n            ProfileEntity count: $profileCount\r\n            ChatEntity count: $chatCount\r\n        \"\"\".trimIndent()\r\n\r\n            binding.tvDatabaseInfo.text = databaseInfo\r\n        }\r\n    }\r\n}\r\n\r\ndata class DownloadedResource(\r\n    val fileName: String,\r\n    val fileSize: Long,\r\n    val filePath: String\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt	(revision 10c1349ad685ec45f7f8595dc05ab64f16eea628)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt	(date 1682579559569)
@@ -102,9 +102,8 @@
         }
     }
 }
-
 data class DownloadedResource(
     val fileName: String,
-    val fileSize: Long,
-    val filePath: String
+    val fileSize: Long, // Предполагается, что размер файла указан в байтах
+    val imageSize: String
 )
\ No newline at end of file
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/shelved.patch
deleted file mode 100644
