Index: app/src/main/java/com/tpov/schoolquiz/data/workers/RefreshDataWorker.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/workers/RefreshDataWorker.kt b/app/src/main/java/com/tpov/schoolquiz/data/workers/RefreshDataWorker.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/workers/RefreshDataWorker.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,85 +0,0 @@
-package com.tpov.geoquiz.activity.workers
-
-import android.accounts.NetworkErrorException
-import android.annotation.SuppressLint
-import android.content.Context
-import android.content.Intent
-import android.util.Log
-import androidx.localbroadcastmanager.content.LocalBroadcastManager
-import androidx.work.*
-import com.tpov.schoolquiz.data.api.ApiFactory
-import kotlinx.coroutines.InternalCoroutinesApi
-import java.util.concurrent.TimeUnit
-
-@InternalCoroutinesApi
-class RefreshDataWorker(
-    context: Context,
-    workerParameters: WorkerParameters,
-) : CoroutineWorker(context, workerParameters) {
-    private val apiService = ApiFactory.apiService
-    private lateinit var outputData: Data
-    private val localBroadcastManager by lazy {
-        LocalBroadcastManager.getInstance(context)
-    }
-    var num = 0
-
-    @SuppressLint("RestrictedApi")
-    override suspend fun doWork(): Result {
-
-        Log.d("WorkManager", "Запущен воркер.")
-        //Принимаем к-во запасных вопросов которые уже загружены
-        val questionNum = inputData.getInt(QUESTION_NUM, 8)
-        Log.d("WorkManager", "Данные в воркере: $questionNum")
-
-        var getQuestionApiArray = arrayOf("", "", "", "", "", "", "", "", "", "")
-        var getAnswerApiArray = arrayOf("", "", "", "", "", "", "", "", "", "")
-
-        try {
-            //Дозагружаем вопросов столько, сколько нужно что-бы было 10шт
-            for (i in questionNum..9) {
-
-                val apiList = apiService.getFullPriceList(CATEGORY_QUESTION)[0]
-                getQuestionApiArray[i] = apiList.getQuestion()!!
-                getAnswerApiArray[i] = apiList.getAnswer()!!
-                Log.d("WorkManager", "Загружен вопрос: $i, ${getQuestionApiArray[i]}")
-
-                val intent = Intent("loaded").apply {
-                    putExtra("percent", ((i + 1) * 10)) //Подсчет процента загрузки
-                }
-                num++
-                localBroadcastManager.sendBroadcast(intent)
-            }
-        } catch (e: Exception) {
-            Result.success()
-        }
-
-        outputData = Data.Builder()
-            .putStringArray(QUESTION, getQuestionApiArray)
-            .putStringArray(ANSWER, getAnswerApiArray)
-            .build()
-
-        Log.d("WorkManager", "Воркер завершен, входные данные-  $questionNum")
-        return Result.success(outputData)
-    }
-
-    override fun toString(): String {
-        return String.format("Загруженно вопросов: %s", num)
-
-    }
-
-    companion object {
-        const val NAME = "RetrofitDataWorker"
-        const val QUESTION_NUM = "question_num"
-        const val QUESTION = "question"
-        const val ANSWER = "answer"
-        const val CATEGORY_QUESTION = "1"
-
-        @SuppressLint("RestrictedApi")
-        fun makeRequest(numQuestionNotData: Int): OneTimeWorkRequest {
-            return OneTimeWorkRequestBuilder<RefreshDataWorker>().apply {
-                setInputData(workDataOf(QUESTION_NUM to numQuestionNotData))
-                Log.d("WorkManager", "Воркер получил данные $numQuestionNotData")
-            }.build()
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/data/billing/BillingManager.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/billing/BillingManager.kt b/app/src/main/java/com/tpov/schoolquiz/data/billing/BillingManager.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/billing/BillingManager.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,96 +0,0 @@
-/*
-package com.tpov.shoppinglist.billing
-
-import android.content.Context
-import android.widget.Toast
-import androidx.appcompat.app.AppCompatActivity
-import androidx.core.content.ContextCompat
-
-class BillingManager(private val activity: AppCompatActivity) {
-    //private var bClient: BillingClient? = null
-
-    private fun setAppBillingClient() {
-        bClient =  BillingClient.newBuilder(activity).setListener(getPurchaseListener()).enablePendingPurchases().build()
-    }
-
-    init {
-        setAppBillingClient()
-    }
-
-    private fun getPurchaseListener(): PurchasesUpdatedListener {
-        return PurchasesUpdatedListener() {
-                bResult, list ->
-            run {
-                if (bResult.responseCode == BillingClient.BillingResponseCode.OK) {
-                    list?.get(0)?.let { nonConsumableItem(it) }
-                }
-            }
-        }
-    }
-
-    private fun savePref(isPurchase: Boolean) {
-        val pref = activity.getSharedPreferences(MAIN_PREF, Context.MODE_PRIVATE)
-        val editor = pref.edit()
-        editor.putBoolean(REMOVE_ADS_KEY, isPurchase)
-        editor.apply()
-    }
-
-    fun startConnection() {
-        bClient?.startConnection(object : BillingClientStateListener {
-            override fun onBillingServiceDisconnected() {
-            }
-
-            override fun onBillingSetupFinished(p0: BillingResult) {
-                getItem()
-            }
-        })
-    }
-
-    private fun getItem() {
-        val skuList = ArrayList<String>()
-        skuList.add(REMOVE_AD_ITEM)
-        val skuDetails = SkuDetailsParams.newBuilder()
-        skuDetails.setSkusList(skuList).setType(BillingClient.SkuType.INAPP)
-        bClient?.querySkuDetailsAsync(skuDetails.build()) {
-                bResult, list ->
-            run {
-                if (bResult.responseCode == BillingClient.BillingResponseCode.OK) {
-                    if (list != null) {
-                        if (list.isNotEmpty()) {
-                            val bFlowParams = BillingFlowParams.newBuilder().setSkuDetails(list[0]).build()
-                            bClient?.launchBillingFlow(activity, bFlowParams)
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    private fun nonConsumableItem(purchase: Purchase) {
-        if (purchase.purchaseState == Purchase.PurchaseState.PURCHASED) {
-            if (!purchase.isAcknowledged) {
-                val acParams = AcknowledgePurchaseParams.newBuilder().setPurchaseToken(purchase.purchaseToken).build()
-                bClient?.acknowledgePurchase(acParams) {
-                    if (it.responseCode == BillingClient.BillingResponseCode.OK) {
-                        savePref(true)
-                        Toast.makeText(activity, "Спасибо за покупку! :)", Toast.LENGTH_LONG).show()
-                    } else {
-                        savePref(false)
-                        Toast.makeText(activity, "Не удалось произвести покупку! :(", Toast.LENGTH_LONG).show()
-                    }
-                }
-            }
-        }
-    }
-
-    fun closeConnection() {
-        bClient?.endConnection()
-    }
-
-    companion object {
-        const val REMOVE_AD_ITEM = "remove_ad_item_id"
-        const val REMOVE_AD_ITEM_150 = "remove_ad_item_id_150"
-        const val MAIN_PREF = "main_pref"
-        const val REMOVE_ADS_KEY = "remove_ads_key"
-    }
-}*/
Index: app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceQuestion.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceQuestion.kt b/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceQuestion.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceQuestion.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,140 +0,0 @@
-package com.tpov.schoolquiz.data.api.pojo
-
-import com.google.gson.annotations.Expose
-import com.google.gson.annotations.SerializedName
-
-data class ResponceQuestion (
-
-    @SerializedName("id")
-    @Expose
-    private var id: Int = 0,
-
-    @SerializedName("answer")
-    @Expose
-    private var answer: String? = null,
-
-    @SerializedName("question")
-    @Expose
-    private var question: String? = null,
-
-    @SerializedName("value")
-    @Expose
-    private var value: Int = 0,
-
-    @SerializedName("airdate")
-    @Expose
-    private var airdate: String? = null,
-
-    @SerializedName("created_at")
-    @Expose
-    private var createdAt: String? = null,
-
-    @SerializedName("updated_at")
-    @Expose
-    private var updatedAt: String? = null,
-
-    @SerializedName("category_id")
-    @Expose
-    private var categoryId: Int = 0,
-
-    @SerializedName("game_id")
-    @Expose
-    private var gameId: Int = 0,
-
-    @SerializedName("invalid_count")
-    @Expose
-    private var invalidCount: Any? = null,
-
-    @SerializedName("category")
-    @Expose
-    private var category: Category? = null,
-) {
-
-    fun getId(): Int {
-        return id
-    }
-
-    fun setId(id: Int) {
-        this.id = id
-    }
-
-    fun getAnswer(): String? {
-        return answer
-    }
-
-    fun setAnswer(answer: String?) {
-        this.answer = answer
-    }
-
-    fun getQuestion(): String? {
-        return question
-    }
-
-    fun setQuestion(question: String?) {
-        this.question = question
-    }
-
-    fun getValue(): Int {
-        return value
-    }
-
-    fun setValue(value: Int) {
-        this.value = value
-    }
-
-    fun getAirdate(): String? {
-        return airdate
-    }
-
-    fun setAirdate(airdate: String?) {
-        this.airdate = airdate
-    }
-
-    fun getCreatedAt(): String? {
-        return createdAt
-    }
-
-    fun setCreatedAt(createdAt: String?) {
-        this.createdAt = createdAt
-    }
-
-    fun getUpdatedAt(): String? {
-        return updatedAt
-    }
-
-    fun setUpdatedAt(updatedAt: String?) {
-        this.updatedAt = updatedAt
-    }
-
-    fun getCategoryId(): Int {
-        return categoryId
-    }
-
-    fun setCategoryId(categoryId: Int) {
-        this.categoryId = categoryId
-    }
-
-    fun getGameId(): Int {
-        return gameId
-    }
-
-    fun setGameId(gameId: Int) {
-        this.gameId = gameId
-    }
-
-    fun getInvalidCount(): Any? {
-        return invalidCount
-    }
-
-    fun setInvalidCount(invalidCount: Any?) {
-        this.invalidCount = invalidCount
-    }
-
-    fun getCategory(): Category? {
-        return category
-    }
-
-    fun setCategory(category: Category?) {
-        this.category = category
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/data/workers/WorkerFactory.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/workers/WorkerFactory.kt b/app/src/main/java/com/tpov/schoolquiz/data/workers/WorkerFactory.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/workers/WorkerFactory.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,33 +0,0 @@
-/*
-package com.tpov.geoquiz.activity.workers
-
-import android.content.Context
-import androidx.work.ListenableWorker
-import androidx.work.WorkerFactory
-import androidx.work.WorkerParameters
-import com.tpov.geoquiz.database.QuestionViewModel
-import kotlinx.coroutines.InternalCoroutinesApi
-import java.security.Provider
-import javax.inject.Inject
-
-@InternalCoroutinesApi
-class WorkerFactory @Inject constructor(
-    private val workerProviders: @JvmSuppressWildcards QuestionViewModel
-) : WorkerFactory() {
-
-
-    override fun createWorker(
-        appContext: Context,
-        workerClassName: String,
-        workerParameters: WorkerParameters
-    ): ListenableWorker? {
-        return when (workerClassName) {
-            RefreshDataWorker::class.qualifiedName -> {
-                val childWorkerFactory = workerProviders[RefreshDataWorker::class.java]?.get()
-                return childWorkerFactory?.create(appContext, workerParameters)
-            }
-            else -> null
-        }
-    }
-}
-*/
Index: app/src/main/java/com/tpov/schoolquiz/data/database/entities/ApiQuestion.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ApiQuestion.kt b/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ApiQuestion.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ApiQuestion.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,27 +0,0 @@
-package com.tpov.schoolquiz.data.database.entities
-
-import androidx.room.ColumnInfo
-import androidx.room.Entity
-import androidx.room.PrimaryKey
-
-@Entity(tableName = "table_generate_question")
-
-data class ApiQuestion(
-@PrimaryKey(autoGenerate = true)
-val id: Int?,
-
-@ColumnInfo(name = "date")
-val date: String,
-
-@ColumnInfo(name = "question")
-val question: String,
-
-@ColumnInfo(name = "answer")
-val answer: String,
-
-@ColumnInfo(name = "questionTranslate")
-val questionTranslate: String,
-
-@ColumnInfo(name = "answerTranslate")
-val answerTranslate: String
-)
Index: app/src/main/java/com/tpov/schoolquiz/domain/GetQuestionDayUseCase.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/domain/GetQuestionDayUseCase.kt b/app/src/main/java/com/tpov/schoolquiz/domain/GetQuestionDayUseCase.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/domain/GetQuestionDayUseCase.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,8 +0,0 @@
-package com.tpov.schoolquiz.domain
-
-import com.tpov.schoolquiz.domain.repository.RepositoryDB
-import javax.inject.Inject
-
-class GetQuestionDayUseCase @Inject constructor(private val repositoryDB: RepositoryDB) {
-    suspend operator fun invoke() = repositoryDB.getApiQuestionList()
-}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreenViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreenViewModel.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreenViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreenViewModel.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,92 +0,0 @@
-package com.tpov.schoolquiz.presentation.splashscreen
-
-import android.annotation.SuppressLint
-import android.content.Context
-import android.content.SharedPreferences
-import android.util.Log
-import android.view.View
-import androidx.lifecycle.LiveData
-import androidx.lifecycle.MutableLiveData
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.viewModelScope
-import com.tpov.schoolquiz.data.database.entities.ApiQuestion
-import com.tpov.schoolquiz.domain.GetQuestionDayUseCase
-import com.tpov.schoolquiz.domain.InsertApiQuestionListUseCase
-import com.tpov.schoolquiz.domain.UpdateQuestionDayUseCase
-import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager
-import kotlinx.coroutines.launch
-import java.text.SimpleDateFormat
-import java.util.*
-import javax.inject.Inject
-
-@SuppressLint("CustomSplashScreen")
-class SplashScreenViewModel @Inject constructor(
-    private val insertApiQuestionListUseCase: InsertApiQuestionListUseCase,
-    private val getQuestionDayUseCase: GetQuestionDayUseCase,
-    private val updateApiQuestionUseCase: UpdateQuestionDayUseCase,
-): ViewModel() {
-
-    lateinit var generateQuestion: ApiQuestion
-    lateinit var generateQuestionNotNetwork: ApiQuestion
-    var numQuestionNotDate = 0
-    var numSystemDate = false
-    var checkLoadApi = false
-    var questionNotNetwork: String = ""
-    var answerNotNetwork: String = ""
-    var questionNotNetworkDate: String = ""
-    var answerNotNetworkDate: String = ""
-    private var numQuestionInList = 0
-    var questionApiArray: Array<String>? = null
-    var answerApiArray: Array<String>? = null
-
-    private var _allGetQuestionDay = MutableLiveData<List<ApiQuestion>>()
-    var allGetQuestionDay: LiveData<List<ApiQuestion>> = _allGetQuestionDay
-
-    @SuppressLint("NullSafeMutableLiveData")
-    fun getQuestionDay() =
-        viewModelScope.launch {
-            _allGetQuestionDay.postValue(getQuestionDayUseCase())
-        }
-
-    fun updateQuestionDay(apiQuestion: ApiQuestion) =
-        viewModelScope.launch {
-            updateApiQuestionUseCase(apiQuestion)
-        }
-
-    private fun insertApiQuestion(list: List<ApiQuestion>) = viewModelScope.launch {
-        insertApiQuestionListUseCase(list)
-    }
-
-    fun loadDate(): String {
-        Log.d("WorkManager", "Загрузка даты.")
-        val formatter = SimpleDateFormat("yyyy/MM/dd", Locale.getDefault())
-        return formatter.format(Calendar.getInstance().time)
-    }
-
-    fun loadQuestion() {
-        Log.d("WorkManager", "Загрузка квеста.")
-        val list = mutableListOf(
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", ""),
-            ApiQuestion(null, "", "", "", "", "")
-        )
-
-        for (i in 0..9) {
-            if (questionApiArray!![i] != "") {
-                Log.d("WorkManager", "Найдет не пустой квест, $i")
-                var entityGenerateQuestion = getApiQuestion(i)
-                list[i] = entityGenerateQuestion
-                numQuestionInList++
-            }
-        }
-        insertApiQuestion(list)
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/data/api/ApiFactory.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/api/ApiFactory.kt b/app/src/main/java/com/tpov/schoolquiz/data/api/ApiFactory.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/api/ApiFactory.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,18 +0,0 @@
-package com.tpov.schoolquiz.data.api
-
-import retrofit2.Retrofit
-import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory
-import retrofit2.converter.gson.GsonConverterFactory
-
-object ApiFactory {
-
-    private const val BASE_URL = "https://jservice.io/"
-
-    private val retrofit = Retrofit.Builder()
-        .addConverterFactory(GsonConverterFactory.create())
-        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
-        .baseUrl(BASE_URL)
-        .build()
-
-    val apiService = retrofit.create(ApiServiceQuestion::class.java)
-}
Index: app/src/main/java/com/tpov/schoolquiz/data/workers/ChildWorkerFactory.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/workers/ChildWorkerFactory.kt b/app/src/main/java/com/tpov/schoolquiz/data/workers/ChildWorkerFactory.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/workers/ChildWorkerFactory.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,16 +0,0 @@
-/*
-package com.tpov.geoquiz.activity.workers
-
-import android.content.Context
-import androidx.work.ListenableWorker
-import androidx.work.WorkerParameters
-
-interface ChildWorkerFactory {
-
-    fun create(
-        context: Context,
-        workerParameters: WorkerParameters
-    ): ListenableWorker
-}
-
-*/
Index: app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/ExtentionSplashScreen.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/ExtentionSplashScreen.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/ExtentionSplashScreen.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/ExtentionSplashScreen.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,21 +0,0 @@
-package com.tpov.schoolquiz.presentation.splashscreen
-
-import com.tpov.schoolquiz.data.database.entities.ApiQuestion
-
-fun apiQuestion(it: ApiQuestion) = ApiQuestion(
-    it.id,
-    it.date,
-    it.question,
-    it.answer,
-    it.questionTranslate,
-    it.answerTranslate
-)
-
-fun SplashScreenViewModel.getApiQuestion(i: Int) = ApiQuestion(
-    null,
-    "0",
-    questionApiArray!![i],
-    answerApiArray!![i],
-    questionApiArray!![i],
-    answerApiArray!![i]
-)
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/domain/InsertApiQuestionListUseCase.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/domain/InsertApiQuestionListUseCase.kt b/app/src/main/java/com/tpov/schoolquiz/domain/InsertApiQuestionListUseCase.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/domain/InsertApiQuestionListUseCase.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,9 +0,0 @@
-package com.tpov.schoolquiz.domain
-
-import com.tpov.schoolquiz.data.database.entities.ApiQuestion
-import com.tpov.schoolquiz.domain.repository.RepositoryDB
-import javax.inject.Inject
-
-class InsertApiQuestionListUseCase @Inject constructor(private val repositoryDB: RepositoryDB) {
-    suspend operator fun invoke(apiQuestion: List<ApiQuestion>) = repositoryDB.insertListApiQuestion(apiQuestion)
-}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/data/api/pojo/Category.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/Category.kt b/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/Category.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/Category.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,26 +0,0 @@
-package com.tpov.schoolquiz.data.api.pojo
-
-import com.google.gson.annotations.Expose
-import com.google.gson.annotations.SerializedName
-
-data class Category (
-    @SerializedName("id")
-    @Expose
-    var id: Int,
-
-    @SerializedName("title")
-    @Expose
-    var title: String? = null,
-
-    @SerializedName("created_at")
-    @Expose
-    var createdAt: String? = null,
-
-    @SerializedName("updated_at")
-    @Expose
-    var updatedAt: String? = null,
-
-    @SerializedName("clues_count")
-    @Expose
-    var cluesCount: Int = 0
-)
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/domain/UpdateQuestionDayUseCase.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/domain/UpdateQuestionDayUseCase.kt b/app/src/main/java/com/tpov/schoolquiz/domain/UpdateQuestionDayUseCase.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/domain/UpdateQuestionDayUseCase.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,9 +0,0 @@
-package com.tpov.schoolquiz.domain
-
-import com.tpov.schoolquiz.data.database.entities.ApiQuestion
-import com.tpov.schoolquiz.domain.repository.RepositoryDB
-import javax.inject.Inject
-
-class UpdateQuestionDayUseCase @Inject constructor(private val repositoryDB: RepositoryDB) {
-    suspend operator fun invoke(apiQuestion: ApiQuestion) = repositoryDB.updateApiQuestion(apiQuestion)
-}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/domain/GetListApiQuestionBySystemDateUseCase.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/domain/GetListApiQuestionBySystemDateUseCase.kt b/app/src/main/java/com/tpov/schoolquiz/domain/GetListApiQuestionBySystemDateUseCase.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/domain/GetListApiQuestionBySystemDateUseCase.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,8 +0,0 @@
-package com.tpov.schoolquiz.domain
-
-import com.tpov.schoolquiz.domain.repository.RepositoryDB
-import javax.inject.Inject
-
-class GetListApiQuestionBySystemDateUseCase @Inject constructor(private val repositoryDB: RepositoryDB) {
-    suspend operator fun invoke(date: String) = repositoryDB.getListApiQuestionBySystemDate(date)
-}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceLang.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceLang.kt b/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceLang.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceLang.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,23 +0,0 @@
-package com.tpov.schoolquiz.data.api.pojo
-
-import com.google.gson.annotations.Expose
-import com.google.gson.annotations.SerializedName
-
-data class ResponceLang(
-
-    @SerializedName("text")
-    @Expose
-    private val text: String,
-
-    @SerializedName("code")
-    @Expose
-    private val code: Int
-
-) {
-    fun getText(): String {
-        return text
-    }
-    fun getCode(): Int {
-        return  code
-    }
-}
Index: app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceLang.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceLang.kt b/app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceLang.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceLang.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,29 +0,0 @@
-package com.tpov.schoolquiz.data.api
-
-import com.tpov.schoolquiz.data.api.pojo.ResponceLang
-import retrofit2.http.Headers
-import retrofit2.http.POST
-import retrofit2.http.Query
-/**
-* "https://translated-mymemory---translation-memory.p.rapidapi.com/api/get?langpair=en%7Cru&q=Hello%20World!&mt=1&onlyprivate=0&de=a%40b.c"
-**/
-interface ApiServiceLang {
-    @Headers(
-        "X-RapidAPI-Key: 518352f3c1msh0b5972992fb28fb28fp1a9bc8jsndcffc491201d",
-                "X-RapidAPI-Host: translated-mymemory---translation-memory.p.rapidapi.com"
-    )
-    @POST("api/")
-    suspend fun translate (
-        @Query(LANG) langpair: String,
-        @Query(TEXT) q: String,
-        @Query("d2f4e76232223ed9117b") key: String,
-        @Query("1") mt: String,
-        @Query("0") onlyprivate: String,
-        @Query("a@b.c") de: String
-    ): List<ResponceLang>
-
-    companion object {
-        const val LANG = "langpair"
-        const val TEXT = "q"
-    }
-}
Index: app/src/main/java/com/tpov/schoolquiz/data/workers/MyReciver.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/workers/MyReciver.kt b/app/src/main/java/com/tpov/schoolquiz/data/workers/MyReciver.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/workers/MyReciver.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,18 +0,0 @@
-package com.tpov.schoolquiz.data.workers
-
-import android.content.BroadcastReceiver
-import android.content.Context
-import android.content.Intent
-import android.widget.Toast
-
-class MyReceiver : BroadcastReceiver() {
-
-    override fun onReceive(context: Context?, intent: Intent?) {
-        when (intent?.action) {
-            "loaded" -> {
-                val percent = intent.getIntExtra("percent", 0)
-                Toast.makeText(context, "Loaded $percent", Toast.LENGTH_SHORT).show()
-            }
-        }
-    }
-}
Index: app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceQuestion.kt
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceQuestion.kt b/app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceQuestion.kt
deleted file mode 100644
--- a/app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceQuestion.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ /dev/null	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
@@ -1,19 +0,0 @@
-package com.tpov.schoolquiz.data.api
-
-import com.tpov.schoolquiz.data.api.pojo.ResponceQuestion
-import retrofit2.http.GET
-import retrofit2.http.Query
-
-interface ApiServiceQuestion {
-
-//http://jservice.io/api/random1
-    @GET("api/random")
-    suspend fun getFullPriceList(
-        @Query(QUERY_COUNT) count: String = COUNT
-    ): List<ResponceQuestion>
-
-    companion object {
-        private const val COUNT = "1"
-        private const val QUERY_COUNT = "count"
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.network.event\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.LinearLayout\r\nimport android.widget.RatingBar\r\nimport android.widget.Switch\r\nimport android.widget.TextView\r\nimport androidx.appcompat.widget.AppCompatCheckBox\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.squareup.picasso.Picasso\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.data.database.entities.ChatEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\n\r\nclass EventAdapter(\r\n    private val quiz2List: List<QuizEntity>,\r\n    private val quiz3List: List<QuizEntity>,\r\n    private val quiz4List: List<QuizEntity>,\r\n    private val translate1EventList: List<QuestionEntity>,\r\n    private val translate2EventList: List<QuestionEntity>,\r\n    private val translateEditQuestionList: List<QuestionEntity>,\r\n    private val moderatorEventList: List<ChatEntity>,\r\n    private val adminEventList: List<ChatEntity>,\r\n    private val developerEventList: List<ChatEntity>,\r\n    private val listener: ListenerEvent\r\n) : RecyclerView.Adapter<EventAdapter.MyViewHolder>() {\r\n\r\n    private val viewTypes by lazy {\r\n        arrayOf(\r\n            Pair(QUIZ2_LIST, quiz2List),\r\n            Pair(QUIZ3_LIST, quiz3List),\r\n            Pair(QUIZ4_LIST, quiz4List),\r\n            Pair(TRANSLATE1_EVENT_LIST, translate1EventList),\r\n            Pair(TRANSLATE2_EVENT_LIST, translate2EventList),\r\n            Pair(TRANSLATE_EDIT_QUESTION_LIST, translateEditQuestionList),\r\n            Pair(MODERATOR_EVENT_LIST, moderatorEventList),\r\n            Pair(ADMIN_EVENT_LIST, adminEventList),\r\n            Pair(DEVELOPER_EVENT_LIST, developerEventList),\r\n            Pair(HEADER_VIEW, quiz2List)\r\n        )\r\n    }\r\n\r\n    private val size1: Int by lazy { quiz2List.size }\r\n    private val size2: Int by lazy { quiz3List.size + size1 }\r\n    private val size3: Int by lazy { quiz4List.size + size2 }\r\n    private val size4: Int by lazy { translate1EventList.size + size3 }\r\n    private val size5: Int by lazy { translate2EventList.size + size4 }\r\n    private val size6: Int by lazy { translateEditQuestionList.size + size5 }\r\n    private val size7: Int by lazy { moderatorEventList.size + size6 }\r\n    private val size8: Int by lazy { adminEventList.size + size7 }\r\n    private val size9: Int by lazy { developerEventList.size + size8 }\r\n\r\n    private val headers = arrayOf(\r\n        \"Quiz 2\",\r\n        \"Quiz 3\",\r\n        \"Quiz 4\",\r\n        \"Translate 1\",\r\n        \"Translate 2\",\r\n        \"Translate Edit Question\",\r\n        \"Moderator Event\",\r\n        \"Admin Event\",\r\n        \"Developer Event\"\r\n    )\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\r\n\r\n        return when (viewType) {\r\n            HEADER_VIEW -> {\r\n                val itemHeader = LayoutInflater.from(parent.context)\r\n                    .inflate(R.layout.title_header, parent, false)\r\n                MyViewHolder(itemHeader)\r\n            }\r\n\r\n            else -> {\r\n                val itemAdminEvent = LayoutInflater.from(parent.context)\r\n                    .inflate(R.layout.activity_main_item, parent, false)\r\n                MyViewHolder(itemAdminEvent)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getItemViewType(position: Int): Int {\r\n\r\n        log(\"fun getItemViewType(), position: $position\")\r\n        log(\"fun getItemViewType(), size1:      $size1\")\r\n        log(\"fun getItemViewType(), size2:      $size2\")\r\n        log(\"fun getItemViewType(), size3:      $size3\")\r\n        log(\"fun getItemViewType(), size4:      $size4\")\r\n        log(\"fun getItemViewType(), size5:      $size5\")\r\n        log(\"fun getItemViewType(), size6:      $size6\")\r\n        log(\"fun getItemViewType(), size7:      $size7\")\r\n        log(\"fun getItemViewType(), size8:      $size8\")\r\n        log(\"fun getItemViewType(), size9:      $size9\")\r\n        log(\"fun getItemViewType(), _______________________________________\")\r\n//        return if (\r\n//            position == 0 ||\r\n//            position == size1 ||\r\n//            position == size2 ||\r\n//            position == size3 ||\r\n//            position == size4 ||\r\n//            position == size5 ||\r\n//            position == size6 ||\r\n//            position == size7 ||\r\n//            position == size8\r\n//        ) HEADER_VIEW\r\n        return if (position < size1) QUIZ2_LIST\r\n        else if (position < size2) QUIZ3_LIST\r\n        else if (position < size3) QUIZ4_LIST\r\n        else if (position < size4) TRANSLATE1_EVENT_LIST\r\n        else if (position < size5) TRANSLATE2_EVENT_LIST\r\n        else if (position < size6) TRANSLATE_EDIT_QUESTION_LIST\r\n        else if (position < size7) MODERATOR_EVENT_LIST\r\n        else if (position < size8) ADMIN_EVENT_LIST\r\n        else if (position < size9) DEVELOPER_EVENT_LIST\r\n        else -1\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\r\n        log(\"fun onBindViewHolder(), quiz2List: $quiz2List\")\r\n\r\n        when (getItemViewType(position)) {\r\n            QUIZ2_LIST -> {\r\n                val quiz = quiz2List[position]\r\n                holder.bindQuiz2(quiz)\r\n            }\r\n\r\n            QUIZ3_LIST -> {\r\n                val quiz = quiz3List[position - size1]\r\n                holder.bindQuiz3(quiz)\r\n            }\r\n\r\n            QUIZ4_LIST -> {\r\n                val quiz = quiz4List[position - size2]\r\n                holder.bindQuiz4(quiz)\r\n            }\r\n\r\n            TRANSLATE1_EVENT_LIST -> {\r\n                val question =\r\n                    translate1EventList[position - size3]\r\n                holder.bindTranslate1Event(question)\r\n            }\r\n\r\n            TRANSLATE2_EVENT_LIST -> {\r\n                val question = translate2EventList[position - size4]\r\n                holder.bindTranslate2Event(question)\r\n            }\r\n\r\n            TRANSLATE_EDIT_QUESTION_LIST -> {\r\n                val question = translateEditQuestionList[position - size5]\r\n                holder.bindTranslateEditQuestion(question)\r\n            }\r\n\r\n            MODERATOR_EVENT_LIST -> {\r\n                val question = moderatorEventList[position - size6]\r\n                holder.bindModeratorEvent(question)\r\n            }\r\n\r\n            ADMIN_EVENT_LIST -> {\r\n                val quiz = adminEventList[position - size7]\r\n                holder.bindAdminEvent(quiz)\r\n            }\r\n\r\n            DEVELOPER_EVENT_LIST -> {\r\n                val quiz = developerEventList[position - size8]\r\n                holder.bindDeveloperEvent(quiz)\r\n            }\r\n\r\n            HEADER_VIEW -> {\r\n                val header = headers[position]\r\n                holder.bindHeader(header)\r\n            }\r\n\r\n            else -> throw IllegalArgumentException(\"Invalid view type\")\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n\r\n        return size9\r\n    }\r\n\r\n    inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n\r\n        fun bindQuiz2(quiz: QuizEntity) {\r\n            log(\"bindQuiz2\")\r\n            itemView.findViewById<Button>(R.id.main_title_button).text = quiz.nameQuiz\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_light_quiz).visibility = View.VISIBLE\r\n            itemView.findViewById<ImageView>(R.id.imv_grafient_hard_quiz).visibility = View.GONE\r\n            itemView.findViewById<TextView>(R.id.tvNumHardQuiz).visibility = View.GONE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<AppCompatCheckBox>(R.id.chb_type_quiz).visibility = View.GONE\r\n            itemView.findViewById<TextView>(R.id.tvNumQuestion).text = quiz.numQ.toString()\r\n            itemView.findViewById<TextView>(R.id.tvNumHardQuiz).visibility = View.GONE\r\n            itemView.findViewById<TextView>(R.id.tvNumQuestion).visibility = View.VISIBLE\r\n            itemView.findViewById<TextView>(R.id.tvName).text = quiz.userName\r\n            itemView.findViewById<TextView>(R.id.tvTime).text = quiz.data\r\n            val imageQuiz = itemView.findViewById<ImageView>(R.id.imageView)\r\n            if (quiz.picture != \"\") Picasso.get().load(quiz.picture).into(imageQuiz)\r\n\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_light_quiz).setOnClickListener {\r\n                log(\"bindQuiz2 setOnClickListener\")\r\n                listener.onQuiz2Clicked(quiz.id!!)\r\n            }\r\n        }\r\n\r\n        fun bindQuiz3(quiz: QuizEntity) {\r\n            log(\"bindQuiz3\")\r\n            itemView.findViewById<Button>(R.id.main_title_button).text = quiz.nameQuiz\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_light_quiz).visibility = View.GONE\r\n            itemView.findViewById<ImageView>(R.id.imv_grafient_hard_quiz).visibility = View.VISIBLE\r\n            itemView.findViewById<TextView>(R.id.tvNumHardQuiz).visibility = View.VISIBLE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<AppCompatCheckBox>(R.id.chb_type_quiz).visibility = View.GONE\r\n            itemView.findViewById<TextView>(R.id.tvNumQuestion).visibility = View.GONE\r\n            itemView.findViewById<TextView>(R.id.tvNumHardQuiz).text = quiz.numHQ.toString()\r\n            itemView.findViewById<TextView>(R.id.tvName).text = quiz.userName\r\n            itemView.findViewById<TextView>(R.id.tvTime).text = quiz.data\r\n            val imageQuiz = itemView.findViewById<ImageView>(R.id.imageView)\r\n            if (quiz.picture != \"\") Picasso.get().load(quiz.picture).into(imageQuiz)\r\n\r\n            itemView.findViewById<ImageView>(R.id.imv_grafient_hard_quiz).setOnClickListener {\r\n                log(\"bindQuiz3 setOnClickListener\")\r\n                listener.onQuiz3Clicked(quiz.id!!)\r\n            }\r\n        }\r\n\r\n        fun bindQuiz4(quiz: QuizEntity) {\r\n            log(\"bindQuiz4\")\r\n            itemView.findViewById<Button>(R.id.main_title_button).text = quiz.nameQuiz\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<TextView>(R.id.tvNumHardQuiz).visibility = View.VISIBLE\r\n            itemView.findViewById<TextView>(R.id.tvNumQuestion).visibility = View.VISIBLE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<AppCompatCheckBox>(R.id.chb_type_quiz).visibility = View.GONE\r\n            itemView.findViewById<TextView>(R.id.tvNumHardQuiz).text = quiz.numHQ.toString()\r\n            itemView.findViewById<TextView>(R.id.tvNumQuestion).text = quiz.numQ.toString()\r\n            itemView.findViewById<TextView>(R.id.tvName).text = quiz.userName\r\n            itemView.findViewById<TextView>(R.id.tvTime).text = quiz.data\r\n            val imageQuiz = itemView.findViewById<ImageView>(R.id.imageView)\r\n            if (quiz.picture != \"\") Picasso.get().load(quiz.picture).into(imageQuiz)\r\n\r\n            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {\r\n                log(\"bindQuiz4 setOnClickListener\")\r\n                listener.onQuiz4Clicked(quiz.id!!)\r\n            }\r\n        }\r\n\r\n        fun bindTranslate1Event(question: QuestionEntity) {\r\n            log(\"bindTranslate1Event\")\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<Button>(R.id.main_title_button).text =\r\n                \"${question.language} - lvl:${question.lvlTranslate} \\\"${question.nameQuestion}\\\"\"\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).visibility =\r\n                View.VISIBLE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<Switch>(R.id.chb_type_quiz).visibility = View.GONE\r\n\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).setOnClickListener {\r\n                log(\"bindTranslate1Event setOnClickListener\")\r\n                listener.onTranslate1EventClicked(question.id!!)\r\n            }\r\n        }\r\n\r\n        fun bindTranslate2Event(question: QuestionEntity) {\r\n            log(\"bindTranslate2Event\")\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<Button>(R.id.main_title_button).text =\r\n                \"${question.language} - lvl:${question.lvlTranslate} \\\"${question.nameQuestion}\\\"\"\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).visibility =\r\n                View.VISIBLE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<Switch>(R.id.chb_type_quiz).visibility = View.GONE\r\n\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).setOnClickListener {\r\n                log(\"bindTranslate2Event setOnClickListener\")\r\n                listener.onTranslate2EventClicked(question.id!!)\r\n            }\r\n        }\r\n\r\n        fun bindTranslateEditQuestion(question: QuestionEntity) {\r\n            log(\"bindTranslateEditQuestion\")\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<Button>(R.id.main_title_button).text =\r\n                \"${question.language} - lvl:${question.lvlTranslate} \\\"${question.nameQuestion}\\\"\"\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).visibility =\r\n                View.VISIBLE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<Switch>(R.id.chb_type_quiz).visibility = View.GONE\r\n\r\n            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {\r\n                log(\"bindTranslateEditQuestion setOnClickListener\")\r\n                listener.onTranslateEditQuestionClicked(question.id!!)\r\n            }\r\n        }\r\n\r\n        fun bindModeratorEvent(chat: ChatEntity) {\r\n            log(\"bindModeratorEvent\")\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<Button>(R.id.main_title_button).text = \"${chat.msg}\"\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).visibility =\r\n                View.VISIBLE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<Switch>(R.id.chb_type_quiz).visibility = View.GONE\r\n\r\n            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {\r\n                log(\"bindModeratorEvent setOnClickListener\")\r\n                listener.onModeratorEventClicked(it.id)\r\n            }\r\n        }\r\n\r\n        fun bindAdminEvent(chat: ChatEntity) {\r\n            log(\"bindAdminEvent\")\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<Button>(R.id.main_title_button).text = \"${chat.msg}\"\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).visibility =\r\n                View.VISIBLE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<Switch>(R.id.chb_type_quiz).visibility = View.GONE\r\n\r\n            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {\r\n                log(\"bindAdminEvent setOnClickListener\")\r\n                listener.onAdminEventClicked(it.id)\r\n            }\r\n        }\r\n\r\n        fun bindDeveloperEvent(chat: ChatEntity) {\r\n            log(\"bindDeveloperEvent\")\r\n            itemView.findViewById<LinearLayout>(R.id.swipe_layout).visibility = View.GONE\r\n            itemView.findViewById<Button>(R.id.main_title_button).text = \"${chat.msg}\"\r\n            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).visibility =\r\n                View.VISIBLE\r\n            itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE\r\n            itemView.findViewById<Switch>(R.id.chb_type_quiz).visibility = View.GONE\r\n\r\n            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {\r\n                log(\"bindDeveloperEvent setOnClickListener\")\r\n                listener.onDeveloperEventClicked(it.id)\r\n            }\r\n        }\r\n\r\n        fun bindHeader(header: String) {\r\n            itemView.findViewById<TextView>(R.id.tv_header).text = \"$header\"\r\n        }\r\n    }\r\n\r\n    interface ListenerEvent {\r\n        fun onQuiz2Clicked(quizId: Int)\r\n        fun onQuiz3Clicked(quizId: Int)\r\n        fun onQuiz4Clicked(quizId: Int)\r\n        fun onTranslate1EventClicked(questionId: Int)\r\n        fun onTranslate2EventClicked(quizId: Int)\r\n        fun onTranslateEditQuestionClicked(questionId: Int)\r\n        fun onModeratorEventClicked(quizId: Int)\r\n        fun onAdminEventClicked(quizId: Int)\r\n        fun onDeveloperEventClicked(quizId: Int)\r\n    }\r\n\r\n    companion object {\r\n\r\n        private const val QUIZ2_LIST = 0\r\n        private const val QUIZ3_LIST = 1\r\n        private const val QUIZ4_LIST = 2\r\n        private const val TRANSLATE1_EVENT_LIST = 3\r\n        private const val TRANSLATE2_EVENT_LIST = 4\r\n        private const val TRANSLATE_EDIT_QUESTION_LIST = 5\r\n        private const val MODERATOR_EVENT_LIST = 6\r\n        private const val ADMIN_EVENT_LIST = 7\r\n        private const val DEVELOPER_EVENT_LIST = 8\r\n        private const val HEADER_VIEW = 9\r\n\r\n        // Add more types as needed\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventAdapter.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventAdapter.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventAdapter.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventAdapter.kt	(date 1685299236200)
@@ -3,12 +3,7 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
-import android.widget.Button
-import android.widget.ImageView
-import android.widget.LinearLayout
-import android.widget.RatingBar
-import android.widget.Switch
-import android.widget.TextView
+import android.widget.*
 import androidx.appcompat.widget.AppCompatCheckBox
 import androidx.recyclerview.widget.RecyclerView
 import com.squareup.picasso.Picasso
@@ -203,7 +198,7 @@
             val imageQuiz = itemView.findViewById<ImageView>(R.id.imageView)
             if (quiz.picture != "") Picasso.get().load(quiz.picture).into(imageQuiz)
 
-            itemView.findViewById<ImageView>(R.id.imv_gradient_light_quiz).setOnClickListener {
+            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {
                 log("bindQuiz2 setOnClickListener")
                 listener.onQuiz2Clicked(quiz.id!!)
             }
@@ -225,7 +220,7 @@
             val imageQuiz = itemView.findViewById<ImageView>(R.id.imageView)
             if (quiz.picture != "") Picasso.get().load(quiz.picture).into(imageQuiz)
 
-            itemView.findViewById<ImageView>(R.id.imv_grafient_hard_quiz).setOnClickListener {
+            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {
                 log("bindQuiz3 setOnClickListener")
                 listener.onQuiz3Clicked(quiz.id!!)
             }
@@ -262,7 +257,7 @@
             itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE
             itemView.findViewById<Switch>(R.id.chb_type_quiz).visibility = View.GONE
 
-            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).setOnClickListener {
+            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {
                 log("bindTranslate1Event setOnClickListener")
                 listener.onTranslate1EventClicked(question.id!!)
             }
@@ -278,7 +273,7 @@
             itemView.findViewById<RatingBar>(R.id.ratingBar).visibility = View.GONE
             itemView.findViewById<Switch>(R.id.chb_type_quiz).visibility = View.GONE
 
-            itemView.findViewById<ImageView>(R.id.imv_gradient_translate_quiz).setOnClickListener {
+            itemView.findViewById<Button>(R.id.main_title_button).setOnClickListener {
                 log("bindTranslate2Event setOnClickListener")
                 listener.onTranslate2EventClicked(question.id!!)
             }
Index: app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslationQuestionAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.network.event\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.AdapterView\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.EditText\r\nimport android.widget.Spinner\r\nimport androidx.appcompat.widget.AppCompatTextView\r\nimport androidx.core.widget.addTextChangedListener\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\n\r\nclass TranslationQuestionAdapter(val questions: MutableList<QuestionEntity>, private val languages: List<String>) :\r\n    RecyclerView.Adapter<TranslationQuestionAdapter.QuestionViewHolder>() {\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): QuestionViewHolder {\r\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_translated_question, parent, false)\r\n        return QuestionViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: QuestionViewHolder, position: Int) {\r\n        holder.bind(questions[position])\r\n    }\r\n\r\n    override fun getItemCount(): Int = questions.size\r\n\r\n    fun addNewQuestion() {\r\n        questions.add(QuestionEntity(null, 0, \"\", false, false, 0, \"\", 0))\r\n        notifyItemInserted(questions.size - 1)\r\n    }\r\n\r\n    fun getUpdatedQuestions(): List<QuestionEntity> = questions\r\n\r\n    inner class QuestionViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        private val nameQuestionEditText: EditText = itemView.findViewById(R.id.nameQuestionEditText)\r\n        private val languageSpinner: Spinner = itemView.findViewById(R.id.languageSpinner)\r\n        private val lvlTranslateTextView: AppCompatTextView = itemView.findViewById(R.id.lvlTranslateTextView)\r\n\r\n        fun bind(question: QuestionEntity) {\r\n            nameQuestionEditText.setText(question.nameQuestion)\r\n            lvlTranslateTextView.text = question.lvlTranslate.toString()\r\n\r\n            val languageAdapter = ArrayAdapter(itemView.context, android.R.layout.simple_spinner_item, languages)\r\n            languageAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\n            languageSpinner.adapter = languageAdapter\r\n\r\n            if (question.language.isNotEmpty()) {\r\n                val languagePosition = languages.indexOf(question.language)\r\n                if (languagePosition != -1) {\r\n                    languageSpinner.setSelection(languagePosition)\r\n                }\r\n            }\r\n\r\n            languageSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\r\n                override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                    questions[adapterPosition].language = languages[position]\r\n                }\r\n\r\n                override fun onNothingSelected(parent: AdapterView<*>?) {\r\n                    // Do nothing\r\n                }\r\n            }\r\n\r\n            nameQuestionEditText.addTextChangedListener {\r\n                questions[adapterPosition].nameQuestion = it.toString()\r\n            }\r\n\r\n            lvlTranslateTextView.addTextChangedListener {\r\n                questions[adapterPosition].lvlTranslate = it.toString().toIntOrNull() ?: 0\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslationQuestionAdapter.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslationQuestionAdapter.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslationQuestionAdapter.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslationQuestionAdapter.kt	(date 1685299236206)
@@ -12,6 +12,7 @@
 import androidx.recyclerview.widget.RecyclerView
 import com.tpov.schoolquiz.R
 import com.tpov.schoolquiz.data.database.entities.QuestionEntity
+import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId
 
 class TranslationQuestionAdapter(val questions: MutableList<QuestionEntity>, private val languages: List<String>) :
     RecyclerView.Adapter<TranslationQuestionAdapter.QuestionViewHolder>() {
@@ -28,7 +29,7 @@
     override fun getItemCount(): Int = questions.size
 
     fun addNewQuestion() {
-        questions.add(QuestionEntity(null, 0, "", false, false, 0, "", 0))
+        questions.add(QuestionEntity(null, 0, "", false, false, 0, "", 0, getTpovId().toString()))
         notifyItemInserted(questions.size - 1)
     }
 
Index: app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.network.event\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.presentation.MainApp\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.factory.ViewModelFactory\r\nimport com.tpov.schoolquiz.presentation.fragment.BaseFragment\r\nimport com.tpov.schoolquiz.presentation.question.QuestionActivity\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\nclass EventFragment : BaseFragment(), EventAdapter.ListenerEvent {\r\n\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var eventAdapter: EventAdapter\r\n    private lateinit var eventViewModel: EventViewModel\r\n\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private val component by lazy {\r\n        (requireActivity().application as MainApp).component\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        eventViewModel = ViewModelProvider(this, viewModelFactory)[EventViewModel::class.java]\r\n\r\n        val sharedPref = context?.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        log(\"fun onViewCreated, tpovId: $tpovId\")\r\n\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            eventViewModel.getQuizList()\r\n            eventViewModel.getTranslateList(tpovId)\r\n            eventViewModel.getEventDeveloper()\r\n        }\r\n\r\n        recyclerView = view.findViewById(R.id.rv_event)\r\n        recyclerView.layoutManager = LinearLayoutManager(context)\r\n\r\n        val quiz2List = eventViewModel.quiz2List\r\n        val quiz3List = eventViewModel.quiz3List\r\n        val quiz4List = eventViewModel.quiz4List\r\n        val translate1EventList = eventViewModel.translate1Question\r\n        val translate2EventList = eventViewModel.translate2Question\r\n        val translateEditQuestionList = eventViewModel.translateEditQuestion\r\n        val moderatorEventList = eventViewModel.moderator\r\n        val adminEventList = eventViewModel.admin\r\n        val developerEventList = eventViewModel.develop\r\n\r\n        val eventAdapter = EventAdapter(\r\n            quiz2List,\r\n            quiz3List,\r\n            quiz4List,\r\n            translate1EventList,\r\n            translate2EventList,\r\n            translateEditQuestionList,\r\n            moderatorEventList,\r\n            adminEventList,\r\n            developerEventList,\r\n            this\r\n        )\r\n        recyclerView.adapter = eventAdapter\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // раздуваем макет фрагмента\r\n        return inflater.inflate(R.layout.event_fragment, container, false)\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    override fun onAttach(context: Context) {\r\n        component.inject(this)\r\n        super.onAttach(context)\r\n    }\r\n\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    override fun onQuiz2Clicked(quizId: Int) {\r\n        log(\"fun onQuiz2Clicked\")\r\n\r\n        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 30% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)\r\n            )\r\n            val intent = Intent(activity, QuestionActivity::class.java)\r\n            intent.putExtra(QuestionActivity.NAME_USER, \"user\")\r\n            intent.putExtra(QuestionActivity.ID_QUIZ, quizId)\r\n            intent.putExtra(QuestionActivity.HARD_QUESTION, false)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    override fun onQuiz3Clicked(quizId: Int) {\r\n        log(\"fun onQuiz3Clicked\")\r\n        log(\"fun onQuiz2Clicked\")\r\n\r\n        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 30% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)\r\n            )\r\n            val intent = Intent(activity, QuestionActivity::class.java)\r\n            intent.putExtra(QuestionActivity.NAME_USER, \"user\")\r\n            intent.putExtra(QuestionActivity.ID_QUIZ, quizId)\r\n            intent.putExtra(QuestionActivity.HARD_QUESTION, true)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    override fun onQuiz4Clicked(quizId: Int) {\r\n\r\n        log(\"fun onQuiz2Clicked\")\r\n        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 30% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)\r\n            )\r\n            log(\"fun onQuiz4Clicked\")\r\n            val intent = Intent(activity, QuestionActivity::class.java)\r\n            intent.putExtra(QuestionActivity.NAME_USER, \"user\")\r\n            intent.putExtra(QuestionActivity.ID_QUIZ, quizId)\r\n            intent.putExtra(QuestionActivity.HARD_QUESTION, false)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    override fun onTranslate1EventClicked(questionId: Int) {\r\n\r\n        log(\"fun onQuiz2Clicked\")\r\n        if (eventViewModel.getProfileCount()!! < 15) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 15% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 15)\r\n            )\r\n            log(\"fun onTranslate1EventClicked\")\r\n        }\r\n    }\r\n\r\n    override fun onTranslate2EventClicked(quizId: Int) {\r\n\r\n        log(\"fun onQuiz2Clicked\")\r\n        if (eventViewModel.getProfileCount()!! < 15) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 15% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 15)\r\n            )\r\n            log(\"fun onTranslate2EventClicked\")\r\n        }\r\n    }\r\n\r\n    override fun onTranslateEditQuestionClicked(questionId: Int) {\r\n\r\n        log(\"fun onQuiz2Clicked\")\r\n        if (eventViewModel.getProfileCount()!! < 15) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 15% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 15)\r\n            )\r\n            log(\"fun onTranslateEditQuestionClicked\")\r\n        }\r\n    }\r\n\r\n    override fun onModeratorEventClicked(quizId: Int) {\r\n\r\n        log(\"fun onQuiz2Clicked\")\r\n        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 30% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)\r\n            )\r\n            log(\"fun onModeratorEventClicked\")\r\n        }\r\n    }\r\n\r\n    override fun onAdminEventClicked(quizId: Int) {\r\n\r\n        log(\"fun onQuiz2Clicked\")\r\n        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 30% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)\r\n            )\r\n            log(\"fun onAdminEventClicked\")\r\n        }\r\n    }\r\n\r\n    override fun onDeveloperEventClicked(quizId: Int) {\r\n\r\n        log(\"fun onQuiz2Clicked\")\r\n        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 30% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            eventViewModel.updateProfileUseCase(\r\n                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)\r\n            )\r\n            log(\"fun onDeveloperEventClicked\")\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        @JvmStatic\r\n        fun newInstance() = EventFragment()\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    fun log(msg: String) {\r\n        Logcat.log(msg, \"Event\", Logcat.LOG_FRAGMENT)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventFragment.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventFragment.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventFragment.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventFragment.kt	(date 1685299236211)
@@ -99,14 +99,14 @@
     override fun onQuiz2Clicked(quizId: Int) {
         log("fun onQuiz2Clicked")
 
-        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(
+        if (eventViewModel.getProfileCount()!! < 15) Toast.makeText(
             activity,
-            "Недостаточно жизней. На прохождение квеста тратиться 30% жизни",
+            "Недостаточно жизней. На прохождение квеста тратиться 15% жизни",
             Toast.LENGTH_LONG
         ).show()
         else {
             eventViewModel.updateProfileUseCase(
-                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)
+                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 15)
             )
             val intent = Intent(activity, QuestionActivity::class.java)
             intent.putExtra(QuestionActivity.NAME_USER, "user")
@@ -121,14 +121,14 @@
         log("fun onQuiz3Clicked")
         log("fun onQuiz2Clicked")
 
-        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(
+        if (eventViewModel.getProfileCount()!! < 15) Toast.makeText(
             activity,
-            "Недостаточно жизней. На прохождение квеста тратиться 30% жизни",
+            "Недостаточно жизней. На прохождение квеста тратиться 15% жизни",
             Toast.LENGTH_LONG
         ).show()
         else {
             eventViewModel.updateProfileUseCase(
-                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)
+                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 15)
             )
             val intent = Intent(activity, QuestionActivity::class.java)
             intent.putExtra(QuestionActivity.NAME_USER, "user")
@@ -142,14 +142,14 @@
     override fun onQuiz4Clicked(quizId: Int) {
 
         log("fun onQuiz2Clicked")
-        if (eventViewModel.getProfileCount()!! < 50) Toast.makeText(
+        if (eventViewModel.getProfileCount()!! < 20) Toast.makeText(
             activity,
-            "Недостаточно жизней. На прохождение квеста тратиться 30% жизни",
+            "Недостаточно жизней. На прохождение квеста тратиться 20% жизни",
             Toast.LENGTH_LONG
         ).show()
         else {
             eventViewModel.updateProfileUseCase(
-                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 50)
+                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 20)
             )
             log("fun onQuiz4Clicked")
             val intent = Intent(activity, QuestionActivity::class.java)
@@ -163,14 +163,14 @@
     override fun onTranslate1EventClicked(questionId: Int) {
 
         log("fun onQuiz2Clicked")
-        if (eventViewModel.getProfileCount()!! < 15) Toast.makeText(
+        if (eventViewModel.getProfileCount()!! < 10) Toast.makeText(
             activity,
-            "Недостаточно жизней. На прохождение квеста тратиться 15% жизни",
+            "Недостаточно жизней. На прохождение квеста тратиться 10% жизни",
             Toast.LENGTH_LONG
         ).show()
         else {
             eventViewModel.updateProfileUseCase(
-                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 15)
+                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 10)
             )
             log("fun onTranslate1EventClicked")
         }
@@ -195,14 +195,14 @@
     override fun onTranslateEditQuestionClicked(questionId: Int) {
 
         log("fun onQuiz2Clicked")
-        if (eventViewModel.getProfileCount()!! < 15) Toast.makeText(
+        if (eventViewModel.getProfileCount()!! < 10) Toast.makeText(
             activity,
             "Недостаточно жизней. На прохождение квеста тратиться 15% жизни",
             Toast.LENGTH_LONG
         ).show()
         else {
             eventViewModel.updateProfileUseCase(
-                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 15)
+                eventViewModel.getProfile().copy(count = eventViewModel.getProfileCount()!! - 10)
             )
             log("fun onTranslateEditQuestionClicked")
         }
Index: app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialogTerminal.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.dialog\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.LinearLayout\r\nimport android.widget.RadioButton\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.material.textfield.TextInputEditText\r\nimport com.google.mlkit.common.model.DownloadConditions\r\nimport com.google.mlkit.nl.languageid.LanguageIdentification\r\nimport com.google.mlkit.nl.languageid.LanguageIdentifier\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.databinding.CreateQuestionDialogTerminalBinding\r\nimport com.tpov.schoolquiz.presentation.main.MainActivityViewModel\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport java.util.*\r\n\r\n\r\nclass CreateQuestionDialogTerminal() : DialogFragment() {\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private val mainActivityViewModel by lazy {\r\n        ViewModelProvider(requireActivity())[MainActivityViewModel::class.java]\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    @RequiresApi(Build.VERSION_CODES.Q)\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder = AlertDialog.Builder(activity)\r\n        val binding = CreateQuestionDialogTerminalBinding.inflate(LayoutInflater.from(activity))\r\n        var question = ArrayList<QuestionEntity>()\r\n        val sharedPref = context?.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0)\r\n        var nameQuestion = \"\"\r\n        var intvQuestion2 = TextInputEditText(requireContext())\r\n        var questionLayout2 = LinearLayout(context)\r\n        var tvQuestion2 = TextView(context)\r\n        var sumbolQuestion2 = TextView(context)\r\n\r\n        val languageIdentifier = LanguageIdentification.getClient()\r\n        val conditions = DownloadConditions.Builder()\r\n            .requireWifi()\r\n            .build()\r\n\r\n        builder.setView(binding.root)\r\n\r\n        var numQuestion = 0\r\n        var nameQuiz = \"\"\r\n\r\n\r\n        binding.tvNext.setOnClickListener {\r\n\r\n            tvQuestion2.text =\r\n                \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n            tvQuestion2 = TextView(context)\r\n\r\n            intvQuestion2.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(\r\n                    s: CharSequence?,\r\n                    start: Int,\r\n                    count: Int,\r\n                    after: Int\r\n                ) {\r\n                }\r\n\r\n                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                    nameQuestion = \"\"\r\n                    nameQuestion = s.toString()\r\n                    tvQuestion2.text =\r\n                        \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n                }\r\n\r\n                override fun afterTextChanged(s: Editable?) {}\r\n            })\r\n            if (numQuestion != 0) {\r\n                getLanguage(languageIdentifier, nameQuestion) { lang ->\r\n                    question.add(\r\n                        QuestionEntity(\r\n                            null,\r\n                            numQuestion - 1,\r\n                            nameQuestion,\r\n                            getTextTrue(binding.rbTrue).toBoolean(),\r\n                            getTypeText(binding.rbLightQuestion).toBoolean(),\r\n                            -1,\r\n                            lang,\r\n                            mainActivityViewModel.getProfileFBLiveData.value?.translater ?: -1\r\n                        )\r\n                    )\r\n                }\r\n\r\n            } else {\r\n                nameQuiz = binding.intvQuiz.text.toString()\r\n            }\r\n\r\n            Log.d(\"adasfgdrh\", \"===question ${question}\")\r\n            // Создание нового question_layout\r\n\r\n\r\n            questionLayout2.id = View.generateViewId()\r\n            questionLayout2.orientation = LinearLayout.HORIZONTAL\r\n\r\n            tvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(500, LinearLayout.LayoutParams.WRAP_CONTENT)\r\n            questionLayout2.addView(tvQuestion2)\r\n\r\n            // Добавление TextView для символа\r\n            sumbolQuestion2.layoutParams = LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT\r\n            )\r\n            sumbolQuestion2.text = \" -$ \"\r\n            questionLayout2.addView(sumbolQuestion2)\r\n            questionLayout2.background = null\r\n            // Добавление TextInputEditText для ввода текста вопроса\r\n            intvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 2F)\r\n            intvQuestion2.hint = \"your question\"\r\n            intvQuestion2.requestFocus()\r\n            val cursorDrawable = ContextCompat.getDrawable(requireContext(), R.drawable.cursor)\r\n            intvQuestion2.textCursorDrawable = cursorDrawable\r\n            questionLayout2.addView(intvQuestion2)\r\n\r\n            sumbolQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            tvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            intvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n\r\n            tvQuestion2.maxLines = 1\r\n            intvQuestion2.background = null\r\n\r\n            intvQuestion2.width = 30\r\n            // Добавление нового question_layout в layout\r\n            binding.layout.addView(questionLayout2)\r\n            questionLayout2 = LinearLayout(context)\r\n            sumbolQuestion2 = TextView(context)\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n\r\n            binding.rbTrue.setOnCheckedChangeListener { _, _ ->\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n\r\n            }\r\n\r\n            binding.rbLightQuestion.setOnCheckedChangeListener { _, _ ->\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n\r\n            numQuestion++\r\n        }\r\n\r\n        binding.tvEnd.setOnClickListener {\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n            tvQuestion2 = TextView(context)\r\n            intvQuestion2.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(\r\n                    s: CharSequence?,\r\n                    start: Int,\r\n                    count: Int,\r\n                    after: Int\r\n                ) {\r\n                    // вызывается перед изменением текста в поле\r\n                }\r\n\r\n                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                    nameQuestion = \"\"\r\n                    nameQuestion = s.toString()\r\n                    Log.d(\"adasfgdrh\", \"Текст изменился: $s\")\r\n                }\r\n\r\n                override fun afterTextChanged(s: Editable?) {\r\n                    // вызывается после изменения текста в поле\r\n                }\r\n            })\r\n\r\n            if (numQuestion != 0) {\r\n                getLanguage(languageIdentifier, nameQuestion) { lang ->\r\n\r\n                            question.add(\r\n                                QuestionEntity(\r\n                                    null,\r\n                                    numQuestion,\r\n                                    nameQuestion,\r\n                                    getTextTrue(binding.rbTrue).toBoolean(),\r\n                                    getTypeText(binding.rbLightQuestion).toBoolean(),\r\n                                    -1,\r\n                                    lang,\r\n                                    mainActivityViewModel.getProfile().translater!!\r\n                                )\r\n                            )\r\n                }\r\n            } else {\r\n                nameQuiz = binding.intvQuiz.text.toString()\r\n            }\r\n\r\n            Log.d(\"adasfgdrh\", \"===question $question\")\r\n            // Создание нового question_layout\r\n\r\n\r\n            questionLayout2.id = View.generateViewId()\r\n            questionLayout2.orientation = LinearLayout.HORIZONTAL\r\n\r\n            tvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(500, LinearLayout.LayoutParams.WRAP_CONTENT)\r\n            tvQuestion2.text =\r\n                \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|${++numQuestion}\"\r\n\r\n            binding.rbLightQuestion.setOnCheckedChangeListener { _, _ ->\r\n                // Установка значения tvQuestion2 в зависимости от состояния кнопок\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n\r\n            binding.rbTrue.setOnCheckedChangeListener { _, _ ->\r\n                // Установка значения tvQuestion2 в зависимости от состояния кнопок\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n            questionLayout2.addView(tvQuestion2)\r\n\r\n            // Добавление TextView для символа\r\n            sumbolQuestion2.layoutParams = LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT\r\n            )\r\n            sumbolQuestion2.text = \" -$ \"\r\n            questionLayout2.addView(sumbolQuestion2)\r\n            questionLayout2.background = null\r\n            // Добавление TextInputEditText для ввода текста вопроса\r\n            intvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 2F)\r\n            intvQuestion2.hint = \"your question\"\r\n            intvQuestion2.requestFocus()\r\n            val cursorDrawable = ContextCompat.getDrawable(requireContext(), R.drawable.cursor)\r\n            intvQuestion2.textCursorDrawable = cursorDrawable\r\n            questionLayout2.addView(intvQuestion2)\r\n\r\n            sumbolQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            tvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            intvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n\r\n            tvQuestion2.maxLines = 1\r\n            intvQuestion2.background = null\r\n\r\n            intvQuestion2.width = 30\r\n\r\n            // Добавление нового question_layout в layout\r\n            binding.layout.addView(questionLayout2)\r\n            questionLayout2 = LinearLayout(context)\r\n            tvQuestion2 = TextView(context)\r\n            sumbolQuestion2 = TextView(context)\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n\r\n                mainActivityViewModel.insertQuiz(\r\n                    QuizEntity(\r\n                        null,\r\n                        nameQuiz,\r\n                        mainActivityViewModel.getProfile().name!!,\r\n                        TimeManager.getCurrentTime(),\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        null,\r\n                        1,\r\n                        0,\r\n                        0,\r\n                        false,\r\n                        tpovId ?: 0\r\n                    )\r\n                )\r\n\r\n                question.forEach {\r\n                    mainActivityViewModel.insertQuestion(\r\n                        it.copy(\r\n                            idQuiz = mainActivityViewModel.getIdQuizByNameQuiz(\r\n                                nameQuiz\r\n                            )\r\n                        )\r\n                    )\r\n            }\r\n        }\r\n\r\n        return builder.create()\r\n    }\r\n\r\n    private fun getLanguage(\r\n        languageIdentifier: LanguageIdentifier,\r\n        nameQuestion: String,\r\n        callback: (String) -> Unit\r\n    ) {\r\n        var lang = \"\"\r\n\r\n        languageIdentifier.identifyLanguage(nameQuestion)\r\n            .addOnSuccessListener { language ->\r\n                lang = language ?: \"und\"\r\n                if (lang == \"und\") {\r\n                    val userLocale: Locale = Locale.getDefault()\r\n                    val userLanguageCode: String = userLocale.language\r\n                    lang = userLanguageCode\r\n                }\r\n                callback(lang)\r\n            }\r\n            .addOnFailureListener {\r\n                val userLocale: Locale = Locale.getDefault()\r\n                val userLanguageCode: String = userLocale.language\r\n                lang = userLanguageCode\r\n                callback(lang)\r\n            }\r\n    }\r\n\r\n    private fun getTextTrue(rbTrue: RadioButton): String {\r\n        return if (rbTrue.isChecked) \"true\"\r\n        else \"false\"\r\n    }\r\n\r\n    private fun getTypeText(rbLightQuestion: RadioButton): String {\r\n        return if (rbLightQuestion.isChecked) \"false\"\r\n        else \"true\"\r\n    }\r\n\r\n    companion object {\r\n        const val NAME = \"name\"\r\n\r\n        fun newInstance(name: String): CreateQuestionDialogTerminal {\r\n            val fragment = CreateQuestionDialogTerminal()\r\n            val args = Bundle()\r\n            args.putString(\"name\", name)\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialogTerminal.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialogTerminal.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialogTerminal.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialogTerminal.kt	(date 1685299236217)
@@ -25,8 +25,10 @@
 import com.tpov.schoolquiz.data.database.entities.QuestionEntity
 import com.tpov.schoolquiz.data.database.entities.QuizEntity
 import com.tpov.schoolquiz.databinding.CreateQuestionDialogTerminalBinding
+import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId
 import com.tpov.schoolquiz.presentation.main.MainActivityViewModel
 import com.tpov.shoppinglist.utils.TimeManager
+import kotlinx.android.synthetic.main.profile_item.*
 import kotlinx.coroutines.InternalCoroutinesApi
 import java.util.*
 
@@ -100,7 +102,8 @@
                             getTypeText(binding.rbLightQuestion).toBoolean(),
                             -1,
                             lang,
-                            mainActivityViewModel.getProfileFBLiveData.value?.translater ?: -1
+                            mainActivityViewModel.getProfileFBLiveData.value?.translater ?: -1,
+                            getTpovId().toString()
                         )
                     )
                 }
@@ -200,7 +203,8 @@
                                     getTypeText(binding.rbLightQuestion).toBoolean(),
                                     -1,
                                     lang,
-                                    mainActivityViewModel.getProfile().translater!!
+                                    mainActivityViewModel.getProfile().translater!!,
+                                    getTpovId().toString()
                                 )
                             )
                 }
Index: app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.main\r\n\r\nimport android.Manifest.permission.READ_EXTERNAL_STORAGE\r\nimport android.Manifest.permission.WRITE_EXTERNAL_STORAGE\r\nimport android.animation.Animator\r\nimport android.animation.AnimatorListenerAdapter\r\nimport android.animation.ObjectAnimator\r\nimport android.animation.ValueAnimator\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ClipDrawable\r\nimport android.graphics.drawable.LayerDrawable\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.Spannable\r\nimport android.text.SpannableStringBuilder\r\nimport android.text.style.ForegroundColorSpan\r\nimport android.view.Gravity\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.view.animation.LinearInterpolator\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.gms.ads.interstitial.InterstitialAd\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.databinding.ActivityMainBinding\r\nimport com.tpov.schoolquiz.presentation.MainApp\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getCountStartApp\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.setCountStartApp\r\nimport com.tpov.schoolquiz.presentation.dowload.DownloadFragment\r\nimport com.tpov.schoolquiz.presentation.factory.ViewModelFactory\r\nimport com.tpov.schoolquiz.presentation.fragment.FragmentManager\r\nimport com.tpov.schoolquiz.presentation.main.info.InfoFragment\r\nimport com.tpov.schoolquiz.presentation.network.AutorisationFragment\r\nimport com.tpov.schoolquiz.presentation.network.chat.ChatFragment\r\nimport com.tpov.schoolquiz.presentation.network.event.EventFragment\r\nimport com.tpov.schoolquiz.presentation.network.profile.ProfileFragment\r\nimport com.tpov.schoolquiz.presentation.network.profile.UsersFragment\r\nimport com.tpov.schoolquiz.presentation.setting.SettingsFragment\r\nimport com.tpov.schoolquiz.presentation.shop.ShopFragment\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.*\r\nimport java.text.NumberFormat\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\n/**\r\n * This is the main screen of the application, it consists of a panel that shows how much spare is left.\r\n * questions of the day and a fragment that displays user and system questions\r\n */\r\n\r\n@InternalCoroutinesApi\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityMainBinding\r\n\r\n    private var iAd: InterstitialAd? = null\r\n    private var numQuestionNotDate = 0\r\n    private lateinit var viewModel: MainActivityViewModel\r\n    private var fr1 = 1\r\n    private var fr2 = 1\r\n\r\n    private val sharedPreferenceListener =\r\n        SharedPreferences.OnSharedPreferenceChangeListener { sharedPreferences, key ->\r\n            if (key == \"tpovId\") {\r\n                val newTpovId = sharedPreferences.getInt(key, -1)\r\n                viewModel.updateTpovId(newTpovId)\r\n            }\r\n        }\r\n\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n\r\n    private var recreateActivity: Boolean = false\r\n\r\n    private val component by lazy {\r\n        (application as MainApp).component\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        val sharedPref = this.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        sharedPref.unregisterOnSharedPreferenceChangeListener(sharedPreferenceListener)\r\n\r\n        timer?.cancel()\r\n        timer = null\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        component.inject(this)\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        log(\"onCreate()\")\r\n        // Remove the action bar\r\n        supportActionBar?.hide()\r\n        viewModel = ViewModelProvider(this, viewModelFactory)[MainActivityViewModel::class.java]\r\n\r\n        viewModel.init()\r\n\r\n        try {\r\n            setCountStartApp(getCountStartApp() + 1)\r\n        } catch (e: Exception) {\r\n            setCountStartApp(1)\r\n        }\r\n\r\n        val imageResGold = R.drawable.baseline_favorite_24_gold\r\n        val imageRes = R.drawable.baseline_favorite_24\r\n\r\n        val sharedPref = this.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        sharedPref.registerOnSharedPreferenceChangeListener(sharedPreferenceListener)\r\n\r\n        val filledDrawable = ContextCompat.getDrawable(this, imageRes)\r\n        val filledDrawableGold = ContextCompat.getDrawable(this, imageResGold)\r\n        val emptyDrawable = ContextCompat.getDrawable(this, R.drawable.baseline_favorite_24_empty)\r\n\r\n        val layers1 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layers2 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layers3 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layers4 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layers5 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layersGold = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawableGold, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layerDrawable1 = LayerDrawable(layers1)\r\n        val layerDrawable2 = LayerDrawable(layers2)\r\n        val layerDrawable3 = LayerDrawable(layers3)\r\n        val layerDrawable4 = LayerDrawable(layers4)\r\n        val layerDrawable5 = LayerDrawable(layers5)\r\n        val layerDrawableGold = LayerDrawable(layersGold)\r\n\r\n        layerDrawable1.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawable2.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawable3.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawable4.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawable5.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawableGold.setDrawableByLayerId(0, emptyDrawable)\r\n\r\n        layerDrawable1.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawable2.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawable3.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawable4.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawable5.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawableGold.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawableGold, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val imageViewGold = binding.pbLifeGold1\r\n        val imageViewLife1 = binding.pbLife1\r\n        val imageViewLife2 = binding.pbLife2\r\n        val imageViewLife3 = binding.pbLife3\r\n        val imageViewLife4 = binding.pbLife4\r\n        val imageViewLife5 = binding.pbLife5\r\n\r\n        layerDrawable1.setId(0, android.R.id.background)\r\n        layerDrawable2.setId(0, android.R.id.background)\r\n        layerDrawable3.setId(0, android.R.id.background)\r\n        layerDrawable4.setId(0, android.R.id.background)\r\n        layerDrawable5.setId(0, android.R.id.background)\r\n        layerDrawableGold.setId(0, android.R.id.background)\r\n        layerDrawable1.setId(1, android.R.id.progress)\r\n        layerDrawable2.setId(1, android.R.id.progress)\r\n        layerDrawable3.setId(1, android.R.id.progress)\r\n        layerDrawable4.setId(1, android.R.id.progress)\r\n        layerDrawable5.setId(1, android.R.id.progress)\r\n        layerDrawableGold.setId(1, android.R.id.progress)\r\n\r\n        imageViewGold.setImageDrawable(layerDrawableGold)\r\n        imageViewLife1.setImageDrawable(layerDrawable1)\r\n        imageViewLife2.setImageDrawable(layerDrawable2)\r\n        imageViewLife3.setImageDrawable(layerDrawable3)\r\n        imageViewLife4.setImageDrawable(layerDrawable4)\r\n        imageViewLife5.setImageDrawable(layerDrawable5)\r\n\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                READ_EXTERNAL_STORAGE\r\n            ) == PackageManager.PERMISSION_GRANTED &&\r\n            ContextCompat.checkSelfPermission(\r\n                this,\r\n                WRITE_EXTERNAL_STORAGE\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            // Разрешения уже предоставлены, выполнить нужную функцию\r\n            binding.tvName.text = \"\"\r\n\r\n        } else {\r\n            // Разрешения не предоставлены, запросить их\r\n            requestStoragePermission()\r\n        }\r\n\r\n        viewModel.getProfileFBLiveData.observe(this) {\r\n            log(\"it: $it\")\r\n\r\n            var count = (it?.count ?: 0) * 100\r\n            layerDrawable1.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawable2.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawable3.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawable4.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawable5.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawableGold.findDrawableByLayerId(android.R.id.progress).level =\r\n                (it?.countGold ?: 0) * 100\r\n\r\n            if (it?.countGoldLife == 1) {\r\n                imageViewGold.visibility = View.VISIBLE\r\n            } else imageViewGold.visibility = View.GONE\r\n\r\n            when (it?.countLife) {\r\n                0, 1 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.GONE\r\n                    imageViewLife3.visibility = View.GONE\r\n                    imageViewLife4.visibility = View.GONE\r\n                    imageViewLife5.visibility = View.GONE\r\n                }\r\n\r\n                2 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.VISIBLE\r\n                    imageViewLife3.visibility = View.GONE\r\n                    imageViewLife4.visibility = View.GONE\r\n                    imageViewLife5.visibility = View.GONE\r\n                }\r\n\r\n                3 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.VISIBLE\r\n                    imageViewLife3.visibility = View.VISIBLE\r\n                    imageViewLife4.visibility = View.GONE\r\n                    imageViewLife5.visibility = View.GONE\r\n                }\r\n\r\n                4 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.VISIBLE\r\n                    imageViewLife3.visibility = View.VISIBLE\r\n                    imageViewLife4.visibility = View.VISIBLE\r\n                    imageViewLife5.visibility = View.GONE\r\n                }\r\n\r\n                5 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.VISIBLE\r\n                    imageViewLife3.visibility = View.VISIBLE\r\n                    imageViewLife4.visibility = View.VISIBLE\r\n                    imageViewLife5.visibility = View.VISIBLE\r\n                }\r\n            }\r\n            log(\"SharedPreferencesManager.getNick(): ${SharedPreferencesManager.getNick()}\")\r\n            log(\"it?.nickname: ${it?.nickname}\")\r\n            if (SharedPreferencesManager.getNick() != it?.nickname) {\r\n\r\n                showTextWithDelay(\r\n                    binding.tvName, try {\r\n                        \"${it?.nickname}  \\uD83E\\uDD47\\uD83E\\uDD48️\\uD83C\\uDFC6\\uD83C\\uDF97️\\uD83C\\uDF83\\uD83C\\uDF84\\uD83C\\uDF81\\uD83D\\uDCFB\\uD83C\\uDFA7\\uD83C\\uDF9E️\\uD83E\\uDE99\\uD83D\\uDCC0\\uD83D\\uDCB5❤️\"\r\n                    } catch (e: Exception) {\r\n                        \"\"\r\n                    }, 50\r\n                )\r\n\r\n            } else binding.tvName.text =\r\n                \"${it.nickname}  \\uD83E\\uDD47\\uD83E\\uDD48️\\uD83C\\uDFC6\\uD83C\\uDF97️\\uD83C\\uDF83\\uD83C\\uDF84\\uD83C\\uDF81\\uD83D\\uDCFB\\uD83C\\uDFA7\\uD83C\\uDF9E️\\uD83E\\uDE99\\uD83D\\uDCC0\\uD83D\\uDCB5❤️\"\r\n\r\n            val animationDuration = 3000L\r\n            animateValue(\r\n                binding.tvNolics,\r\n                SharedPreferencesManager.getNolic(),\r\n                it?.pointsNolics ?: 0,\r\n                animationDuration,\r\n                500\r\n            )\r\n\r\n            animateValue(\r\n                binding.tvGold,\r\n                SharedPreferencesManager.getGold(),\r\n                it?.pointsGold ?: 0,\r\n                animationDuration,\r\n                500\r\n            )\r\n\r\n            animateValueFloat(\r\n                binding.tvStars,\r\n                (SharedPreferencesManager.getSkill().toFloat() / 100_000f),\r\n                ((it?.pointsSkill?.toFloat())?.div(100_000f))?: 0f,\r\n                animationDuration,\r\n                500\r\n            )\r\n\r\n            animateValue(\r\n                binding.tvCountPremiun,\r\n                TimeManager.getDaysBetweenDates(\r\n                    SharedPreferencesManager.getPremium(),\r\n                    TimeManager.getCurrentTime()\r\n                )?.toInt() ?: 0,\r\n                TimeManager.getDaysBetweenDates(\r\n                    it?.datePremium ?: \"\",\r\n                    TimeManager.getCurrentTime()\r\n                )\r\n                    ?.toInt() ?: 0,\r\n                animationDuration,\r\n                500\r\n            )\r\n            SharedPreferencesManager.setProfile(\r\n                it?.pointsSkill ?: 0,\r\n                it?.pointsNolics ?: 0,\r\n                it?.pointsGold ?: 0,\r\n                it?.datePremium ?: \"\",\r\n                it?.nickname ?: \"\"\r\n            )\r\n        }\r\n\r\n        setButtonNavListener()\r\n        numQuestionNotDate = intent.getIntExtra(NUM_QUESTION_NOT_NUL, 0)\r\n\r\n        FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n        SetItemMenu.setHomeMenu(binding, 1, this)\r\n\r\n        loadNumQuestionNotDate()\r\n\r\n        binding.drawerLayout.addDrawerListener(object : DrawerLayout.DrawerListener {\r\n            override fun onDrawerSlide(drawerView: View, slideOffset: Float) {\r\n                // Вычисляем на сколько нужно сдвинуть элемент LinearLayout\r\n                val slideX = drawerView.width * slideOffset\r\n                binding.cv.translationX = slideX\r\n            }\r\n\r\n            override fun onDrawerOpened(drawerView: View) {\r\n                // Вызывается при открытии шторки\r\n            }\r\n\r\n            override fun onDrawerClosed(drawerView: View) {\r\n                // Вызывается при закрытии шторки\r\n            }\r\n\r\n            override fun onDrawerStateChanged(newState: Int) {\r\n                // Вызывается при изменении состояния шторки\r\n            }\r\n        })\r\n\r\n        listenerDrawer()\r\n        val imvNolics = binding.imvNolics\r\n        val imvStars = binding.imvStars\r\n        val imvGold = binding.imvGold\r\n        val imvPremium = binding.imvPremiun\r\n\r\n        SetItemMenu.setHomeMenu(binding, fr2, this)\r\n\r\n        val yRotateAnimationDuration = 1000\r\n        val repeatDelay = 6000L // Задержка между повторениями (1 минута)\r\n        var initialDelay = 1000L // Начальная задержка перед запуском анимации\r\n        var addInitialDelay = 250L\r\n\r\n\r\n        showTextWithDelay(binding.tvPbLoad, \"Соединение с сервером...\", 50)\r\n\r\n        startAnimationWithRepeat(imvStars, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvNolics, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife1,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife2,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife3,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife4,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife5,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imageViewGold, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvGold, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvPremium, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n\r\n        viewModel.tpovIdLiveData.value = getTpovId()\r\n\r\n        createTimer()\r\n    }\r\n\r\n    private var timer: Timer? = null\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun createTimer() {\r\n        timer = Timer()\r\n        val task = object : TimerTask() {\r\n            override fun run() {\r\n                updateProfileCount()\r\n            }\r\n        }\r\n        val delay = 0L // Delay before the timer starts executing the task (in milliseconds)\r\n        val period =\r\n            100_000L // Interval between consecutive executions of the task (in milliseconds)\r\n\r\n        // Schedule the task to run every minute, starting after the specified delay\r\n        timer?.scheduleAtFixedRate(task, delay, period)\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun updateProfileCount() {\r\n        try {\r\n                    viewModel.updateProfileUseCase(\r\n                        viewModel.getProfile().copy(\r\n                            count = calcCount(\r\n                                viewModel.getProfileCount(),\r\n                                viewModel.getProfileCountLife(),\r\n                                viewModel.getProfileDateCloseAp()\r\n                            ),\r\n                            dateCloseApp = TimeManager.getCurrentTime()\r\n                        )\r\n                    )\r\n        } catch (e: Exception) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun calcCount(count: Int?, countLife: Int?, dateCloseApp: String?): Int {\r\n        val countSecTime =\r\n            TimeManager.getSecondBetweenDates(dateCloseApp ?: \"0\", TimeManager.getCurrentTime())\r\n        val calcCount = countSecTime?.times(0.025)\r\n\r\n        val calcAllCount = count?.let { calcCount?.plus(it)?.toInt() }\r\n\r\n        log(\"calcAllCount: $calcAllCount\")\r\n        return if (getMaxCount(countLife) < calcAllCount!!) getMaxCount(countLife)\r\n        else calcAllCount\r\n\r\n    }\r\n\r\n    private fun getMaxCount(countLife: Int?): Int {\r\n        return when (countLife) {\r\n            1 -> 100\r\n            2 -> 200\r\n            3 -> 300\r\n            4 -> 400\r\n            5 -> 500\r\n            else -> 0\r\n        }\r\n    }\r\n\r\n\r\n    private fun animateValue(\r\n        textView: TextView,\r\n        startValue: Int,\r\n        endValue: Int,\r\n        duration: Long,\r\n        startDelay: Long\r\n    ) {\r\n        val valueAnimator = ValueAnimator.ofInt(startValue, endValue).apply {\r\n            setDuration(duration)\r\n            setStartDelay(startDelay)\r\n            interpolator = LinearInterpolator()\r\n        }\r\n        valueAnimator.addUpdateListener { animation ->\r\n            textView.text = NumberFormat.getIntegerInstance().format(animation.animatedValue)\r\n        }\r\n        valueAnimator.start()\r\n    }\r\n\r\n    private fun animateValueFloat(\r\n        textView: TextView,\r\n        startValue: Float,\r\n        endValue: Float,\r\n        duration: Long,\r\n        startDelay: Long\r\n    ) {\r\n        val valueAnimator = ValueAnimator.ofFloat(startValue, endValue).apply {\r\n            setDuration(duration)\r\n            setStartDelay(startDelay)\r\n            interpolator = LinearInterpolator()\r\n        }\r\n        valueAnimator.addUpdateListener { animation ->\r\n            textView.text = String.format(\"%.1f\", animation.animatedValue)\r\n        }\r\n        valueAnimator.start()\r\n    }\r\n\r\n    private fun showTextWithDelay(textView: TextView, text: String, delayInMillis: Long) {\r\n        CoroutineScope(Dispatchers.Main).launch {\r\n            val spannableText = SpannableStringBuilder()\r\n            for (char in text) {\r\n                val start = spannableText.length\r\n                spannableText.append(char.toString())\r\n                spannableText.setSpan(\r\n                    ForegroundColorSpan(Color.WHITE),\r\n                    start,\r\n                    start + 1,\r\n                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE\r\n                )\r\n                textView.text = spannableText\r\n                delay(delayInMillis)\r\n\r\n                // Возвращаем цвет буквы к исходному (черный в данном случае)\r\n                spannableText.setSpan(\r\n                    ForegroundColorSpan(Color.BLACK),\r\n                    start,\r\n                    start + 1,\r\n                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE\r\n                )\r\n                textView.text = spannableText\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun startAnimationWithRepeat(\r\n        imageView: ImageView,\r\n        duration: Int,\r\n        initialDelay: Long,\r\n        repeatDelay: Long\r\n    ) {\r\n        val animator = ObjectAnimator.ofFloat(imageView, \"rotationY\", 0f, 360f).apply {\r\n            this.duration = duration.toLong()\r\n        }\r\n\r\n        animator.addListener(object : AnimatorListenerAdapter() {\r\n            override fun onAnimationEnd(animation: Animator) {\r\n                animation.removeListener(this)\r\n                imageView.postDelayed({\r\n                    animation.addListener(this)\r\n                    animation.start()\r\n                }, repeatDelay)\r\n            }\r\n        })\r\n\r\n        imageView.postDelayed({\r\n            animator.start()\r\n        }, initialDelay)\r\n    }\r\n\r\n    // Использование функции в вашем коде\r\n    override fun onPrepareOptionsMenu(menu: Menu): Boolean {\r\n        return super.onPrepareOptionsMenu(menu)\r\n    }\r\n\r\n    private fun listenerDrawer() {\r\n\r\n        log(\"fun listenerDrawer()\")\r\n\r\n        binding.navigationView.setNavigationItemSelectedListener { menuItem ->\r\n\r\n            binding.drawerLayout.closeDrawer(GravityCompat.START)\r\n            // ваш код обработки нажатия на элемент меню\r\n\r\n            log(\"listenerDrawer() menuItem: ${menuItem.toString()}\")\r\n            when (menuItem.toString()) {\r\n                resources.getString(R.string.nav_chat) -> {\r\n                    FragmentManager.setFragment(ChatFragment.newInstance(), this)\r\n                    SetItemMenu.setNetworkMenu(binding, 3, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_downloads) -> {\r\n                    FragmentManager.setFragment(DownloadFragment(), this)\r\n                    SetItemMenu.setHomeMenu(\r\n                        binding,\r\n                        4,\r\n                        this\r\n                    ) // Используйте подходящий номер пункта меню\r\n                }\r\n\r\n                resources.getString(R.string.nav_enter) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 10, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_exit) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 11, this)\r\n                    FirebaseAuth.getInstance().signOut()\r\n                }\r\n\r\n                resources.getString(R.string.nav_global) -> {\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(5), this)\r\n                    SetItemMenu.setNetworkMenu(binding, 8, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_friends) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 9, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_home) -> {\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_leaders) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 11, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_massages) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 5, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_my_quiz) -> {\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(1), this)\r\n                    SetItemMenu.setHomeMenu(binding, 2, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_news) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 7, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_players) -> {\r\n                    FragmentManager.setFragment(UsersFragment.newInstance(), this)\r\n                    SetItemMenu.setNetworkMenu(binding, 6, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_reports) -> {\r\n\r\n                }\r\n\r\n                resources.getString(R.string.nav_task) -> {\r\n                    FragmentManager.setFragment(EventFragment.newInstance(), this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_settings) -> {\r\n                    FragmentManager.setFragment(SettingsFragment.newInstance(), this)\r\n                }\r\n\r\n            }\r\n\r\n            binding.navigationView.inflateMenu(R.menu.navigation_manu)\r\n            true // не забудьте вернуть значение true, чтобы показать, что событие было обработано\r\n\r\n        }\r\n    }\r\n\r\n    private fun requestStoragePermission() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE),\r\n            REQUEST_CODE_STORAGE_PERMISSION\r\n        )\r\n    }\r\n\r\n    //Окраживаем квадратики в красный и зеленый в зависимости сколько осталось запасных вопросов-дня\r\n    private fun loadNumQuestionNotDate() = with(binding) {\r\n\r\n        if (numQuestionNotDate > 0) textView10.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 1) textView9.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 2) textView8.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 3) textView7.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 4) textView6.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 5) textView5.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 6) textView4.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 7) textView3.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 8) textView2.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 9) textView.setBackgroundResource(R.color.num_chack_norice_green)\r\n    }\r\n\r\n    fun replaceFragment(fragment: Fragment) {\r\n        val fragmentManager = supportFragmentManager\r\n        val transaction = fragmentManager.beginTransaction()\r\n        transaction.replace(R.id.title_fragment, fragment)\r\n        transaction.addToBackStack(null)\r\n        transaction.commit()\r\n\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n\r\n        if (requestCode == REQUEST_CODE_STORAGE_PERMISSION) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED &&\r\n                grantResults[1] == PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                // Разрешения получены, выполнить нужную функцию\r\n                viewModel =\r\n                    ViewModelProvider(this, viewModelFactory)[MainActivityViewModel::class.java]\r\n                viewModel.init()\r\n            } else {\r\n                // Разрешения не получены, вывести сообщение об ошибке\r\n                Toast.makeText(\r\n                    this,\r\n                    \"Storage permission is required to use this app\",\r\n                    Toast.LENGTH_LONG\r\n                ).show()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun setVisibleMenu(itemId: MenuItem) {\r\n\r\n        log(\"fun setVisibleMenu()\")\r\n        log(\"setVisibleMenu() itemId.itemId = ${itemId}\")\r\n        when (itemId.itemId) {\r\n\r\n            R.id.menu_home -> {\r\n                if (fr1 != 1) {\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                    fr1 = 1\r\n                }\r\n            }\r\n\r\n            R.id.menu_adb -> {\r\n                if (fr1 != 2) {\r\n\r\n                    fr1 = 2\r\n                }\r\n            }\r\n\r\n            R.id.menu_settings -> {\r\n                if (fr1 != 3) {\r\n\r\n                    fr1 = 3\r\n                }\r\n            }\r\n\r\n            R.id.menu_info -> {\r\n                if (fr1 != 4) {\r\n\r\n                    fr1 = 4\r\n                }\r\n            }\r\n\r\n            R.id.menu_network -> {\r\n                if (fr1 != 5) {\r\n                    SetItemMenu.setNetworkMenu(binding, 1, this)\r\n                    fr1 = 5\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setButtonNavListener() {\r\n\r\n        log(\"fun setButtonNavListener()\")\r\n        binding.bNav.setOnItemSelectedListener {\r\n\r\n            setVisibleMenu(it)\r\n            when (it.itemId) {\r\n\r\n                R.id.menu_home -> {\r\n\r\n                    log(\"setButtonNavListener() menu_home\")\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                }\r\n\r\n                R.id.menu_adb -> {\r\n                    FragmentManager.setFragment(ShopFragment.newInstance(), this)\r\n                }\r\n\r\n                R.id.menu_settings -> {\r\n                    log(\"setButtonNavListener() menu_settings\")\r\n                }\r\n\r\n                R.id.menu_info -> {\r\n                    log(\"setButtonNavListener() menu_info\")\r\n                    FragmentManager.setFragment(InfoFragment.newInstance(), this)\r\n                }\r\n\r\n                R.id.menu_network -> {\r\n\r\n                    log(\"setButtonNavListener() menu_network\")\r\n                    val user = FirebaseAuth.getInstance()\r\n                    if (user.currentUser != null) {\r\n                        log(\"setButtonNavListener() Аккаунт зареган\")\r\n                        Toast.makeText(this@MainActivity, \"Аккаунт найден\", Toast.LENGTH_LONG)\r\n                            .show()\r\n\r\n                        FragmentManager.setFragment(ProfileFragment.newInstance(), this)\r\n                    } else {\r\n\r\n                        log(\"setButtonNavListener() Аккаунт не зареган\")\r\n                        Toast.makeText(\r\n                            this@MainActivity,\r\n                            \"Аккаунт не найден, авторизуйтесь.\",\r\n                            Toast.LENGTH_LONG\r\n                        ).show()\r\n                        FragmentManager.setFragment(AutorisationFragment.newInstance(), this)\r\n                    }\r\n                }\r\n            }\r\n            true\r\n        }\r\n    }\r\n\r\n    fun log(massage: String) {\r\n        Logcat.log(massage, \"MainActivity\", Logcat.LOG_ACTIVITY)\r\n    }\r\n\r\n    companion object {\r\n\r\n        const val NUM_QUESTION_NOT_NUL = \"num_question_not_nul\"\r\n        const val SHOP_LIST = \"shop_list\"\r\n        const val REQUEST_CODE_STORAGE_PERMISSION = 1001\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivity.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivity.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivity.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivity.kt	(date 1685299236225)
@@ -70,7 +70,7 @@
     private lateinit var binding: ActivityMainBinding
 
     private var iAd: InterstitialAd? = null
-    private var numQuestionNotDate = 0
+    private var numDayPrizeBox = 0
     private lateinit var viewModel: MainActivityViewModel
     private var fr1 = 1
     private var fr2 = 1
@@ -237,6 +237,7 @@
             requestStoragePermission()
         }
 
+        numDayPrizeBox = viewModel.synthPrizeBoxDay(viewModel.getProfile()) ?: 0
         viewModel.getProfileFBLiveData.observe(this) {
             log("it: $it")
 
@@ -363,12 +364,11 @@
         }
 
         setButtonNavListener()
-        numQuestionNotDate = intent.getIntExtra(NUM_QUESTION_NOT_NUL, 0)
 
         FragmentManager.setFragment(FragmentMain.newInstance(8), this)
         SetItemMenu.setHomeMenu(binding, 1, this)
 
-        loadNumQuestionNotDate()
+        loadNumBoxDay()
 
         binding.drawerLayout.addDrawerListener(object : DrawerLayout.DrawerListener {
             override fun onDrawerSlide(drawerView: View, slideOffset: Float) {
@@ -723,18 +723,18 @@
     }
 
     //Окраживаем квадратики в красный и зеленый в зависимости сколько осталось запасных вопросов-дня
-    private fun loadNumQuestionNotDate() = with(binding) {
+    private fun loadNumBoxDay() = with(binding) {
 
-        if (numQuestionNotDate > 0) textView10.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 1) textView9.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 2) textView8.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 3) textView7.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 4) textView6.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 5) textView5.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 6) textView4.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 7) textView3.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 8) textView2.setBackgroundResource(R.color.num_chack_norice_green)
-        if (numQuestionNotDate > 9) textView.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 0) textView10.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 1) textView9.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 2) textView8.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 3) textView7.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 4) textView6.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 5) textView5.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 6) textView4.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 7) textView3.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 8) textView2.setBackgroundResource(R.color.num_chack_norice_green)
+        if (numDayPrizeBox > 9) textView.setBackgroundResource(R.color.num_chack_norice_green)
     }
 
     fun replaceFragment(fragment: Fragment) {
@@ -876,12 +876,7 @@
 
     companion object {
 
-        const val NUM_QUESTION_NOT_NUL = "num_question_not_nul"
-        const val SHOP_LIST = "shop_list"
         const val REQUEST_CODE_STORAGE_PERMISSION = 1001
-
     }
-
-
 }
 
Index: app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.main\r\n\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.tpov.schoolquiz.databinding.TitleFragmentBinding\r\nimport com.tpov.schoolquiz.databinding.TitleFragmentBinding.inflate\r\nimport com.tpov.schoolquiz.presentation.MainApp\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.dialog.CreateQuestionDialog\r\nimport com.tpov.schoolquiz.presentation.factory.ViewModelFactory\r\nimport com.tpov.schoolquiz.presentation.fragment.BaseFragment\r\nimport com.tpov.schoolquiz.presentation.network.event.TranslateQuestionFragment\r\nimport com.tpov.schoolquiz.presentation.question.QuestionActivity\r\nimport com.tpov.schoolquiz.presentation.question.QuestionActivity.Companion.HARD_QUESTION\r\nimport com.tpov.schoolquiz.presentation.question.QuestionActivity.Companion.ID_QUIZ\r\nimport com.tpov.schoolquiz.presentation.question.QuestionActivity.Companion.NAME_USER\r\nimport kotlinx.android.synthetic.main.title_fragment.*\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport javax.inject.Inject\r\n\r\n@InternalCoroutinesApi\r\nclass FragmentMain : BaseFragment(), MainActivityAdapter.Listener {\r\n\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    fun log(m: String) {\r\n        Logcat.log(m, \"Main\", Logcat.LOG_FRAGMENT)\r\n    }\r\n\r\n    private lateinit var mainViewModel: MainActivityViewModel\r\n\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n    private val component by lazy {\r\n        (requireActivity().application as MainApp).component\r\n    }\r\n\r\n    private var oldIdQuizEvent1 = 0\r\n\r\n    private lateinit var adapter: MainActivityAdapter\r\n\r\n    private lateinit var binding: TitleFragmentBinding\r\n    private var createQuiz = false\r\n\r\n    override fun onAttach(context: Context) {\r\n        component.inject(this)\r\n        super.onAttach(context)\r\n    }\r\n\r\n    override fun onClickNew(name: String, stars: Int) {\r\n\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        mainViewModel = ViewModelProvider(this, viewModelFactory)[MainActivityViewModel::class.java]\r\n\r\n        adapter = MainActivityAdapter(this, requireContext(), mainViewModel)\r\n        binding.rcView.layoutManager = LinearLayoutManager(activity)\r\n        binding.rcView.adapter = adapter\r\n        rcView.itemAnimator = RotateInItemAnimator()\r\n        // Обработка нажатия на кнопку удаления\r\n        adapter.onDeleteButtonClick = { quizEntity ->\r\n            // Ваш код для удаления или выполнения других действий с элементом\r\n            mainViewModel.deleteQuiz(quizEntity.itemId.toInt())\r\n        }\r\n        val isMyQuiz = arguments?.getInt(ARG_IS_MY_QUIZ, 1)\r\n\r\n        if (isMyQuiz == 1) binding.fabAddItem.visibility = View.VISIBLE\r\n        else binding.fabAddItem.visibility = View.GONE\r\n\r\n        mainViewModel.getEventLiveDataUseCase().observe(viewLifecycleOwner) { quizList ->\r\n            val filteredList = quizList.filter { it.event == isMyQuiz }\r\n            val sortedList = if (isMyQuiz == 5) {\r\n                filteredList.sortedBy { it.ratingPlayer }\r\n            } else {\r\n                filteredList\r\n            }\r\n            adapter.submitList(sortedList)\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        val fabAddItem = binding.fabAddItem\r\n        fabAddItem.setOnClickListener {\r\n            // Добавление нового элемента в список\r\n            val fragmentManager = activity?.supportFragmentManager\r\n            fragmentManager?.let {\r\n                val dialogFragment: CreateQuestionDialog =\r\n                    CreateQuestionDialog.newInstance(CreateQuestionDialog.NAME, -1)\r\n                dialogFragment.show(fragmentManager, \"create_question_dialog\")\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = inflate(inflater, container, false)\r\n        // binding.swipeRefreshLayout.setOnRefreshListener { reloadData() }\r\n        return binding.root\r\n    }\r\n\r\n    override fun deleteItem(id: Int) {\r\n        mainViewModel.deleteQuiz(id)\r\n    }\r\n\r\n    override fun onClick(id: Int, type: Boolean) {\r\n        if (mainViewModel.getProfileCount()!! < 33) Toast.makeText(\r\n            activity,\r\n            \"Недостаточно жизней. На прохождение квеста тратиться 30% жизни\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n        else {\r\n            mainViewModel.updateProfileUseCase(mainViewModel.getProfile().copy(count = mainViewModel.getProfileCount()!! - 33))\r\n            val intent = Intent(activity, QuestionActivity::class.java)\r\n            intent.putExtra(NAME_USER, \"user\")\r\n            intent.putExtra(ID_QUIZ, id)\r\n            intent.putExtra(HARD_QUESTION, type)\r\n            startActivityForResult(intent, REQUEST_CODE)\r\n        }\r\n    }\r\n\r\n    override fun editItem(id: Int) {\r\n        log(\"editItem: $id\")\r\n        val fragmentManager = activity?.supportFragmentManager\r\n        fragmentManager?.let {\r\n            val dialogFragment: CreateQuestionDialog =\r\n                CreateQuestionDialog.newInstance(CreateQuestionDialog.NAME, id)\r\n            dialogFragment.show(fragmentManager, \"create_question_dialog\")\r\n        }\r\n    }\r\n\r\n    override fun sendItem(id: Int) {\r\n        var quizEntity = mainViewModel.getQuizById(id)\r\n\r\n        mainViewModel.updateQuizUseCase(quizEntity.copy(showItemMenu = false))\r\n        mainViewModel.insertQuizEvent(quizEntity)\r\n        oldIdQuizEvent1 = quizEntity.id ?: 0\r\n        mainViewModel.getQuizLiveData().observe(this) { list ->\r\n            log(\"getQuizLiveData.observe\")\r\n            list.forEach { quiz ->\r\n                log(\r\n                    \"getQuizLiveData.observe question by id: ${\r\n                        mainViewModel.getQuestionListByIdQuiz(\r\n                            quiz.id ?: 0\r\n                        ).isNullOrEmpty()\r\n                    }\"\r\n                )\r\n                log(\r\n                    \"getQuizLiveData.observe question is empty: ${mainViewModel.getQuestionListByIdQuiz(quiz.id ?: 0)}\"\r\n                )\r\n                log(\"getQuizLiveData.observe quiz: ${quiz}\")\r\n                if (mainViewModel.getQuestionListByIdQuiz(quiz.id ?: 0).isNullOrEmpty()) {\r\n                    mainViewModel.getQuestionListByIdQuiz(oldIdQuizEvent1).forEach {\r\n                        mainViewModel.insertQuestion(\r\n                            it.copy(\r\n                                id = null,\r\n                                idQuiz = quiz.id ?: 0\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            var setQuestion = false\r\n            if (list.isEmpty()) setQuestion = true\r\n            list.forEach { item ->\r\n                if (item.id!! < 100) setQuestion = true\r\n            }\r\n            if (!setQuestion) mainViewModel.setQuestionsFB()\r\n        }\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (requestCode == REQUEST_CODE && resultCode == Activity.RESULT_OK) {\r\n            data?.let {\r\n                val translate = it.getBooleanExtra(\"translate\", false)\r\n                val idQuiz = it.getIntExtra(\"idQuiz\", 0)\r\n\r\n                if (translate) (requireActivity() as MainActivity).replaceFragment(\r\n                    TranslateQuestionFragment.newInstance(idQuiz, null)\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun reloadData() {\r\n        activity?.recreate()\r\n    }\r\n\r\n    companion object {\r\n\r\n        const val ARG_IS_MY_QUIZ = \"is_my_quiz\"\r\n        const val CREATE_QUIZ = \"\"\r\n        const val DELETE_QUIZ = \"deleteQuiz\"\r\n        const val SHARE_QUIZ = \"shareQuiz\"\r\n        const val REQUEST_CODE = 1\r\n\r\n        @JvmStatic\r\n        fun newInstance(idQuiz: Int): FragmentMain {\r\n            val args = Bundle()\r\n            args.putInt(ARG_IS_MY_QUIZ, idQuiz)\r\n            val fragment = FragmentMain()\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt	(date 1685299236231)
@@ -1,8 +1,10 @@
 package com.tpov.schoolquiz.presentation.main
 
 import android.app.Activity
+import android.app.AlertDialog
 import android.content.Context
 import android.content.Intent
+import android.graphics.Color
 import android.os.Bundle
 import android.view.LayoutInflater
 import android.view.View
@@ -10,6 +12,7 @@
 import android.widget.Toast
 import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.LinearLayoutManager
+import com.tpov.schoolquiz.R
 import com.tpov.schoolquiz.databinding.TitleFragmentBinding
 import com.tpov.schoolquiz.databinding.TitleFragmentBinding.inflate
 import com.tpov.schoolquiz.presentation.MainApp
@@ -78,6 +81,8 @@
         if (isMyQuiz == 1) binding.fabAddItem.visibility = View.VISIBLE
         else binding.fabAddItem.visibility = View.GONE
 
+
+
         mainViewModel.getEventLiveDataUseCase().observe(viewLifecycleOwner) { quizList ->
             val filteredList = quizList.filter { it.event == isMyQuiz }
             val sortedList = if (isMyQuiz == 5) {
@@ -118,20 +123,56 @@
     }
 
     override fun onClick(id: Int, type: Boolean) {
-        if (mainViewModel.getProfileCount()!! < 33) Toast.makeText(
-            activity,
-            "Недостаточно жизней. На прохождение квеста тратиться 30% жизни",
-            Toast.LENGTH_LONG
-        ).show()
-        else {
-            mainViewModel.updateProfileUseCase(mainViewModel.getProfile().copy(count = mainViewModel.getProfileCount()!! - 33))
-            val intent = Intent(activity, QuestionActivity::class.java)
-            intent.putExtra(NAME_USER, "user")
-            intent.putExtra(ID_QUIZ, id)
-            intent.putExtra(HARD_QUESTION, type)
-            startActivityForResult(intent, REQUEST_CODE)
+        log("onClick mainViewModel.getQuizById(id).event")
+        if (mainViewModel.getProfileCount()!! < 33) {
+            Toast.makeText(
+                activity,
+                "Недостаточно жизней. На прохождение квеста тратиться 30% жизни",
+                Toast.LENGTH_LONG
+            ).show()
+        } else {
+            if (mainViewModel.getQuizById(id).event == 5) {
+                val alertDialog = AlertDialog.Builder(activity)
+                    .setTitle("Попытка платная")
+                    .setMessage("В целях честной игры снимается плата.")
+                    .setPositiveButton("500 ноликов") { dialog, which ->
+                        mainViewModel.updateProfileUseCase(
+                            mainViewModel.getProfile().copy(count = mainViewModel.getProfileCount()!! - 33, pointsNolics = mainViewModel.getProfileNolic()!! - 500)
+                        )
+                        val intent = Intent(activity, QuestionActivity::class.java)
+                        intent.putExtra(NAME_USER, "user")
+                        intent.putExtra(ID_QUIZ, id)
+                        intent.putExtra(HARD_QUESTION, type)
+                        startActivityForResult(intent, REQUEST_CODE)
+                    }
+                    .setNegativeButton("Отмена", null)
+                    .create()
+
+                alertDialog.setOnShowListener { dialog ->
+                    val positiveButton = (dialog as AlertDialog).getButton(AlertDialog.BUTTON_POSITIVE)
+                    val negativeButton = dialog.getButton(AlertDialog.BUTTON_NEGATIVE)
+
+                    positiveButton.setTextColor(Color.WHITE)
+                    negativeButton.setTextColor(Color.YELLOW)
+
+                    dialog.window?.setBackgroundDrawableResource(R.color.design3_top_start)
+                }
+
+                alertDialog.show()
+
+            } else {
+                mainViewModel.updateProfileUseCase(
+                    mainViewModel.getProfile().copy(count = mainViewModel.getProfileCount()!! - 33)
+                )
+                val intent = Intent(activity, QuestionActivity::class.java)
+                intent.putExtra(NAME_USER, "user")
+                intent.putExtra(ID_QUIZ, id)
+                intent.putExtra(HARD_QUESTION, type)
+                startActivityForResult(intent, REQUEST_CODE)
+            }
         }
     }
+
 
     override fun editItem(id: Int) {
         log("editItem: $id")
@@ -192,7 +233,7 @@
                 val idQuiz = it.getIntExtra("idQuiz", 0)
 
                 if (translate) (requireActivity() as MainActivity).replaceFragment(
-                    TranslateQuestionFragment.newInstance(idQuiz, null)
+                    TranslateQuestionFragment.newInstance(idQuiz)
                 )
             }
         }
Index: app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.question\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.app.ActivityOptions\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.os.CountDownTimer\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.view.animation.Animation\r\nimport android.view.animation.AnimationUtils\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.dynamicanimation.animation.DynamicAnimation\r\nimport androidx.dynamicanimation.animation.SpringAnimation\r\nimport androidx.dynamicanimation.animation.SpringForce\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.tpov.schoolquiz.*\r\nimport com.tpov.schoolquiz.data.Services.MusicService\r\nimport com.tpov.schoolquiz.data.database.log\r\nimport com.tpov.schoolquiz.databinding.ActivityQuestionBinding\r\nimport com.tpov.schoolquiz.presentation.MainApp\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.updateProfile\r\nimport com.tpov.schoolquiz.presentation.factory.ViewModelFactory\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport javax.inject.Inject\r\nimport kotlin.math.floor\r\n\r\nprivate const val REQUEST_CODE_CHEAT = 0\r\n\r\n/**\r\n * This activity contains many variables that are needed to restore the session and the information processing logic.\r\n * High WTF/min\r\n * Refractoring incomplete\r\n * First, there is a check to see if the quest that the player wants to complete is not completed, if not,\r\n * then he goes through it from the beginning.\r\n * To save the session, many variables and encodings are used that are made from objects in one line,\r\n * this allows you to have the entire progress of the passage, save it and restore it.\r\n */\r\n@InternalCoroutinesApi\r\nclass QuestionActivity : AppCompatActivity() {\r\n\r\n    lateinit var viewModel: QuestionViewModel\r\n\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n\r\n    private val binding by lazy {\r\n        ActivityQuestionBinding.inflate(layoutInflater)\r\n    }\r\n    private val component by lazy {\r\n        (application as MainApp).component\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        component.inject(this)\r\n        super.onCreate(savedInstanceState)\r\n\r\n        updateProfile = false\r\n        setContentView(binding.root)\r\n        viewModel = ViewModelProvider(this, viewModelFactory)[QuestionViewModel::class.java]\r\n        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n\r\n        synthInputData()\r\n        viewModel.synthWithDB(this)\r\n        viewModel.shouldCloseLiveData.observe(this) {\r\n            if (it) {\r\n                val resultIntent = Intent()\r\n                resultIntent.putExtra(\"translate\", viewModel.resultTranslate)\r\n                resultIntent.putExtra(\"idQuiz\", viewModel.idQuiz)\r\n\r\n                setResult(Activity.RESULT_OK, resultIntent)\r\n                finish()\r\n            }\r\n        }\r\n        insertQuestionsNewEvent()\r\n        binding.apply {\r\n            if (viewModel.hardQuestion) {\r\n                cheatButton.visibility = View.GONE\r\n            }\r\n\r\n            trueButton.setOnClickListener {\r\n                nextButton()\r\n                viewModel.trueButton()\r\n                setStateTimer(true)\r\n                setVisibleButtonsNext()\r\n            }\r\n\r\n            falseButton.setOnClickListener {\r\n                nextButton()\r\n                viewModel.falseButton()\r\n                setStateTimer(true)\r\n                setVisibleButtonsNext()\r\n\r\n            }\r\n\r\n            cheatButton.setOnClickListener { view ->\r\n                val answerIsTrue = viewModel.questionListThis[viewModel.currentIndex].answerQuestion\r\n                val intent = CheatActivity.newIntent(this@QuestionActivity, answerIsTrue)\r\n\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    val options =\r\n                        ActivityOptions.makeClipRevealAnimation(view, 0, 0, view.width, view.height)\r\n                    startActivityForResult(intent, REQUEST_CODE_CHEAT, options.toBundle())\r\n                } else {\r\n                    startActivityForResult(intent, REQUEST_CODE_CHEAT)\r\n                }\r\n            }\r\n\r\n\r\n            prefButton.setOnClickListener {\r\n                setVisibleButtonsPref()\r\n                prefButton()\r\n            }\r\n            nextButton.setOnClickListener {\r\n                setVisibleButtonsNext()\r\n                nextButton()\r\n            }\r\n\r\n            log(\"DSEFSE, currentIndex: ${viewModel.currentIndex}\")\r\n            log(\"DSEFSE, nameQuestion: ${viewModel.questionListThis}\")\r\n\r\n            try {\r\n                binding.questionTextView.text =\r\n                    viewModel.questionListThis[viewModel.currentIndex].nameQuestion\r\n            } catch (e: Exception) {\r\n                Toast.makeText(this@QuestionActivity, \"Вопросы не были загружены, возможно произошла ошибка\", Toast.LENGTH_LONG).show()\r\n            }\r\n        }\r\n        actionBarSettings()\r\n        startService(Intent(this, MusicService::class.java))\r\n        startTimer()\r\n        visibleCheatButton(viewModel.hardQuestion)\r\n    }\r\n\r\n    private fun synthInputData() {\r\n        viewModel.userName = intent.getStringExtra(NAME_USER) ?: \"user\"\r\n        viewModel.idQuiz = intent.getIntExtra(ID_QUIZ, 0)\r\n        viewModel.hardQuestion = intent.getBooleanExtra(HARD_QUESTION, false)\r\n        log(\"fun synthInputData userName: ${viewModel.userName}, idQuiz: ${viewModel.idQuiz}, hardQuestion: ${viewModel.hardQuestion}\")\r\n    }\r\n\r\n    private fun prefButton() {\r\n        if (viewModel.currentIndex == 0) springAnim(false)\r\n        else moveToPref()\r\n    }\r\n\r\n    private fun nextButton() {\r\n        if (viewModel.currentIndex == viewModel.numQuestion - 1) springAnim(true)\r\n        else moveToNext()\r\n    }\r\n\r\n    private fun setStateTimer(nextQuestion: Boolean) {\r\n\r\n        log(\"setStateTimer currentIndex: ${viewModel.codeAnswer[viewModel.currentIndex]}\")\r\n\r\n        try {\r\n            if (nextQuestion) {\r\n                log(\"setStateTimer currentIndex + 1: ${viewModel.codeAnswer[viewModel.currentIndex + 1]}\")\r\n\r\n                if (viewModel.codeAnswer[viewModel.currentIndex + 1] == '0') {\r\n                    startTimer()\r\n                } else viewModel.timer?.cancel()\r\n\r\n            } else {\r\n                if (viewModel.codeAnswer[viewModel.currentIndex - 1] == '0') {\r\n\r\n                    log(\"setStateTimer currentIndex - 1: ${viewModel.codeAnswer[viewModel.currentIndex - 1]}\")\r\n                    startTimer()\r\n                } else viewModel.timer?.cancel()\r\n            }\r\n        } catch (e: Exception) {\r\n            viewModel.timer?.cancel()\r\n        }\r\n    }\r\n\r\n    private fun startTimer() {\r\n        viewModel.timer?.cancel()\r\n        viewModel.timer = object : CountDownTimer(\r\n            viewModel.getCurrentTimer(viewModel.hardQuestion) * QuestionViewModel.MILLIS_IN_SECONDS,\r\n            QuestionViewModel.MILLIS_IN_SECONDS\r\n        ) {\r\n            override fun onTick(millisUntilFinished: Long) {\r\n                binding.tvTimer.text = viewModel.formatTime(millisUntilFinished)\r\n                if (viewModel.formatTime(millisUntilFinished)[3] == '0' && viewModel.formatTime(\r\n                        millisUntilFinished\r\n                    )[4] == '3'\r\n                ) anim321(3) //Анимация для цифры 3\r\n                if (viewModel.formatTime(millisUntilFinished)[3] == '0' && viewModel.formatTime(\r\n                        millisUntilFinished\r\n                    )[4] == '2'\r\n                ) anim321(2) //2\r\n                if (viewModel.formatTime(millisUntilFinished)[3] == '0' && viewModel.formatTime(\r\n                        millisUntilFinished\r\n                    )[4] == '1'\r\n                ) anim321(1) //1\r\n            }\r\n\r\n            override fun onFinish() {\r\n                if ((Math.random() * 2).toInt() > 1) {\r\n                    setStateTimer(true)\r\n                    setVisibleButtonsNext()\r\n                    viewModel.trueButton()\r\n                } else {\r\n                    setStateTimer(false)\r\n                    setVisibleButtonsNext()\r\n                    viewModel.falseButton()\r\n                }\r\n            }\r\n        }\r\n        viewModel.timer?.start()\r\n    }\r\n\r\n    private fun setVisibleButtonsNext() { //Стоит учитывать, что в момент вызова этой функции пользователь находится все еще на том вопросе\r\n\r\n\r\n    }\r\n\r\n    private fun setVisibleButtonsPref() {\r\n        setBlockButton(viewModel.codeAnswer[viewModel.currentIndex - 1] == '0')\r\n    }\r\n\r\n    private fun visibleCheatButton(it: Boolean) {\r\n        binding.cheatButton.isClickable = it\r\n        binding.cheatButton.isEnabled = it\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        stopService(Intent(this, MusicService::class.java))\r\n    }\r\n\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\r\n        menuInflater.inflate(R.menu.menu_main_activity, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> finish()\r\n\r\n            R.id.item_list_answer -> {\r\n                if (!viewModel.hardQuestion) {\r\n                    val questionActivityIntent = Intent(this, QuestionListActivity::class.java)\r\n\r\n                    ActivityOptions.makeClipRevealAnimation(\r\n                        View(this),\r\n                        0,\r\n                        0,\r\n                        View(this).width,\r\n                        View(this).height\r\n                    )\r\n\r\n                    questionActivityIntent.putExtra(\r\n                        EXTRA_CURRENT_INDEX,\r\n                        viewModel.currentIndex\r\n                    )   //Output\r\n                    questionActivityIntent.putExtra(EXTRA_CODE_ANSWER, viewModel.codeAnswer)\r\n                    questionActivityIntent.putExtra(EXTRA_CODE_ID_USER, viewModel.idQuiz)\r\n                    startActivityForResult(questionActivityIntent, UPDATE_CURRENT_INDEX)\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    private fun insertQuestionsNewEvent() {\r\n\r\n        viewModel.getQuizLiveDataUseCase.getQuizUseCase(viewModel.tpovId.toInt())\r\n            .observe(this@QuestionActivity) { list ->\r\n\r\n                list.forEach { quiz ->\r\n\r\n                    if (viewModel.getQuestionByIdQuizUseCase(quiz.id!!).isNullOrEmpty()) {\r\n                        viewModel.getQuestionByIdQuizUseCase(quiz.id!!).forEach {\r\n                            viewModel.insertQuestionUseCase(it.copy(id = null, idQuiz = quiz.id!!))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n    private fun springAnim(next: Boolean) = with(binding) {\r\n        val START_VELOCITY = if (next) - 5000f\r\n        else 5000f\r\n\r\n        var springAnimation = SpringAnimation(questionTextView, DynamicAnimation.X)\r\n        var springForce = SpringForce()\r\n        springForce.finalPosition = questionTextView.x\r\n        springForce.dampingRatio = SpringForce.DAMPING_RATIO_HIGH_BOUNCY\r\n        springForce.stiffness = SpringForce.STIFFNESS_HIGH\r\n\r\n        springAnimation.spring = springForce\r\n        springAnimation.setStartVelocity(START_VELOCITY)\r\n        springAnimation.start()\r\n    }\r\n\r\n    private fun actionBarSettings() {       //Кнопка назад в баре\r\n        val ab = supportActionBar\r\n        ab?.setDisplayHomeAsUpEnabled(true)\r\n    }\r\n\r\n    @SuppressLint(\"ResourceType\")\r\n    private fun anim321(num: Int) = with(binding) {\r\n        tv321.text = num.toString()\r\n\r\n        var anim = AnimationUtils.loadAnimation(this@QuestionActivity, R.anim.time_3_2_1)\r\n        anim.setAnimationListener(object : Animation.AnimationListener {\r\n            override fun onAnimationStart(p0: Animation?) {\r\n                tv321.visibility = View.VISIBLE\r\n            }\r\n\r\n            override fun onAnimationEnd(p0: Animation?) {\r\n                tv321.visibility = View.GONE\r\n            }\r\n\r\n            override fun onAnimationRepeat(p0: Animation?) {\r\n            }\r\n        })\r\n        tv321.startAnimation(anim)\r\n    }\r\n\r\n    @Deprecated(\"Deprecated in Java\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (data == null) {\r\n            return\r\n        }\r\n        if (requestCode == REQUEST_CODE_CHEAT) {\r\n\r\n                    if (data.getBooleanExtra(\r\n                            EXTRA_ANSWER_SHOW,\r\n                            false\r\n                        )\r\n                    ) viewModel.updateProfileUseCase(\r\n                        viewModel.getProfileUseCase(getTpovId()).copy(\r\n                            countLife = viewModel.getProfileUseCase(\r\n                                getTpovId()\r\n                            ).countLife\r\n                        )\r\n                    )\r\n        } else if (requestCode == UPDATE_CURRENT_INDEX) {\r\n            viewModel.currentIndex = data.getIntExtra(EXTRA_UPDATE_CURRENT_INDEX, 0)\r\n\r\n            //Идея такая, после того как пользователь выбрал любой квест, мы этот выбор пытаемся сделать эквиваленту нажатия на кнопки вперед или назад\r\n            if (data.getIntExtra(EXTRA_UPDATE_CURRENT_INDEX, 0) > viewModel.currentIndex) {\r\n                viewModel.currentIndex = data.getIntExtra(EXTRA_UPDATE_CURRENT_INDEX, 0) - 1\r\n                setVisibleButtonsNext()\r\n                setStateTimer(true)\r\n                nextButton()\r\n\r\n            } else {\r\n                viewModel.currentIndex = data.getIntExtra(EXTRA_UPDATE_CURRENT_INDEX, 0) + 1\r\n                setVisibleButtonsPref()\r\n                setStateTimer(false)\r\n                prefButton()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setBlockButton(state: Boolean) = with(binding) {\r\n        falseButton.isEnabled = state\r\n        falseButton.isClickable = state\r\n        trueButton.isEnabled = state\r\n        trueButton.isClickable = state\r\n    }\r\n\r\n    //Тут уже обновленные параметры\r\n    fun updateTextQuestion() {\r\n        updateDataView()\r\n        binding.questionTextView.text =\r\n            viewModel.questionListThis[viewModel.currentIndex].nameQuestion\r\n    }\r\n\r\n    private fun updateDataView() {\r\n        binding.tvPercent.text = (viewModel.persent).toString()\r\n        binding.tvPointsLife.text = (floor(\r\n            viewModel.getProfileUseCase(getTpovId()).count?.toDouble()?.div(1000.0) ?: 0.0\r\n        )).toInt().toString()\r\n        binding.tvPointsGoldLife.text = (floor(\r\n            viewModel.getProfileUseCase(getTpovId()).countGold?.toDouble()?.div(1000.0) ?: 0.0\r\n        )).toInt().toString()\r\n\r\n    }\r\n\r\n    private fun moveToPref() = with(binding) {\r\n\r\n        var animPref1 =\r\n            AnimationUtils.loadAnimation(this@QuestionActivity, R.anim.pref_question1)\r\n        var animPref2 =\r\n            AnimationUtils.loadAnimation(this@QuestionActivity, R.anim.pref_question2)\r\n\r\n        animPref1.setAnimationListener(object : Animation.AnimationListener {\r\n            override fun onAnimationStart(p0: Animation?) {\r\n                //todo сделать все кнопки что-бы нельзя их нажать\r\n            }\r\n\r\n            override fun onAnimationEnd(p0: Animation?) {\r\n                questionTextView.visibility = View.GONE\r\n                viewModel.currentIndex = (viewModel.currentIndex - 1) % viewModel.numQuestion!!\r\n                updateTextQuestion()\r\n\r\n                questionTextView.startAnimation(animPref2)\r\n            }\r\n\r\n            override fun onAnimationRepeat(p0: Animation?) {\r\n\r\n            }\r\n        })\r\n\r\n        animPref2.setAnimationListener(object : Animation.AnimationListener {\r\n            override fun onAnimationStart(p0: Animation?) {\r\n                questionTextView.visibility = View.VISIBLE\r\n            }\r\n\r\n            override fun onAnimationEnd(p0: Animation?) {\r\n                setBlockButton(viewModel.codeAnswer[viewModel.currentIndex] == '0')\r\n\r\n                //todo освободить кнопки\r\n            }\r\n\r\n            override fun onAnimationRepeat(p0: Animation?) {\r\n\r\n            }\r\n        })\r\n        questionTextView.startAnimation(animPref1)\r\n    }\r\n\r\n    private fun moveToNext() {\r\n        var animNext1 = AnimationUtils.loadAnimation(this, R.anim.next_question1)\r\n        var animNext2 = AnimationUtils.loadAnimation(this, R.anim.next_question2)\r\n\r\n        animNext1.setAnimationListener(object : Animation.AnimationListener {\r\n            override fun onAnimationStart(p0: Animation?) {\r\n                //todo сделать все кнопки что-бы нельзя их нажать\r\n            }\r\n\r\n            override fun onAnimationEnd(p0: Animation?) {\r\n                binding.questionTextView.visibility = View.GONE\r\n\r\n                Log.d(\r\n                    \"dawdasd\",\r\n                    \"questionListThis: ${viewModel.currentIndex + 1}, ${viewModel.numQuestion}\"\r\n                )\r\n                viewModel.currentIndex++\r\n                updateTextQuestion()\r\n\r\n                binding.questionTextView.startAnimation(animNext2)\r\n            }\r\n\r\n            override fun onAnimationRepeat(p0: Animation?) {\r\n\r\n            }\r\n        })\r\n\r\n        animNext2.setAnimationListener(object : Animation.AnimationListener {\r\n            override fun onAnimationStart(p0: Animation?) {\r\n                binding.questionTextView.visibility = View.VISIBLE\r\n            }\r\n\r\n            override fun onAnimationEnd(p0: Animation?) {\r\n                setBlockButton(viewModel.codeAnswer[viewModel.currentIndex] == '0')\r\n\r\n                //todo освободить кнопки\r\n            }\r\n\r\n            override fun onAnimationRepeat(p0: Animation?) {\r\n\r\n            }\r\n        })\r\n        binding.questionTextView.startAnimation(animNext1)\r\n    }\r\n\r\n    companion object {\r\n        const val ID_QUIZ = \"name_question\"\r\n        const val NAME_USER = \"name_user\"\r\n        const val HARD_QUESTION = \"hard_question\"\r\n        const val STARS = \"stars\"\r\n        const val UPDATE_CURRENT_INDEX = 1\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt	(date 1685299236237)
@@ -25,11 +25,7 @@
 import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId
 import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.updateProfile
 import com.tpov.schoolquiz.presentation.factory.ViewModelFactory
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.GlobalScope
 import kotlinx.coroutines.InternalCoroutinesApi
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.withContext
 import javax.inject.Inject
 import kotlin.math.floor
 
@@ -71,9 +67,9 @@
         synthInputData()
         viewModel.synthWithDB(this)
         viewModel.shouldCloseLiveData.observe(this) {
-            if (it) {
+            if (it == RESULT_TRANSLATE || it == RESULT_OK) {
                 val resultIntent = Intent()
-                resultIntent.putExtra("translate", viewModel.resultTranslate)
+                resultIntent.putExtra("translate", it == RESULT_TRANSLATE)
                 resultIntent.putExtra("idQuiz", viewModel.idQuiz)
 
                 setResult(Activity.RESULT_OK, resultIntent)
@@ -485,5 +481,7 @@
         const val HARD_QUESTION = "hard_question"
         const val STARS = "stars"
         const val UPDATE_CURRENT_INDEX = 1
+        const val RESULT_TRANSLATE = 2
+        const val RESULT_OK = 1
     }
 }
Index: app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.network.event\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.tpov.schoolquiz.databinding.FragmentTranslateQuestionBinding\r\nimport com.tpov.schoolquiz.presentation.MainApp\r\nimport com.tpov.schoolquiz.presentation.factory.ViewModelFactory\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport javax.inject.Inject\r\n\r\nclass TranslateQuestionFragment : Fragment() {\r\n\r\n    private lateinit var binding: FragmentTranslateQuestionBinding\r\n    private lateinit var translationAdapter: TranslationQuestionAdapter\r\n\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private val component by lazy {\r\n        (requireActivity().application as MainApp).component\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    override fun onAttach(context: Context) {\r\n        component.inject(this)\r\n        super.onAttach(context)\r\n    }\r\n\r\n    companion object {\r\n\r\n        private const val ARG_ID_QUIZ = \"idQuiz\"\r\n        private const val ARG_ID_QUESTION = \"idQuestion\"\r\n\r\n        fun newInstance(idQuiz: Int?, idQuestion: Int?): TranslateQuestionFragment {\r\n            val args = Bundle()\r\n\r\n            args.putInt(ARG_ID_QUIZ, idQuiz ?: -1)\r\n            args.putInt(ARG_ID_QUESTION, idQuestion ?: -1)\r\n\r\n            val fragment = TranslateQuestionFragment()\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentTranslateQuestionBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        val idQuiz = arguments?.getInt(ARG_ID_QUIZ, -1)\r\n        val idQuestion = arguments?.getInt(ARG_ID_QUESTION, -1)\r\n\r\n        val viewModel = ViewModelProvider(this, viewModelFactory)[EventViewModel::class.java]\r\n\r\n        val languages = listOf(\"EN\", \"RU\", \"FR\") // Замените на список доступных языков\r\n        translationAdapter = TranslationQuestionAdapter(mutableListOf(), languages)\r\n        binding.recyclerViewQuestions.layoutManager = LinearLayoutManager(requireContext())\r\n        binding.recyclerViewQuestions.adapter = translationAdapter\r\n\r\n        if (idQuiz != -1) {\r\n            log(\"getQuestionListUseCase() idQuiz != -1\")\r\n            viewModel.questionLiveData.observe(viewLifecycleOwner) { questions ->\r\n\r\n                questions?.forEach {\r\n                            val words1 = it.language.split(\"|\")\r\n                                .toSet() // Преобразование строки it в множество слов\r\n                            val words2 = viewModel.getProfile().languages?.split(\"|\")\r\n                                ?.toSet() // Преобразование строки it2 в множество слов\r\n\r\n                            val commonWords = words1.intersect(\r\n                                (words2 ?: emptySet()).toSet()\r\n                            ) // Находим общие слова\r\n                            val wordsOnlyInIt2 =\r\n                                words2?.subtract(words1) // Находим слова, которые есть только в it2\r\n                            if (commonWords.isNotEmpty() && wordsOnlyInIt2?.isNotEmpty() == true) {\r\n\r\n                                translationAdapter.questions.add(it)\r\n                                translationAdapter.notifyDataSetChanged()\r\n                            } else Toast.makeText(\r\n                                activity,\r\n                                \"Вы удалось найти вопросы которые вы могли бы перевести\",\r\n                                Toast.LENGTH_LONG\r\n                            ).show()\r\n                }\r\n\r\n                log(\"getQuestionListUseCase() :${questions}\")\r\n            }\r\n\r\n                    viewModel.loadQuests()\r\n        } else if (idQuestion != -1) {\r\n            log(\"getQuestionListUseCase() idQuestion != -1\")\r\n            viewModel.questionLiveData.observe(viewLifecycleOwner) { question ->\r\n                log(\"getQuestionListUseCase() :${question}\")\r\n                question?.forEach {\r\n                            val words1 = it.language.split(\"|\")\r\n                                .toSet() // Преобразование строки it в множество слов\r\n                            val words2 = viewModel.getProfile().languages?.split(\"|\")\r\n                                ?.toSet() // Преобразование строки it2 в множество слов\r\n\r\n                            val commonWords = words1.intersect(\r\n                                (words2 ?: emptySet()).toSet()\r\n                            ) // Находим общие слова\r\n                            val wordsOnlyInIt2 =\r\n                                words2?.subtract(words1) // Находим слова, которые есть только в it2\r\n                            if (commonWords.isNotEmpty() && wordsOnlyInIt2?.isNotEmpty() == true) {\r\n\r\n                                translationAdapter.questions.add(it)\r\n                                translationAdapter.notifyDataSetChanged()\r\n                            } else Toast.makeText(\r\n                                activity,\r\n                                \"Вы удалось найти вопросы которые вы могли бы перевести\",\r\n                                Toast.LENGTH_LONG\r\n                            ).show()\r\n                }\r\n            }\r\n\r\n            GlobalScope.launch {\r\n                withContext(Dispatchers.IO) {\r\n                    viewModel.loadQuestion(idQuestion!!)\r\n                }\r\n            }\r\n        }\r\n\r\n        binding.buttonAddTranslation.setOnClickListener {\r\n            log(\"Add Translation button clicked\")\r\n            translationAdapter.addNewQuestion()\r\n        }\r\n\r\n        binding.buttonSave.setOnClickListener {\r\n            val updatedQuestions = translationAdapter.getUpdatedQuestions()\r\n            viewModel.saveQuestions(updatedQuestions)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt	(date 1685299236333)
@@ -10,14 +10,11 @@
 import androidx.fragment.app.Fragment
 import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.LinearLayoutManager
+import com.tpov.schoolquiz.data.database.entities.QuestionEntity
 import com.tpov.schoolquiz.databinding.FragmentTranslateQuestionBinding
 import com.tpov.schoolquiz.presentation.MainApp
 import com.tpov.schoolquiz.presentation.factory.ViewModelFactory
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.GlobalScope
 import kotlinx.coroutines.InternalCoroutinesApi
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.withContext
 import javax.inject.Inject
 
 class TranslateQuestionFragment : Fragment() {
@@ -39,16 +36,17 @@
         super.onAttach(context)
     }
 
+    private var questionIndex = 0
+    private var questions: List<QuestionEntity>? = null
+
     companion object {
 
         private const val ARG_ID_QUIZ = "idQuiz"
-        private const val ARG_ID_QUESTION = "idQuestion"
 
-        fun newInstance(idQuiz: Int?, idQuestion: Int?): TranslateQuestionFragment {
+        fun newInstance(idQuiz: Int?): TranslateQuestionFragment {
             val args = Bundle()
 
             args.putInt(ARG_ID_QUIZ, idQuiz ?: -1)
-            args.putInt(ARG_ID_QUESTION, idQuestion ?: -1)
 
             val fragment = TranslateQuestionFragment()
             fragment.arguments = args
@@ -69,7 +67,6 @@
         super.onViewCreated(view, savedInstanceState)
 
         val idQuiz = arguments?.getInt(ARG_ID_QUIZ, -1)
-        val idQuestion = arguments?.getInt(ARG_ID_QUESTION, -1)
 
         val viewModel = ViewModelProvider(this, viewModelFactory)[EventViewModel::class.java]
 
@@ -80,66 +77,23 @@
 
         if (idQuiz != -1) {
             log("getQuestionListUseCase() idQuiz != -1")
-            viewModel.questionLiveData.observe(viewLifecycleOwner) { questions ->
-
-                questions?.forEach {
-                            val words1 = it.language.split("|")
-                                .toSet() // Преобразование строки it в множество слов
-                            val words2 = viewModel.getProfile().languages?.split("|")
-                                ?.toSet() // Преобразование строки it2 в множество слов
+            viewModel.questionLiveData.observe(viewLifecycleOwner) { receivedQuestions ->
+                questions = receivedQuestions
 
-                            val commonWords = words1.intersect(
-                                (words2 ?: emptySet()).toSet()
-                            ) // Находим общие слова
-                            val wordsOnlyInIt2 =
-                                words2?.subtract(words1) // Находим слова, которые есть только в it2
-                            if (commonWords.isNotEmpty() && wordsOnlyInIt2?.isNotEmpty() == true) {
-
-                                translationAdapter.questions.add(it)
-                                translationAdapter.notifyDataSetChanged()
-                            } else Toast.makeText(
-                                activity,
-                                "Вы удалось найти вопросы которые вы могли бы перевести",
-                                Toast.LENGTH_LONG
-                            ).show()
+                if (!receivedQuestions.isNullOrEmpty()) {
+                    loadNextQuestion()
+                } else {
+                    Toast.makeText(
+                        activity,
+                        "Не удалось найти вопросы, которые можно перевести",
+                        Toast.LENGTH_LONG
+                    ).show()
                 }
 
-                log("getQuestionListUseCase() :${questions}")
+                log("getQuestionListUseCase(): $receivedQuestions")
             }
 
-                    viewModel.loadQuests()
-        } else if (idQuestion != -1) {
-            log("getQuestionListUseCase() idQuestion != -1")
-            viewModel.questionLiveData.observe(viewLifecycleOwner) { question ->
-                log("getQuestionListUseCase() :${question}")
-                question?.forEach {
-                            val words1 = it.language.split("|")
-                                .toSet() // Преобразование строки it в множество слов
-                            val words2 = viewModel.getProfile().languages?.split("|")
-                                ?.toSet() // Преобразование строки it2 в множество слов
-
-                            val commonWords = words1.intersect(
-                                (words2 ?: emptySet()).toSet()
-                            ) // Находим общие слова
-                            val wordsOnlyInIt2 =
-                                words2?.subtract(words1) // Находим слова, которые есть только в it2
-                            if (commonWords.isNotEmpty() && wordsOnlyInIt2?.isNotEmpty() == true) {
-
-                                translationAdapter.questions.add(it)
-                                translationAdapter.notifyDataSetChanged()
-                            } else Toast.makeText(
-                                activity,
-                                "Вы удалось найти вопросы которые вы могли бы перевести",
-                                Toast.LENGTH_LONG
-                            ).show()
-                }
-            }
-
-            GlobalScope.launch {
-                withContext(Dispatchers.IO) {
-                    viewModel.loadQuestion(idQuestion!!)
-                }
-            }
+            viewModel.loadQuests()
         }
 
         binding.buttonAddTranslation.setOnClickListener {
@@ -148,8 +102,37 @@
         }
 
         binding.buttonSave.setOnClickListener {
+            val currentQuestion = questions?.get(questionIndex)
             val updatedQuestions = translationAdapter.getUpdatedQuestions()
             viewModel.saveQuestions(updatedQuestions)
+            translationAdapter.questions.clear()
+            currentQuestion?.let {
+                translationAdapter.questions.add(it)
+                translationAdapter.notifyDataSetChanged()
+            }
+            loadNextQuestion()
+        }
+
+        // binding.buttonCancel.setOnClickListener {
+        //     requireActivity().supportFragmentManager.beginTransaction().remove(this).commit()
+        // }
+    }
+
+    private fun loadNextQuestion() {
+        if (questionIndex < (questions?.size ?: 0)) {
+            val nextQuestion = questions?.get(questionIndex)
+            nextQuestion?.let {
+                translationAdapter.questions.add(it)
+                translationAdapter.notifyDataSetChanged()
+                questionIndex++
+            }
+        } else {
+            Toast.makeText(
+                activity,
+                "Все доступные вопросы загружены",
+                Toast.LENGTH_SHORT
+            ).show()
+            requireActivity().supportFragmentManager.beginTransaction().remove(this).commit()
         }
     }
 }
Index: app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.main\r\n\r\nimport android.content.Context\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.asLiveData\r\nimport androidx.lifecycle.liveData\r\nimport androidx.lifecycle.switchMap\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.data.fierbase.AddPoints\r\nimport com.tpov.schoolquiz.data.fierbase.Box\r\nimport com.tpov.schoolquiz.data.fierbase.Buy\r\nimport com.tpov.schoolquiz.data.fierbase.Dates\r\nimport com.tpov.schoolquiz.data.fierbase.Life\r\nimport com.tpov.schoolquiz.data.fierbase.Points\r\nimport com.tpov.schoolquiz.data.fierbase.Profile\r\nimport com.tpov.schoolquiz.data.fierbase.Qualification\r\nimport com.tpov.schoolquiz.data.fierbase.TimeInGames\r\nimport com.tpov.schoolquiz.data.fierbase.toProfileEntity\r\nimport com.tpov.schoolquiz.domain.DeleteQuestionByIdQuizUseCase\r\nimport com.tpov.schoolquiz.domain.DeleteQuizUseCase\r\nimport com.tpov.schoolquiz.domain.GetAllProfilesDBUseCase\r\nimport com.tpov.schoolquiz.domain.GetEventLiveDataUseCase\r\nimport com.tpov.schoolquiz.domain.GetIdQuizByNameQuizUseCase\r\nimport com.tpov.schoolquiz.domain.GetPlayersDBUseCase\r\nimport com.tpov.schoolquiz.domain.GetProfileFlowUseCase\r\nimport com.tpov.schoolquiz.domain.GetProfileUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuestion8FBUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuestionDetail8FBUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuestionListUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuiz8FBUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuizByIdUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuizListUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuizLiveDataUseCase\r\nimport com.tpov.schoolquiz.domain.InsertProfileUseCase\r\nimport com.tpov.schoolquiz.domain.InsertQuestionUseCase\r\nimport com.tpov.schoolquiz.domain.InsertQuizUseCase\r\nimport com.tpov.schoolquiz.domain.SetQuestionDetailFBUseCase\r\nimport com.tpov.schoolquiz.domain.SetQuestionFBUseCase\r\nimport com.tpov.schoolquiz.domain.SetQuizDataFBUseCase\r\nimport com.tpov.schoolquiz.domain.UpdateProfileUseCase\r\nimport com.tpov.schoolquiz.domain.UpdateQuizUseCase\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.withContext\r\nimport java.util.Locale\r\nimport javax.inject.Inject\r\n\r\n@InternalCoroutinesApi\r\nclass MainActivityViewModel @Inject constructor(\r\n    private val context: Context,\r\n    private val insertQuizUseCase: InsertQuizUseCase,\r\n    private val getQuizLiveDataUseCase: GetQuizLiveDataUseCase,\r\n    private val getQuiz8FBUseCase: GetQuiz8FBUseCase,\r\n    private val getQuestionDetail8FBUseCase: GetQuestionDetail8FBUseCase,\r\n    private val getQuestion8FBUseCase: GetQuestion8FBUseCase,\r\n    private val getIdQuizByNameQuizUseCase: GetIdQuizByNameQuizUseCase,\r\n    private val insertQuestionUseCase: InsertQuestionUseCase,\r\n    private val setQuizFBUseCase: SetQuizDataFBUseCase,\r\n    private val setQuestionFBUseCase: SetQuestionFBUseCase,\r\n    private val setQuestionDetailFBUseCase: SetQuestionDetailFBUseCase,\r\n    private val getProfileFlowUseCase: GetProfileFlowUseCase,\r\n    private val insertProfileUseCase: InsertProfileUseCase,\r\n    private val getQuestionListUseCase: GetQuestionListUseCase,\r\n    private val getProfileUseCase: GetProfileUseCase,\r\n    private val getAllProfilesDBUseCase: GetAllProfilesDBUseCase,\r\n    private val getPlayersDBUseCase: GetPlayersDBUseCase,\r\n    private val getQuizListUseCase: GetQuizListUseCase,\r\n    val getEventLiveDataUseCase: GetEventLiveDataUseCase,\r\n    private val getQuizByIdUseCase: GetQuizByIdUseCase,\r\n    private val deleteQuizByIdUseCase: DeleteQuizUseCase,\r\n    private val deleteQuestionByIdQuizUseCase: DeleteQuestionByIdQuizUseCase,\r\n    val updateQuizUseCase: UpdateQuizUseCase,\r\n    val updateProfileUseCase: UpdateProfileUseCase\r\n) : ViewModel() {\r\n\r\n    var oldId = 0\r\n    val tpovIdLiveData = MutableLiveData<Int>()\r\n\r\n    val getProfileFBLiveData: LiveData<ProfileEntity?> = tpovIdLiveData.switchMap { tpovId ->\r\n        log(\"getProfileFBLiveData tpovId: $tpovId\")\r\n        getProfileFlowUseCase(tpovId).asLiveData()\r\n    }\r\n\r\n    fun getQuizById(position: Int): QuizEntity {\r\n        log(\"getQuizById, position: $position, getQuizByIdUseCase(position): ${getQuizByIdUseCase(position)}\")\r\n        return getQuizByIdUseCase(position)\r\n    }\r\n    fun updateTpovId(tpovId: Int) {\r\n        if (tpovId != oldId) tpovIdLiveData.value = tpovId\r\n        oldId = tpovId\r\n    }\r\n\r\n    fun getAllProfiles() = getAllProfilesDBUseCase()\r\n    fun getPlayers() = getPlayersDBUseCase()\r\n\r\n    init {\r\n        SharedPreferencesManager.initialize(context)\r\n    }\r\n\r\n    fun init() {\r\n        log(\"fun init(), tpovId: ${getTpovId()}\")\r\n\r\n        if (getTpovId() == -1) insertProfile()\r\n        getProfileFlowUseCase(getTpovId())\r\n        getQuiz8FBUseCase()\r\n        getQuestion8FBUseCase()\r\n    }\r\n\r\n    fun getQuestionListByIdQuiz(idQuiz: Int): List<QuestionEntity> {\r\n        return getQuestionListUseCase().filter { it.idQuiz == idQuiz }\r\n    }\r\n\r\n\r\n    private fun insertProfile() {\r\n        log(\"fun insertProfile()\")\r\n\r\n        val userLocale: Locale = Locale.getDefault()\r\n        val userLanguageCode: String = userLocale.language\r\n\r\n        SharedPreferencesManager.setTpovId(0)\r\n\r\n        log(\"set tpovId = 0\")\r\n\r\n        val profile = Profile(\r\n            0.toString(),\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            Points(0, 0, 0, 0),\r\n            \"0\",\r\n            Buy(1, 0, 1, \"0\", \"0\", \"0\"),\r\n            \"0\",\r\n            \"\",\r\n            \"\",\r\n            0,\r\n            TimeInGames(0, 0, 0, 0),\r\n            AddPoints(0, 0, 0, 0, \"\"),\r\n            Dates(\r\n                TimeManager.getCurrentTime(),\r\n                \"\"\r\n            ),\r\n            \"\",\r\n            userLanguageCode,\r\n            Qualification(1, 0, 0, 0, 0, 0, 0),\r\n            Life(1, 0),\r\n            Box(0, TimeManager.getCurrentTime(), 0)\r\n        )\r\n\r\n        insertProfileUseCase(profile.toProfileEntity(0, 100))\r\n    }\r\n\r\n    fun insertQuiz(quizEntity: QuizEntity) {\r\n\r\n        log(\"fun insertQuiz\")\r\n        insertQuizUseCase(quizEntity)\r\n    }\r\n\r\n    fun insertQuestion(questionEntity: QuestionEntity) {\r\n        log(\"fun insertQuestionList\")\r\n        insertQuestionUseCase(questionEntity)\r\n    }\r\n\r\n    fun insertQuizEvent(quizEntity: QuizEntity) {\r\n        log(\"fun updateQuizEvent\")\r\n        if (quizEntity.event == 1) {\r\n            quizEntity.event++\r\n\r\n            log(\"updateQuizEvent quizEntity.event = ${quizEntity.event}\")\r\n            insertQuiz(quizEntity.copy(id = null))\r\n        }\r\n    }\r\n\r\n    fun setQuestionsFB() {\r\n        log(\"fun setQuestionsFB\")\r\n        setQuestionFBUseCase()\r\n        setQuestionDetailFBUseCase()\r\n    }\r\n\r\n    private fun getQuizList(): LiveData<List<QuizEntity>> {\r\n        log(\"fun getQuizList tpovId: ${getTpovId()}\")\r\n        return getQuizLiveDataUseCase.getQuizUseCase(getTpovId())\r\n    }\r\n\r\n    fun getQuizLiveData(): LiveData<List<QuizEntity>> {\r\n        return getQuizList()\r\n    }\r\n\r\n    fun getProfile(): ProfileEntity {\r\n        return getProfileUseCaseFun(getTpovId())\r\n    }\r\n\r\n    private fun getProfileUseCaseFun(tpovId: Int): ProfileEntity {\r\n        log(\"getProfileUseCaseFun getProfileUseCase(tpovId):${getProfileUseCase(tpovId)}\")\r\n        return getProfileUseCase(tpovId)\r\n    }\r\n\r\n    fun getNewIdQuiz(): Int {\r\n        var i = 0\r\n        getQuizListUseCase(getTpovId()).forEach {\r\n            log(\"getNewIdQuiz: it: ${it.id}\")\r\n            if (it.id!! in (i + 1)..100) {\r\n                i = it.id!!\r\n            }\r\n        }\r\n        return i + 1\r\n    }\r\n\r\n    fun getIdQuizByNameQuiz(nameQuiz: String) = getIdQuizByNameQuizUseCase(nameQuiz,\r\n        getTpovId()\r\n    )\r\n\r\n    fun log(massage: String) {\r\n        Logcat.log(massage, \"MainActivityViewModel\", Logcat.LOG_VIEW_MODEL)\r\n    }\r\n\r\n    fun deleteQuiz(id: Int) {\r\n        deleteQuizByIdUseCase(id)\r\n        deleteQuestionByIdQuizUseCase(id)\r\n    }\r\n\r\n    fun getLvlTranslateByQuizId(id: Int): Int {\r\n        var lvlTranslate = 1000\r\n        getQuestionListByIdQuiz(id).forEach {\r\n            if (it.lvlTranslate < lvlTranslate) lvlTranslate = it.lvlTranslate\r\n        }\r\n        return lvlTranslate\r\n    }\r\n    fun getProfileCount(): Int? {\r\n        val profile = getProfileUseCase(getTpovId())\r\n        log(\"getProfileCount(): $profile, ${getTpovId()}\")\r\n        return profile.count\r\n    }\r\n\r\n    fun getProfileCountLife(): Int? {\r\n        val profile =  getProfileUseCase(getTpovId())\r\n        return profile.countLife\r\n    }\r\n\r\n    fun getProfileDateCloseAp(): String? {\r\n        val profile = getProfileUseCase(getTpovId())\r\n        return profile.dateCloseApp\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityViewModel.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityViewModel.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityViewModel.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityViewModel.kt	(date 1685299236344)
@@ -1,56 +1,20 @@
 package com.tpov.schoolquiz.presentation.main
 
 import android.content.Context
-import androidx.lifecycle.LiveData
-import androidx.lifecycle.MutableLiveData
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.asLiveData
-import androidx.lifecycle.liveData
-import androidx.lifecycle.switchMap
+import android.os.Build
+import androidx.annotation.RequiresApi
+import androidx.lifecycle.*
 import com.tpov.schoolquiz.data.database.entities.ProfileEntity
 import com.tpov.schoolquiz.data.database.entities.QuestionEntity
 import com.tpov.schoolquiz.data.database.entities.QuizEntity
-import com.tpov.schoolquiz.data.fierbase.AddPoints
-import com.tpov.schoolquiz.data.fierbase.Box
-import com.tpov.schoolquiz.data.fierbase.Buy
-import com.tpov.schoolquiz.data.fierbase.Dates
-import com.tpov.schoolquiz.data.fierbase.Life
-import com.tpov.schoolquiz.data.fierbase.Points
-import com.tpov.schoolquiz.data.fierbase.Profile
-import com.tpov.schoolquiz.data.fierbase.Qualification
-import com.tpov.schoolquiz.data.fierbase.TimeInGames
-import com.tpov.schoolquiz.data.fierbase.toProfileEntity
-import com.tpov.schoolquiz.domain.DeleteQuestionByIdQuizUseCase
-import com.tpov.schoolquiz.domain.DeleteQuizUseCase
-import com.tpov.schoolquiz.domain.GetAllProfilesDBUseCase
-import com.tpov.schoolquiz.domain.GetEventLiveDataUseCase
-import com.tpov.schoolquiz.domain.GetIdQuizByNameQuizUseCase
-import com.tpov.schoolquiz.domain.GetPlayersDBUseCase
-import com.tpov.schoolquiz.domain.GetProfileFlowUseCase
-import com.tpov.schoolquiz.domain.GetProfileUseCase
-import com.tpov.schoolquiz.domain.GetQuestion8FBUseCase
-import com.tpov.schoolquiz.domain.GetQuestionDetail8FBUseCase
-import com.tpov.schoolquiz.domain.GetQuestionListUseCase
-import com.tpov.schoolquiz.domain.GetQuiz8FBUseCase
-import com.tpov.schoolquiz.domain.GetQuizByIdUseCase
-import com.tpov.schoolquiz.domain.GetQuizListUseCase
-import com.tpov.schoolquiz.domain.GetQuizLiveDataUseCase
-import com.tpov.schoolquiz.domain.InsertProfileUseCase
-import com.tpov.schoolquiz.domain.InsertQuestionUseCase
-import com.tpov.schoolquiz.domain.InsertQuizUseCase
-import com.tpov.schoolquiz.domain.SetQuestionDetailFBUseCase
-import com.tpov.schoolquiz.domain.SetQuestionFBUseCase
-import com.tpov.schoolquiz.domain.SetQuizDataFBUseCase
-import com.tpov.schoolquiz.domain.UpdateProfileUseCase
-import com.tpov.schoolquiz.domain.UpdateQuizUseCase
+import com.tpov.schoolquiz.data.fierbase.*
+import com.tpov.schoolquiz.domain.*
 import com.tpov.schoolquiz.presentation.custom.Logcat
 import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager
 import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId
 import com.tpov.shoppinglist.utils.TimeManager
-import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.InternalCoroutinesApi
-import kotlinx.coroutines.withContext
-import java.util.Locale
+import java.util.*
 import javax.inject.Inject
 
 @InternalCoroutinesApi
@@ -240,6 +204,30 @@
         return profile.count
     }
 
+    fun getProfileNolic(): Int? {
+        val profile = getProfileUseCase(getTpovId())
+
+        return profile.pointsNolics
+    }
+
+    @RequiresApi(Build.VERSION_CODES.O)
+    fun synthPrizeBoxDay(profile: ProfileEntity?): Int? {
+        log("wdawdwa: $profile")
+        val days = if (TimeManager.getDaysBetweenDates(profile?.timeLastOpenBox!!,
+                TimeManager.getCurrentTime()
+            ) == 1L && profile.coundDayBox != 10) {
+            profile.coundDayBox?.plus(1) ?: 0
+        } else if (TimeManager.getDaysBetweenDates(
+                profile.timeLastOpenBox!!,
+                TimeManager.getCurrentTime()
+            ) < 1) 0
+        else  profile.coundDayBox
+        updateProfileUseCase(profile.copy(coundDayBox = days, countBox = if (days == 10) profile.countBox?.plus(
+            1
+        ) else  profile.countBox, timeLastOpenBox = TimeManager.getCurrentTime()))
+        return days
+    }
+
     fun getProfileCountLife(): Int? {
         val profile =  getProfileUseCase(getTpovId())
         return profile.countLife
Index: app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.main\r\n\r\nimport android.content.Context\r\nimport android.graphics.*\r\nimport android.view.*\r\nimport android.widget.*\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.recyclerview.widget.DiffUtil\r\nimport androidx.recyclerview.widget.ListAdapter\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.resource.bitmap.GranularRoundedCorners\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.databinding.ActivityMainItemBinding\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.ResizeAndCrop\r\nimport kotlinx.android.synthetic.main.activity_main_item.view.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport java.io.File\r\nimport java.util.*\r\n\r\n\r\nclass MainActivityAdapter @OptIn(InternalCoroutinesApi::class) constructor(\r\n    private val listener: Listener,\r\n    private val context: Context,\r\n    private val viewModel: MainActivityViewModel\r\n) :\r\n    ListAdapter<QuizEntity, MainActivityAdapter.ItemHolder>(ItemComparator()) {\r\n    var onDeleteButtonClick: ((RecyclerView.ViewHolder) -> Unit)? = null\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemHolder {\r\n        return ItemHolder.create(parent, listener)\r\n    }\r\n\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    override fun onBindViewHolder(holder: ItemHolder, position: Int) {\r\n        val item = getItem(position)\r\n        holder.setData(item, listener, context, viewModel)\r\n    }\r\n\r\n\r\n    class ItemComparator : DiffUtil.ItemCallback<QuizEntity>() {\r\n        override fun areItemsTheSame(oldItem: QuizEntity, newItem: QuizEntity): Boolean {\r\n            return oldItem.id == newItem.id\r\n        }\r\n\r\n        override fun areContentsTheSame(oldItem: QuizEntity, newItem: QuizEntity): Boolean {\r\n            return oldItem == newItem\r\n        }\r\n    }\r\n\r\n    class ItemHolder(view: View, private val listener: Listener) : RecyclerView.ViewHolder(view),\r\n        View.OnTouchListener {\r\n\r\n        @OptIn(InternalCoroutinesApi::class)\r\n        fun log(msg: String) {\r\n            Logcat.log(msg, \"MainActivityAdapter\", Logcat.LOG_ACTIVITY)\r\n        }\r\n\r\n        val constraintLayout: ConstraintLayout = itemView.findViewById(R.id.constraint_layout)\r\n\r\n        //val deleteButton: ImageButton = itemView.findViewById(R.id.delete_button_swipe)\r\n        private val binding = ActivityMainItemBinding.bind(view)\r\n        val editButton: ImageButton = itemView.findViewById(R.id.edit_button_swipe)\r\n        val deleteButton: ImageButton = itemView.findViewById(R.id.delete_button_swipe)\r\n        val sendButton: ImageButton = itemView.findViewById(R.id.send_button_swipe)\r\n        val imvGradLightQuiz: ImageView = itemView.findViewById(R.id.imv_gradient_light_quiz)\r\n        val imvGradHardQuiz: ImageView = itemView.findViewById(R.id.imv_grafient_hard_quiz)\r\n        val imvTranslate: ImageView = itemView.findViewById(R.id.imv_translate)\r\n        val chbTypeQuiz: CheckBox = itemView.findViewById(R.id.chb_type_quiz)\r\n\r\n        private fun showPopupMenu(view: View, id: Int) {\r\n            val popupMenu = PopupMenu(view.context, view)\r\n            popupMenu.inflate(R.menu.popup_menu)\r\n\r\n            popupMenu.setOnMenuItemClickListener { menuItem ->\r\n                when (menuItem.itemId) {\r\n                    R.id.menu_send -> {\r\n                        // Обработка выбора элемента 1\r\n                        listener.sendItem(id)\r\n                        true\r\n                    }\r\n\r\n                    R.id.menu_delete -> {\r\n                        // Обработка выбора элемента 2\r\n                        listener.deleteItem(id)\r\n                        true\r\n                    }\r\n\r\n                    R.id.menu_edit -> {\r\n                        // Обработка выбора элемента 3\r\n                        listener.editItem(id)\r\n                        true\r\n                    }\r\n\r\n                    else -> false\r\n                }\r\n            }\r\n            popupMenu.show()\r\n        }\r\n\r\n        @OptIn(InternalCoroutinesApi::class)\r\n        fun setData(\r\n            quizEntity: QuizEntity,\r\n            listener: Listener,\r\n            context: Context,\r\n            viewModel: MainActivityViewModel\r\n        ) = with(binding) {\r\n\r\n            log(\"\")\r\n            if (viewModel.getQuizById(quizEntity.id!!).showItemMenu) {\r\n                constraintLayout.setOnLongClickListener {\r\n                    showPopupMenu(it, quizEntity.id!!)\r\n                    true\r\n                }\r\n\r\n            } else constraintLayout.visibility = View.VISIBLE\r\n            try {\r\n\r\n                val file = File(context.cacheDir, \"${quizEntity.picture}\")\r\n\r\n                fun dpToPx(dp: Int, context: Context): Int {\r\n                    val density = context.resources.displayMetrics.density\r\n                    return (dp * density).toInt()\r\n                }\r\n\r\n                val widthInDp = 100\r\n                val heightInDp = 75\r\n                val radius = 25\r\n\r\n                val widthInPx = dpToPx(widthInDp, context)\r\n                val heightInPx = dpToPx(heightInDp, context)\r\n                val radinPx = dpToPx(radius, context)\r\n\r\n                Glide.with(context)\r\n                    .asBitmap()\r\n                    .load(file)\r\n                    .apply(\r\n                        RequestOptions()\r\n                            .override(widthInPx, heightInPx)\r\n                            .transform(\r\n                                ResizeAndCrop(widthInPx, heightInPx),\r\n                                GranularRoundedCorners(0f, radinPx.toFloat(), radinPx.toFloat(), 0f)\r\n                            )\r\n                    )\r\n                    .into(imageView)\r\n\r\n            } catch (e: Exception) {\r\n                log(\"onBindViewHolder Exception $e\")\r\n            }\r\n\r\n            var goHardQuiz =\r\n                \"${this.root.context.getString(R.string.go_hard_question)} - ${quizEntity.nameQuiz}\"\r\n\r\n            if (quizEntity.stars == MAX_PERCENT) {\r\n                Toast.makeText(binding.root.context, goHardQuiz, Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n            log(\"quizEntity.stars = ${quizEntity.stars}\")\r\n            log(\"quizEntity.stars position = $position\")\r\n\r\n            if (quizEntity.stars >= MAX_PERCENT) {\r\n                log(\"quizEntity.stars 1\")\r\n                imvGradLightQuiz.visibility = View.VISIBLE\r\n                imvGradHardQuiz.visibility = View.GONE\r\n                chbTypeQuiz.visibility = View.VISIBLE\r\n\r\n            } else if (quizEntity.stars == 120) {\r\n                log(\"quizEntity.stars 2\")\r\n                chbTypeQuiz.visibility = View.VISIBLE\r\n                imvGradLightQuiz.visibility = View.GONE\r\n                imvGradHardQuiz.visibility = View.VISIBLE\r\n\r\n            } else {\r\n                log(\"quizEntity.stars 3\")\r\n                chbTypeQuiz.visibility = View.GONE\r\n                imvGradLightQuiz.visibility = View.GONE\r\n                imvGradHardQuiz.visibility = View.GONE\r\n            }\r\n\r\n            imvTranslate.imageAlpha = 128\r\n\r\n            val lvlTranslate = viewModel.getLvlTranslateByQuizId(quizEntity.id!!)\r\n\r\n            //imvTranslate\r\n            if (lvlTranslate <= 100) imvTranslate.setColorFilter(Color.GRAY)\r\n            else if (lvlTranslate <= 200) imvTranslate.setColorFilter(Color.YELLOW)\r\n            else imvTranslate.setColorFilter(Color.BLUE)\r\n\r\n            if (quizEntity.stars <= MAX_PERCENT) ratingBar.rating =\r\n                (quizEntity.stars.toFloat() / 50)\r\n            else ratingBar.rating = (((quizEntity.stars.toFloat() - 100) / 20) + 2)\r\n\r\n            mainTitleButton.text = quizEntity.nameQuiz\r\n            mainTitleButton.setOnClickListener {\r\n                listener.onClick(quizEntity.id!!, chbTypeQuiz.isChecked)\r\n            }\r\n            imvGradHardQuiz.setOnClickListener {\r\n                listener.onClick(quizEntity.id!!, chbTypeQuiz.isChecked)\r\n            }\r\n            imvGradLightQuiz.setOnClickListener {\r\n                listener.onClick(quizEntity.id!!, chbTypeQuiz.isChecked)\r\n            }\r\n            imvTranslate.setOnClickListener {\r\n                listener.onClick(quizEntity.id!!, chbTypeQuiz.isChecked)\r\n            }\r\n        }\r\n\r\n        companion object {\r\n            const val PERCENT_TWO_STARS = 0.83333\r\n            const val MAX_PERCENT = 100\r\n\r\n            fun create(parent: ViewGroup, listener: Listener): ItemHolder {\r\n                return ItemHolder(\r\n                    LayoutInflater.from(parent.context)\r\n                        .inflate(R.layout.activity_main_item, parent, false),\r\n                    listener\r\n                )\r\n            }\r\n        }\r\n\r\n        override fun onTouch(v: View?, event: MotionEvent?): Boolean {\r\n            return true\r\n        }\r\n    }\r\n\r\n    interface Listener {\r\n        fun deleteItem(id: Int)\r\n        fun onClick(id: Int, type: Boolean)\r\n        fun editItem(id: Int)\r\n        fun sendItem(id: Int)\r\n        fun reloadData()\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    fun log(msg: String) {\r\n        Logcat.log(msg, \"MainActivityAdapter\", Logcat.LOG_ACTIVITY)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityAdapter.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityAdapter.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityAdapter.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityAdapter.kt	(date 1685299236350)
@@ -16,12 +16,9 @@
 import com.tpov.schoolquiz.databinding.ActivityMainItemBinding
 import com.tpov.schoolquiz.presentation.custom.Logcat
 import com.tpov.schoolquiz.presentation.custom.ResizeAndCrop
+import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId
 import kotlinx.android.synthetic.main.activity_main_item.view.*
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.GlobalScope
 import kotlinx.coroutines.InternalCoroutinesApi
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.withContext
 import java.io.File
 import java.util.*
 
@@ -66,15 +63,9 @@
 
         val constraintLayout: ConstraintLayout = itemView.findViewById(R.id.constraint_layout)
 
-        //val deleteButton: ImageButton = itemView.findViewById(R.id.delete_button_swipe)
         private val binding = ActivityMainItemBinding.bind(view)
-        val editButton: ImageButton = itemView.findViewById(R.id.edit_button_swipe)
-        val deleteButton: ImageButton = itemView.findViewById(R.id.delete_button_swipe)
-        val sendButton: ImageButton = itemView.findViewById(R.id.send_button_swipe)
         val imvGradLightQuiz: ImageView = itemView.findViewById(R.id.imv_gradient_light_quiz)
         val imvGradHardQuiz: ImageView = itemView.findViewById(R.id.imv_grafient_hard_quiz)
-        val imvTranslate: ImageView = itemView.findViewById(R.id.imv_translate)
-        val chbTypeQuiz: CheckBox = itemView.findViewById(R.id.chb_type_quiz)
 
         private fun showPopupMenu(view: View, id: Int) {
             val popupMenu = PopupMenu(view.context, view)
@@ -159,13 +150,88 @@
             var goHardQuiz =
                 "${this.root.context.getString(R.string.go_hard_question)} - ${quizEntity.nameQuiz}"
 
+            if (quizEntity.event == 5) initViewQuiz5(quizEntity, viewModel, listener)
+            else initView(quizEntity, goHardQuiz, viewModel, listener)
+
+        }
+
+        @OptIn(InternalCoroutinesApi::class)
+        private fun ActivityMainItemBinding.initViewQuiz5(
+            quizEntity: QuizEntity,
+            viewModel: MainActivityViewModel,
+            listener: Listener
+        ) {
+            if (quizEntity.stars >= MAX_PERCENT) {
+
+                log("quizEntity.stars 1")
+                imvGradLightQuiz.visibility = View.VISIBLE
+                imvGradHardQuiz.visibility = View.GONE
+
+            } else if (quizEntity.ratingPlayer == 3) {
+
+                log("quizEntity.stars 2")
+                imvGradLightQuiz.visibility = View.GONE
+                imvGradHardQuiz.visibility = View.VISIBLE
+
+            } else if (quizEntity.tpovId == getTpovId()) {
+
+                imvGradLightQuiz.visibility = View.GONE
+                imvGradHardQuiz.visibility = View.GONE
+                imvGradientTranslateQuiz.visibility = View.GONE
+
+            } else {
+
+                log("quizEntity.stars 3")
+                chbTypeQuiz.visibility = View.GONE
+                imvGradLightQuiz.visibility = View.GONE
+                imvGradHardQuiz.visibility = View.GONE
+            }
+
+            chbTypeQuiz.visibility = View.VISIBLE
+            chbTypeQuiz.isChecked = quizEntity.stars >= MAX_PERCENT
+
+            imvTranslate.imageAlpha = 128
+
+            val lvlTranslate = viewModel.getLvlTranslateByQuizId(quizEntity.id!!)
+
+            //imvTranslate
+            if (lvlTranslate <= 100) imvTranslate.setColorFilter(Color.GRAY)
+            else if (lvlTranslate <= 200) imvTranslate.setColorFilter(Color.YELLOW)
+            else imvTranslate.setColorFilter(Color.BLUE)
+
+            ratingBar.rating = quizEntity.ratingPlayer.toFloat() / 100
+
+            mainTitleButton.text = quizEntity.nameQuiz
+            mainTitleButton.setOnClickListener {
+                listener.onClick(quizEntity.id!!, chbTypeQuiz.isChecked)
+            }
+            imvGradHardQuiz.setOnClickListener {
+                listener.onClick(quizEntity.id!!, chbTypeQuiz.isChecked)
+            }
+            imvGradLightQuiz.setOnClickListener {
+                listener.onClick(quizEntity.id!!, chbTypeQuiz.isChecked)
+            }
+            imvTranslate.setOnClickListener {
+                listener.onClick(quizEntity.id!!, chbTypeQuiz.isChecked)
+            }
+
+            tvName.visibility = View.VISIBLE
+            tvTime.visibility = View.VISIBLE
+            tvName.text = quizEntity.userName
+            tvTime.text = quizEntity.data
+        }
+
+        @OptIn(InternalCoroutinesApi::class)
+        private fun ActivityMainItemBinding.initView(
+            quizEntity: QuizEntity,
+            goHardQuiz: String,
+            viewModel: MainActivityViewModel,
+            listener: Listener
+        ) {
             if (quizEntity.stars == MAX_PERCENT) {
                 Toast.makeText(binding.root.context, goHardQuiz, Toast.LENGTH_SHORT).show()
             }
 
-            log("quizEntity.stars = ${quizEntity.stars}")
-            log("quizEntity.stars position = $position")
-
             if (quizEntity.stars >= MAX_PERCENT) {
                 log("quizEntity.stars 1")
                 imvGradLightQuiz.visibility = View.VISIBLE
Index: app/src/main/java/com/tpov/schoolquiz/di/ApplicationComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.di\r\n\r\nimport android.app.Application\r\nimport com.tpov.schoolquiz.presentation.main.FragmentMain\r\nimport com.tpov.schoolquiz.presentation.main.MainActivity\r\nimport com.tpov.schoolquiz.presentation.network.AutorisationFragment\r\nimport com.tpov.schoolquiz.presentation.network.chat.ChatFragment\r\nimport com.tpov.schoolquiz.presentation.network.chat.ChatViewModel\r\nimport com.tpov.schoolquiz.presentation.network.event.EventFragment\r\nimport com.tpov.schoolquiz.presentation.network.event.EventViewModel\r\nimport com.tpov.schoolquiz.presentation.network.event.TranslateQuestionFragment\r\nimport com.tpov.schoolquiz.presentation.network.profile.ProfileFragment\r\nimport com.tpov.schoolquiz.presentation.question.QuestionActivity\r\nimport com.tpov.schoolquiz.presentation.question.QuestionListActivity\r\nimport com.tpov.schoolquiz.presentation.splashscreen.SplashScreen\r\nimport dagger.BindsInstance\r\nimport dagger.Component\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport javax.inject.Singleton\r\n\r\n@Singleton\r\n@Component(\r\n    modules = [\r\n        DBModule::class,\r\n        ViewModelModule::class\r\n    ]\r\n)\r\n@InternalCoroutinesApi\r\ninterface ApplicationComponent {\r\n    fun inject(activity: QuestionActivity)\r\n\r\n    fun inject(activity: QuestionListActivity)\r\n\r\n    fun inject(fragment: FragmentMain)\r\n\r\n    fun inject(activity: SplashScreen)\r\n\r\n    fun inject(activity: MainActivity)\r\n\r\n    fun inject(profileFragment: ProfileFragment)\r\n\r\n    fun inject(autorisationFragment: AutorisationFragment)\r\n\r\n    fun inject(chatFragment: ChatFragment)\r\n\r\n    fun inject(chatViewModel: ChatViewModel)\r\n\r\n    fun inject(eventViewModel: EventViewModel)\r\n\r\n    fun inject(eventFragment: EventFragment)\r\n\r\n    fun inject(translateQuestionFragment: TranslateQuestionFragment)\r\n\r\n\r\n    @Component.Factory\r\n    interface Factory {     //Граф зависимостей\r\n\r\n        fun create(\r\n            @BindsInstance application: Application\r\n        ): ApplicationComponent\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/di/ApplicationComponent.kt b/app/src/main/java/com/tpov/schoolquiz/di/ApplicationComponent.kt
--- a/app/src/main/java/com/tpov/schoolquiz/di/ApplicationComponent.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/di/ApplicationComponent.kt	(date 1685299236355)
@@ -12,7 +12,6 @@
 import com.tpov.schoolquiz.presentation.network.profile.ProfileFragment
 import com.tpov.schoolquiz.presentation.question.QuestionActivity
 import com.tpov.schoolquiz.presentation.question.QuestionListActivity
-import com.tpov.schoolquiz.presentation.splashscreen.SplashScreen
 import dagger.BindsInstance
 import dagger.Component
 import kotlinx.coroutines.InternalCoroutinesApi
@@ -33,8 +32,6 @@
 
     fun inject(fragment: FragmentMain)
 
-    fun inject(activity: SplashScreen)
-
     fun inject(activity: MainActivity)
 
     fun inject(profileFragment: ProfileFragment)
Index: app/src/main/java/com/tpov/schoolquiz/di/ViewModelModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.di\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport androidx.lifecycle.ViewModel\r\nimport com.tpov.schoolquiz.presentation.main.MainActivityViewModel\r\nimport com.tpov.schoolquiz.presentation.network.AutorisationViewModel\r\nimport com.tpov.schoolquiz.presentation.network.chat.ChatViewModel\r\nimport com.tpov.schoolquiz.presentation.network.event.EventViewModel\r\nimport com.tpov.schoolquiz.presentation.network.profile.ProfileViewModel\r\nimport com.tpov.schoolquiz.presentation.question.QuestionViewModel\r\nimport com.tpov.schoolquiz.presentation.splashscreen.SplashScreenViewModel\r\nimport dagger.Binds\r\nimport dagger.Module\r\nimport dagger.multibindings.IntoMap\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\n\r\n@Module\r\ninterface ViewModelModule {\r\n    @Binds\r\n    fun bindContext(application: Application): Context\r\n    @InternalCoroutinesApi\r\n    @Binds\r\n    @IntoMap\r\n    @ViewModelKey(QuestionViewModel::class)\r\n    fun bindQuestionViewModel(viewModel: QuestionViewModel): ViewModel\r\n\r\n    @InternalCoroutinesApi\r\n    @Binds\r\n    @IntoMap\r\n    @ViewModelKey(MainActivityViewModel::class)\r\n    fun bindMainViewModel(viewModel: MainActivityViewModel): ViewModel\r\n\r\n    @InternalCoroutinesApi\r\n    @Binds\r\n    @IntoMap\r\n    @ViewModelKey(SplashScreenViewModel::class)\r\n    fun bindSplashScreenViewModel(viewModel: SplashScreenViewModel): ViewModel\r\n    @InternalCoroutinesApi\r\n    @Binds\r\n    @IntoMap\r\n    @ViewModelKey(ProfileViewModel::class)\r\n    fun bindProfileViewModel(viewModel: ProfileViewModel): ViewModel\r\n    @InternalCoroutinesApi\r\n    @Binds\r\n    @IntoMap\r\n    @ViewModelKey(AutorisationViewModel::class)\r\n    fun bindAutorisationViewModel(viewModel: AutorisationViewModel): ViewModel\r\n    @InternalCoroutinesApi\r\n    @Binds\r\n    @IntoMap\r\n    @ViewModelKey(ChatViewModel::class)\r\n    fun bindChatViewModel(viewModel: ChatViewModel): ViewModel\r\n    @InternalCoroutinesApi\r\n    @Binds\r\n    @IntoMap\r\n    @ViewModelKey(EventViewModel::class)\r\n    fun bindEventViewModel(viewModel: EventViewModel): ViewModel\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/di/ViewModelModule.kt b/app/src/main/java/com/tpov/schoolquiz/di/ViewModelModule.kt
--- a/app/src/main/java/com/tpov/schoolquiz/di/ViewModelModule.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/di/ViewModelModule.kt	(date 1685299236361)
@@ -9,7 +9,6 @@
 import com.tpov.schoolquiz.presentation.network.event.EventViewModel
 import com.tpov.schoolquiz.presentation.network.profile.ProfileViewModel
 import com.tpov.schoolquiz.presentation.question.QuestionViewModel
-import com.tpov.schoolquiz.presentation.splashscreen.SplashScreenViewModel
 import dagger.Binds
 import dagger.Module
 import dagger.multibindings.IntoMap
@@ -31,11 +30,7 @@
     @ViewModelKey(MainActivityViewModel::class)
     fun bindMainViewModel(viewModel: MainActivityViewModel): ViewModel
 
-    @InternalCoroutinesApi
-    @Binds
-    @IntoMap
-    @ViewModelKey(SplashScreenViewModel::class)
-    fun bindSplashScreenViewModel(viewModel: SplashScreenViewModel): ViewModel
+
     @InternalCoroutinesApi
     @Binds
     @IntoMap
Index: app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.splashscreen\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.animation.Animation\r\nimport android.view.animation.Animation.AnimationListener\r\nimport android.view.animation.AnimationUtils\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager\r\nimport androidx.work.*\r\nimport com.tpov.geoquiz.activity.workers.RefreshDataWorker\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.databinding.ActivitySplashScreenBinding\r\nimport com.tpov.schoolquiz.presentation.MainApp\r\nimport com.tpov.schoolquiz.presentation.factory.ViewModelFactory\r\nimport com.tpov.schoolquiz.presentation.main.MainActivity\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.inject.Inject\r\n\r\n@SuppressLint(\"CustomSplashScreen\")\r\n@InternalCoroutinesApi\r\nclass SplashScreen : AppCompatActivity() {\r\n\r\n    private lateinit var binding: ActivitySplashScreenBinding\r\n\r\n    private lateinit var viewModel: SplashScreenViewModel\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n\r\n    private val component by lazy {\r\n        (application as MainApp).component\r\n    }\r\n\r\n    private val localBroadcastManager by lazy {\r\n        LocalBroadcastManager.getInstance(this)\r\n    }\r\n    private val receiver = object : BroadcastReceiver() {\r\n        @SuppressLint(\"SetTextI18n\")\r\n        override fun onReceive(context: Context?, intent: Intent?) {\r\n            if (intent?.action == \"loaded\") {\r\n                val percent = intent.getIntExtra(\"percent\", 0)\r\n                binding.tvQuestion.text = \"$percent, %\"\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(R.style.AppTheme);\r\n        component.inject(this)\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySplashScreenBinding.inflate(layoutInflater)\r\n        viewModel = ViewModelProvider(this, viewModelFactory)[SplashScreenViewModel::class.java]\r\n        setContentView(binding.root)\r\n        visibleTPOV(false)\r\n        viewModel.getQuestionDay()\r\n\r\n        val intentFilter = IntentFilter().apply {\r\n            addAction(\"loaded\")\r\n        }\r\n        localBroadcastManager.registerReceiver(receiver, intentFilter)\r\n        checkQuestionNotDate(viewModel.loadDate())\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        localBroadcastManager.unregisterReceiver(receiver)\r\n    }\r\n\r\n    private fun visibleTPOV(visible: Boolean) = with(binding) {\r\n        Log.d(\"WorkManager\", \"Видимость ТПОВ.\")\r\n        if (visible) {\r\n            tvT.visibility = View.VISIBLE\r\n            tvP.visibility = View.VISIBLE\r\n            tvO.visibility = View.VISIBLE\r\n            tvV.visibility = View.VISIBLE\r\n        } else {\r\n            tvT.visibility = View.GONE\r\n            tvP.visibility = View.GONE\r\n            tvO.visibility = View.GONE\r\n            tvV.visibility = View.GONE\r\n        }\r\n    }\r\n\r\n    private fun checkQuestionNotDate(systemDate: String) {\r\n        viewModel.numQuestionNotDate = 0\r\n        viewModel.allGetQuestionDay.observe(this) { item ->\r\n            Log.d(\"WorkManager\", \"Загрузка из бд.\")\r\n            item.forEach { it ->\r\n                viewModel.generateQuestion = apiQuestion(it)\r\n                Log.d(\"WorkManager\", it.date)\r\n                if (it.date == \"0\") {\r\n                    viewModel.numQuestionNotDate++\r\n                    viewModel.questionNotNetwork = it.questionTranslate\r\n                    viewModel.answerNotNetwork = it.answerTranslate\r\n                    viewModel.generateQuestionNotNetwork = viewModel.generateQuestion\r\n                    Log.d(\"WorkManager\", \"найден пустой квиз\")\r\n                }\r\n                if (it.date == systemDate || viewModel.numQuestionNotDate == 9 && !viewModel.numSystemDate) {\r\n                    Log.d(\"WorkManager\", \"Создаем 10 квиз с датой\")\r\n                    viewModel.updateQuestionDay(\r\n                        viewModel.generateQuestion.copy(date = systemDate)\r\n                    )        //Если из первых девяти вопросов не найдено который нужно отобразить, мы назначаем вопрос для отображения 10й\r\n\r\n                    viewModel.numSystemDate = true\r\n                    binding.tvQuestion.text = it.questionTranslate\r\n                    binding.tvAnswer.text = it.answerTranslate\r\n                    viewModel.questionNotNetworkDate = it.questionTranslate\r\n                    viewModel.answerNotNetworkDate = it.answerTranslate\r\n                    createAnimation()\r\n                }\r\n            }\r\n\r\n            Log.d(\"WorkManager\", \"Пустых вопросов $viewModel.numQuestionNotDate\")\r\n            if (viewModel.numQuestionNotDate < 10) {\r\n                if (viewModel.numQuestionNotDate == 0) {\r\n                    Toast.makeText(\r\n                        this,\r\n                        \"Пожалуйста подождите, вопросы загружаются с сервера (~1Мб)\",\r\n                        Toast.LENGTH_LONG\r\n                    )\r\n                }\r\n                Log.d(\"WorkManager\", \"Пустых вопросов меньше 10, загружаем еще раз\")\r\n                loadApi()\r\n                viewModel.checkLoadApi = true\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun loadNotification(title: String, name: String) {\r\n        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val notificationChannel = NotificationChannel(\r\n                CHANNEL_ID,\r\n                CHANNEL_NAME,\r\n                NotificationManager.IMPORTANCE_DEFAULT\r\n            )\r\n            notificationManager.createNotificationChannel(notificationChannel)\r\n        }\r\n\r\n        val largeIcon = BitmapFactory.decodeResource(resources, R.mipmap.ic_launcher3)\r\n        val smallIcon = Bitmap.createScaledBitmap(largeIcon, 128, 128, false)\r\n\r\n        val notification = NotificationCompat.Builder(this, CHANNEL_ID)\r\n            .setContentTitle(title)\r\n            .setContentText(name)\r\n            .setSmallIcon(R.mipmap.ic_launcher3)\r\n            .setLargeIcon(smallIcon)\r\n            .build()\r\n        notificationManager.notify(1, notification)\r\n    }\r\n\r\n    private fun loadApi() {\r\n        Log.d(\"WorkManager\", \"Создание воркера.\")\r\n        val workManager = WorkManager.getInstance(application)\r\n\r\n        val requeust2 = RefreshDataWorker.makeRequest(viewModel.numQuestionNotDate)\r\n        val requeust3 = PeriodicWorkRequestBuilder<RefreshDataWorker>(\r\n            20,\r\n            TimeUnit.HOURS,\r\n            28,\r\n            TimeUnit.HOURS\r\n        ).build()\r\n\r\n        workManager.getWorkInfoByIdLiveData(requeust2.id)\r\n            .observe(this) {\r\n                Log.d(\"WorkManager\", \"finish воркер\")\r\n                if (it.state.isFinished) {\r\n                    Log.d(\r\n                        \"WorkManager\",\r\n                        \"${it.progress.getStringArray(RefreshDataWorker.QUESTION)}, \" +\r\n                                \"${it.outputData.getStringArray(RefreshDataWorker.QUESTION)}, Принимаем данные из воркера\"\r\n                    )\r\n\r\n                    viewModel.questionApiArray =\r\n                        it.outputData.getStringArray(RefreshDataWorker.QUESTION)\r\n                    viewModel.answerApiArray =\r\n                        it.outputData.getStringArray(RefreshDataWorker.ANSWER)\r\n\r\n\r\n                    if (viewModel.questionApiArray != null) {\r\n\r\n                        Log.d(\"WorkManager\", \"Квест апи не пустой\")\r\n                        loadQuestion()\r\n                    } else {\r\n                        loadNotification(\"Ошибка\", \"Вопросы не были загружены, ошибка сети.\")\r\n                        if (viewModel.numQuestionNotDate in 1..9) {\r\n                            Log.d(\"WorkManager\", \"Создаем последний свободный вопрос\")\r\n                            viewModel.updateQuestionDay(\r\n                                viewModel.generateQuestionNotNetwork.copy(date = viewModel.loadDate())\r\n                            )        //Если из первых девяти вопросов не найдено который нужно отобразить, мы назначаем вопрос для отображения 10й\r\n\r\n                            viewModel.numSystemDate = true\r\n                            if (viewModel.questionNotNetworkDate != \"\") {\r\n                                binding.tvQuestion.text = viewModel.questionNotNetworkDate\r\n                                binding.tvAnswer.text = viewModel.answerNotNetworkDate\r\n                            } else {\r\n                                binding.tvQuestion.text = viewModel.questionNotNetwork\r\n                                binding.tvAnswer.text = viewModel.answerNotNetwork\r\n                                viewModel.numQuestionNotDate--\r\n                            }\r\n\r\n                            createAnimation()\r\n                            visibleTPOV(true)\r\n                        } else {\r\n                            binding.tvQuestion.text = \"У вас закончились вопросы\"\r\n                        }\r\n                        Log.d(\"WorkManager\", \"Квест апи пустой\")\r\n                        Toast.makeText(\r\n                            this,\r\n                            \"Не удалось подключится к интернету\",\r\n                            Toast.LENGTH_LONG\r\n                        )\r\n                            .show()\r\n                        createAnimation()\r\n                    }\r\n                }\r\n            }\r\n        Log.d(\"WorkManager\", \"Передаем - $viewModel.numQuestionNotDate\")\r\n        loadNotification(\"Загрузка\", \"Подключение к сети\")\r\n        workManager.enqueue(requeust2)\r\n        workManager.enqueue(requeust3)\r\n    }\r\n\r\n    private fun loadQuestion() {\r\n        viewModel.loadQuestion()\r\n\r\n        loadNotification(\"Успех\", \"Загружены вопросы\")\r\n        Log.d(\"WorkManager\", \"Закончилась загрузка квеста /n ищем еще раз\")\r\n        Thread.sleep(250)\r\n        viewModel.getQuestionDay()\r\n    }\r\n\r\n    private fun createAnimation() = with(binding) {\r\n        visibleTPOV(true)\r\n\r\n        tvT.startAnimation(AnimationUtils.loadAnimation(this@SplashScreen, R.anim.anim_splash_t))\r\n        tvP.startAnimation(AnimationUtils.loadAnimation(this@SplashScreen, R.anim.anim_splash_p))\r\n        tvO.startAnimation(AnimationUtils.loadAnimation(this@SplashScreen, R.anim.anim_splash_o))\r\n\r\n        var anim3 = AnimationUtils.loadAnimation(this@SplashScreen, R.anim.anim_splash_v)\r\n        animationListener(anim3)\r\n        tvV.startAnimation(anim3)\r\n    }\r\n\r\n    private fun animationListener(anim: Animation) {\r\n\r\n        anim.setAnimationListener(object : AnimationListener {\r\n            override fun onAnimationStart(p0: Animation?) {\r\n                visibleTPOV(true)\r\n            }\r\n\r\n            override fun onAnimationEnd(p0: Animation?) {\r\n                visibleTPOV(false)\r\n                startActivity()\r\n            }\r\n\r\n            override fun onAnimationRepeat(p0: Animation?) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun startActivity() {\r\n        var intent = Intent(this, MainActivity::class.java)\r\n        intent.putExtra(MainActivity.NUM_QUESTION_NOT_NUL, viewModel.numQuestionNotDate)\r\n        startActivity(intent)\r\n        finish()\r\n    }\r\n\r\n    companion object {\r\n        const val CHANNEL_ID = \"channel_id\"\r\n        const val CHANNEL_NAME = \"load_question\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreen.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreen.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreen.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreen.kt	(date 1685299236367)
@@ -1,36 +1,19 @@
 package com.tpov.schoolquiz.presentation.splashscreen
 
 import android.annotation.SuppressLint
-import android.app.NotificationChannel
-import android.app.NotificationManager
-import android.content.BroadcastReceiver
-import android.content.Context
 import android.content.Intent
-import android.content.IntentFilter
-import android.graphics.Bitmap
-import android.graphics.BitmapFactory
-import android.os.Build
 import android.os.Bundle
 import android.util.Log
 import android.view.View
 import android.view.animation.Animation
 import android.view.animation.Animation.AnimationListener
 import android.view.animation.AnimationUtils
-import android.widget.Toast
 import androidx.appcompat.app.AppCompatActivity
-import androidx.core.app.NotificationCompat
-import androidx.lifecycle.ViewModelProvider
-import androidx.localbroadcastmanager.content.LocalBroadcastManager
 import androidx.work.*
-import com.tpov.geoquiz.activity.workers.RefreshDataWorker
 import com.tpov.schoolquiz.R
 import com.tpov.schoolquiz.databinding.ActivitySplashScreenBinding
-import com.tpov.schoolquiz.presentation.MainApp
-import com.tpov.schoolquiz.presentation.factory.ViewModelFactory
 import com.tpov.schoolquiz.presentation.main.MainActivity
 import kotlinx.coroutines.InternalCoroutinesApi
-import java.util.concurrent.TimeUnit
-import javax.inject.Inject
 
 @SuppressLint("CustomSplashScreen")
 @InternalCoroutinesApi
@@ -38,47 +21,14 @@
 
     private lateinit var binding: ActivitySplashScreenBinding
 
-    private lateinit var viewModel: SplashScreenViewModel
-    @Inject
-    lateinit var viewModelFactory: ViewModelFactory
-
-    private val component by lazy {
-        (application as MainApp).component
-    }
-
-    private val localBroadcastManager by lazy {
-        LocalBroadcastManager.getInstance(this)
-    }
-    private val receiver = object : BroadcastReceiver() {
-        @SuppressLint("SetTextI18n")
-        override fun onReceive(context: Context?, intent: Intent?) {
-            if (intent?.action == "loaded") {
-                val percent = intent.getIntExtra("percent", 0)
-                binding.tvQuestion.text = "$percent, %"
-            }
-        }
-    }
-
     override fun onCreate(savedInstanceState: Bundle?) {
         setTheme(R.style.AppTheme);
-        component.inject(this)
         super.onCreate(savedInstanceState)
         binding = ActivitySplashScreenBinding.inflate(layoutInflater)
-        viewModel = ViewModelProvider(this, viewModelFactory)[SplashScreenViewModel::class.java]
         setContentView(binding.root)
         visibleTPOV(false)
-        viewModel.getQuestionDay()
 
-        val intentFilter = IntentFilter().apply {
-            addAction("loaded")
-        }
-        localBroadcastManager.registerReceiver(receiver, intentFilter)
-        checkQuestionNotDate(viewModel.loadDate())
-    }
-
-    override fun onDestroy() {
-        super.onDestroy()
-        localBroadcastManager.unregisterReceiver(receiver)
+        createAnimation()
     }
 
     private fun visibleTPOV(visible: Boolean) = with(binding) {
@@ -96,154 +46,6 @@
         }
     }
 
-    private fun checkQuestionNotDate(systemDate: String) {
-        viewModel.numQuestionNotDate = 0
-        viewModel.allGetQuestionDay.observe(this) { item ->
-            Log.d("WorkManager", "Загрузка из бд.")
-            item.forEach { it ->
-                viewModel.generateQuestion = apiQuestion(it)
-                Log.d("WorkManager", it.date)
-                if (it.date == "0") {
-                    viewModel.numQuestionNotDate++
-                    viewModel.questionNotNetwork = it.questionTranslate
-                    viewModel.answerNotNetwork = it.answerTranslate
-                    viewModel.generateQuestionNotNetwork = viewModel.generateQuestion
-                    Log.d("WorkManager", "найден пустой квиз")
-                }
-                if (it.date == systemDate || viewModel.numQuestionNotDate == 9 && !viewModel.numSystemDate) {
-                    Log.d("WorkManager", "Создаем 10 квиз с датой")
-                    viewModel.updateQuestionDay(
-                        viewModel.generateQuestion.copy(date = systemDate)
-                    )        //Если из первых девяти вопросов не найдено который нужно отобразить, мы назначаем вопрос для отображения 10й
-
-                    viewModel.numSystemDate = true
-                    binding.tvQuestion.text = it.questionTranslate
-                    binding.tvAnswer.text = it.answerTranslate
-                    viewModel.questionNotNetworkDate = it.questionTranslate
-                    viewModel.answerNotNetworkDate = it.answerTranslate
-                    createAnimation()
-                }
-            }
-
-            Log.d("WorkManager", "Пустых вопросов $viewModel.numQuestionNotDate")
-            if (viewModel.numQuestionNotDate < 10) {
-                if (viewModel.numQuestionNotDate == 0) {
-                    Toast.makeText(
-                        this,
-                        "Пожалуйста подождите, вопросы загружаются с сервера (~1Мб)",
-                        Toast.LENGTH_LONG
-                    )
-                }
-                Log.d("WorkManager", "Пустых вопросов меньше 10, загружаем еще раз")
-                loadApi()
-                viewModel.checkLoadApi = true
-            }
-        }
-    }
-
-    private fun loadNotification(title: String, name: String) {
-        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            val notificationChannel = NotificationChannel(
-                CHANNEL_ID,
-                CHANNEL_NAME,
-                NotificationManager.IMPORTANCE_DEFAULT
-            )
-            notificationManager.createNotificationChannel(notificationChannel)
-        }
-
-        val largeIcon = BitmapFactory.decodeResource(resources, R.mipmap.ic_launcher3)
-        val smallIcon = Bitmap.createScaledBitmap(largeIcon, 128, 128, false)
-
-        val notification = NotificationCompat.Builder(this, CHANNEL_ID)
-            .setContentTitle(title)
-            .setContentText(name)
-            .setSmallIcon(R.mipmap.ic_launcher3)
-            .setLargeIcon(smallIcon)
-            .build()
-        notificationManager.notify(1, notification)
-    }
-
-    private fun loadApi() {
-        Log.d("WorkManager", "Создание воркера.")
-        val workManager = WorkManager.getInstance(application)
-
-        val requeust2 = RefreshDataWorker.makeRequest(viewModel.numQuestionNotDate)
-        val requeust3 = PeriodicWorkRequestBuilder<RefreshDataWorker>(
-            20,
-            TimeUnit.HOURS,
-            28,
-            TimeUnit.HOURS
-        ).build()
-
-        workManager.getWorkInfoByIdLiveData(requeust2.id)
-            .observe(this) {
-                Log.d("WorkManager", "finish воркер")
-                if (it.state.isFinished) {
-                    Log.d(
-                        "WorkManager",
-                        "${it.progress.getStringArray(RefreshDataWorker.QUESTION)}, " +
-                                "${it.outputData.getStringArray(RefreshDataWorker.QUESTION)}, Принимаем данные из воркера"
-                    )
-
-                    viewModel.questionApiArray =
-                        it.outputData.getStringArray(RefreshDataWorker.QUESTION)
-                    viewModel.answerApiArray =
-                        it.outputData.getStringArray(RefreshDataWorker.ANSWER)
-
-
-                    if (viewModel.questionApiArray != null) {
-
-                        Log.d("WorkManager", "Квест апи не пустой")
-                        loadQuestion()
-                    } else {
-                        loadNotification("Ошибка", "Вопросы не были загружены, ошибка сети.")
-                        if (viewModel.numQuestionNotDate in 1..9) {
-                            Log.d("WorkManager", "Создаем последний свободный вопрос")
-                            viewModel.updateQuestionDay(
-                                viewModel.generateQuestionNotNetwork.copy(date = viewModel.loadDate())
-                            )        //Если из первых девяти вопросов не найдено который нужно отобразить, мы назначаем вопрос для отображения 10й
-
-                            viewModel.numSystemDate = true
-                            if (viewModel.questionNotNetworkDate != "") {
-                                binding.tvQuestion.text = viewModel.questionNotNetworkDate
-                                binding.tvAnswer.text = viewModel.answerNotNetworkDate
-                            } else {
-                                binding.tvQuestion.text = viewModel.questionNotNetwork
-                                binding.tvAnswer.text = viewModel.answerNotNetwork
-                                viewModel.numQuestionNotDate--
-                            }
-
-                            createAnimation()
-                            visibleTPOV(true)
-                        } else {
-                            binding.tvQuestion.text = "У вас закончились вопросы"
-                        }
-                        Log.d("WorkManager", "Квест апи пустой")
-                        Toast.makeText(
-                            this,
-                            "Не удалось подключится к интернету",
-                            Toast.LENGTH_LONG
-                        )
-                            .show()
-                        createAnimation()
-                    }
-                }
-            }
-        Log.d("WorkManager", "Передаем - $viewModel.numQuestionNotDate")
-        loadNotification("Загрузка", "Подключение к сети")
-        workManager.enqueue(requeust2)
-        workManager.enqueue(requeust3)
-    }
-
-    private fun loadQuestion() {
-        viewModel.loadQuestion()
-
-        loadNotification("Успех", "Загружены вопросы")
-        Log.d("WorkManager", "Закончилась загрузка квеста /n ищем еще раз")
-        Thread.sleep(250)
-        viewModel.getQuestionDay()
-    }
 
     private fun createAnimation() = with(binding) {
         visibleTPOV(true)
@@ -277,13 +79,11 @@
 
     private fun startActivity() {
         var intent = Intent(this, MainActivity::class.java)
-        intent.putExtra(MainActivity.NUM_QUESTION_NOT_NUL, viewModel.numQuestionNotDate)
         startActivity(intent)
         finish()
     }
 
     companion object {
-        const val CHANNEL_ID = "channel_id"
-        const val CHANNEL_NAME = "load_question"
+
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.question\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport android.os.CountDownTimer\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionDetailEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.domain.DeleteQuestionByIdQuizUseCase\r\nimport com.tpov.schoolquiz.domain.DeleteQuestionDetailByIdQuiz\r\nimport com.tpov.schoolquiz.domain.DeleteQuizUseCase\r\nimport com.tpov.schoolquiz.domain.GetProfileUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuestionDetailListUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuestionListByIdQuiz\r\nimport com.tpov.schoolquiz.domain.GetQuizByIdUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuizListUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuizLiveDataUseCase\r\nimport com.tpov.schoolquiz.domain.InsertInfoQuestionUseCase\r\nimport com.tpov.schoolquiz.domain.InsertQuestionUseCase\r\nimport com.tpov.schoolquiz.domain.InsertQuizUseCase\r\nimport com.tpov.schoolquiz.domain.UpdateProfileUseCase\r\nimport com.tpov.schoolquiz.domain.UpdateQuestionDetailUseCase\r\nimport com.tpov.schoolquiz.domain.UpdateQuizUseCase\r\nimport com.tpov.schoolquiz.presentation.custom.CalcValues\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getNolic\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getSkill\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId\r\nimport com.tpov.schoolquiz.presentation.dialog.ResultDialog\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport javax.inject.Inject\r\n\r\n@InternalCoroutinesApi\r\nclass QuestionViewModel @Inject constructor(\r\n    application: Application,\r\n    val getQuestionByIdQuizUseCase: GetQuestionListByIdQuiz,\r\n    val getQuestionDetailListUseCase: GetQuestionDetailListUseCase,\r\n    val getQuizUseCase: GetQuizByIdUseCase,\r\n    val insertQuestionDetailEntity: InsertInfoQuestionUseCase,\r\n    val updateQuestionDetailUseCase: UpdateQuestionDetailUseCase,\r\n    val updateQuizUseCase: UpdateQuizUseCase,\r\n    val deleteQuizUseCase: DeleteQuizUseCase,\r\n    val insertQuizUseCase: InsertQuizUseCase,\r\n    val deleteQuestionByIdQuizUseCase: DeleteQuestionByIdQuizUseCase,\r\n    val deleteQuestionDetailByIdQuiz: DeleteQuestionDetailByIdQuiz,\r\n    val insertQuestionUseCase: InsertQuestionUseCase,\r\n    val getQuizLiveDataUseCase: GetQuizLiveDataUseCase,\r\n    val getProfileUseCase: GetProfileUseCase,\r\n    val updateProfileUseCase: UpdateProfileUseCase,\r\n    val getQuizListUseCase: GetQuizListUseCase\r\n) : AndroidViewModel(application) {\r\n\r\n    private lateinit var context: Context\r\n    var timer: CountDownTimer? = null\r\n\r\n    var codeAnswer = \"\"         //Отображает состояние квеста для всех вопросов\r\n    var currentIndex = 0      //Номер вопроса, который виден пользователю\r\n    var numQuestion = 0\r\n    var hardQuestion = false\r\n    var userName = \"\"\r\n    var idQuiz = 0\r\n    var newIdQuizVar = 0\r\n    var createQuestionDetail = true\r\n    var leftAnswer = 0\r\n    var idThisQuestionDetail = 0\r\n    var persent = 0\r\n    var maxPersent = 0\r\n    var persentAll = 0\r\n    lateinit var questionListThis: List<QuestionEntity>\r\n    lateinit var questionDetailListThis: List<QuestionDetailEntity>\r\n    lateinit var quizThis: QuizEntity\r\n    lateinit var tpovId: String\r\n    var resultTranslate = true\r\n    var persentPlayerAll = 0\r\n    var firstQuestionDetail = true\r\n\r\n    private val _shouldCloseLiveData = MutableLiveData<Boolean>()\r\n    val shouldCloseLiveData: LiveData<Boolean> = _shouldCloseLiveData\r\n\r\n    private fun someAction() {\r\n        _shouldCloseLiveData.postValue(true)\r\n    }\r\n\r\n    private var _viewResultLiveData = MutableLiveData<String>()\r\n    var viewResultLiveData: LiveData<String> = _viewResultLiveData\r\n\r\n    fun synthWithDB(context: Context) {\r\n        initConst(context)\r\n        getQuestionsList()\r\n        initVariable()\r\n    }\r\n\r\n    private fun initConst(context: Context) {\r\n        this.context = context\r\n        tpovId = getTpovId().toString()\r\n    }\r\n\r\n    private fun initVariable() {\r\n\r\n        questionDetailListThis.forEach {\r\n\r\n            if (it.hardQuiz == this.hardQuestion) {\r\n                if (getUpdateAnswer(it.codeAnswer)) initOldQuestionDetail(it)\r\n            }\r\n        }\r\n        if (createQuestionDetail) initNewQuestionDetail()\r\n    }\r\n\r\n    private fun initNewQuestionDetail() {\r\n\r\n        GlobalScope.launch {\r\n            withContext(Dispatchers.IO) {\r\n                this@QuestionViewModel.codeAnswer = getCodeAnswer(questionListThis.size)\r\n                this@QuestionViewModel.currentIndex = 0\r\n                this@QuestionViewModel.leftAnswer = questionListThis.size\r\n                this@QuestionViewModel.numQuestion = questionListThis.size\r\n\r\n                this@QuestionViewModel.persentPlayerAll = getQuizUseCase(idQuiz).starsAllPlayer\r\n\r\n                insertQuestionDetailEntity(\r\n                    QuestionDetailEntity(\r\n                        null,\r\n                        idQuiz,\r\n                        TimeManager.getCurrentTime(),\r\n                        codeAnswer,\r\n                        hardQuestion,\r\n                        false\r\n                    )\r\n                )\r\n\r\n                getQuestionDetailListUseCase().forEach {\r\n                    if (it.hardQuiz == this@QuestionViewModel.hardQuestion) {\r\n                        firstQuestionDetail = false\r\n                        if (getUpdateAnswer(it.codeAnswer)) this@QuestionViewModel.idThisQuestionDetail =\r\n                            it.id!!\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getCodeAnswer(size: Int): String {\r\n        var newCodeAnswer = \"\"\r\n        for (i in 0 until size) {\r\n            newCodeAnswer += '0'\r\n        }\r\n        return newCodeAnswer\r\n    }\r\n\r\n    private fun initOldQuestionDetail(questionDetailEntity: QuestionDetailEntity) {\r\n        createQuestionDetail = false\r\n\r\n        try {\r\n\r\n            this.codeAnswer = questionDetailEntity.codeAnswer!!\r\n            this.currentIndex = getCurrentIndex(questionDetailEntity.codeAnswer)!!\r\n            this.leftAnswer = getLeftAnswer(questionDetailEntity.codeAnswer)\r\n            this.numQuestion = leftAnswer\r\n            this.idThisQuestionDetail = questionDetailEntity.id!!\r\n            this.idQuiz = questionDetailEntity.idQuiz\r\n\r\n            this@QuestionViewModel.persentPlayerAll = getQuizUseCase(idQuiz).starsAllPlayer\r\n        } catch (e: Exception) {\r\n            errorLoadQuestion()\r\n        }\r\n    }\r\n\r\n    private fun getCurrentIndex(codeAnswer: String?): Int? {\r\n        if (codeAnswer == null || codeAnswer == \"\") return 0\r\n        for (i in codeAnswer.indices) {\r\n            if (codeAnswer[i] == '0') return i\r\n        }\r\n        return null\r\n    }\r\n\r\n    private fun errorLoadQuestion(): String {\r\n        Toast.makeText(\r\n            getApplication(),\r\n            \"Ошибка в базе данных, ждите пока разработчики пофиксят\",\r\n            Toast.LENGTH_LONG\r\n        ).show()\r\n\r\n        return \"\"\r\n    }\r\n\r\n    private fun getQuestionsList() {\r\n\r\n        questionListThis = getQuestionByIdQuizUseCase(idQuiz)\r\n        log(\r\n            \"getQuestionsList, getQuestionByIdQuizUseCase(idQuiz) ${\r\n                getQuestionByIdQuizUseCase(\r\n                    idQuiz\r\n                )\r\n            }\"\r\n        )\r\n        var list = mutableListOf<QuestionEntity>()\r\n        questionListThis.forEach {\r\n            log(\"getQuestionsList, it.hardQuestion:${it.hardQuestion}, hardQuestion: $hardQuestion\")\r\n\r\n            log(\"DSEFSE, it.hardQuestion:${it.hardQuestion}, hardQuestion: $hardQuestion\")\r\n            try {\r\n                if (it.hardQuestion == hardQuestion) list.add(it)\r\n            } catch (e: Exception) {\r\n                list.add(it)\r\n            }\r\n        }\r\n\r\n        questionListThis = list\r\n\r\n        log(\"DSEFSE, questionListThis: $questionListThis\")\r\n        var listQuestionDetail = mutableListOf<QuestionDetailEntity>()\r\n        getQuestionDetailListUseCase().forEach {\r\n            if (it.idQuiz == this@QuestionViewModel.idQuiz && it.hardQuiz == this@QuestionViewModel.hardQuestion) listQuestionDetail.add(\r\n                it\r\n            )\r\n        }\r\n        questionDetailListThis = listQuestionDetail\r\n\r\n        quizThis = getQuizUseCase(idQuiz)\r\n    }\r\n\r\n\r\n    private fun getUpdateAnswer(codeAnswer: String?): Boolean {\r\n        if (codeAnswer == null || codeAnswer == \"\") return false\r\n        codeAnswer.forEach {\r\n            if (it == '0') return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    private fun useCheat() {\r\n\r\n        updateProfileUseCase(\r\n            getProfileUseCase(getTpovId()).copy(\r\n                count = getProfileUseCase(getTpovId()).count?.minus(\r\n                    1000\r\n                )\r\n            )\r\n        )\r\n    }\r\n\r\n    fun trueButton() {\r\n        if (questionListThis[currentIndex].answerQuestion) setTrueAnswer()\r\n        else setFalseAnswer()\r\n    }\r\n\r\n    private fun setFalseAnswer() {\r\n        log(\"setFalseAnswer\")\r\n        var codeAnswer = \"\"\r\n        var i = 0\r\n        repeat(this.codeAnswer.length) {\r\n            codeAnswer += if (i == currentIndex) '1'\r\n            else this.codeAnswer[i]\r\n            i++\r\n        }\r\n        this.codeAnswer = codeAnswer\r\n\r\n        leftAnswer--\r\n\r\n        updateQuestionDetail()\r\n    }\r\n\r\n    private fun updateQuestionDetail() {\r\n        log(\"updateQuestionDetail()\")\r\n        updateQuestionDetailUseCase(\r\n            QuestionDetailEntity(\r\n                idThisQuestionDetail,\r\n                idQuiz,\r\n                TimeManager.getCurrentTime(),\r\n                codeAnswer,\r\n                hardQuestion,\r\n                false\r\n            )\r\n        )\r\n\r\n        if (leftAnswer == 0) result()\r\n    }\r\n\r\n    private fun setTrueAnswer() {\r\n        log(\"setTrueAnswer\")\r\n        var codeAnswer = \"\"\r\n        var i = 0\r\n        repeat(this.codeAnswer.length) {\r\n            codeAnswer += if (i == currentIndex) '2'\r\n            else this.codeAnswer[i]\r\n            i++\r\n        }\r\n\r\n        log(\"setTrueAnswer codeAnswer: ${codeAnswer}\")\r\n        log(\"setTrueAnswer this.codeAnswer: ${this.codeAnswer}\")\r\n        this.codeAnswer = codeAnswer\r\n\r\n        leftAnswer--\r\n\r\n        updateQuestionDetail()\r\n    }\r\n\r\n    fun falseButton() {\r\n        if (!questionListThis[currentIndex].answerQuestion) setTrueAnswer()\r\n        else setFalseAnswer()\r\n    }\r\n\r\n\r\n    private fun getLeftAnswer(codeAnswer: String?): Int {\r\n        if (codeAnswer == \"\" || codeAnswer == null) return numQuestion\r\n        var i = 0\r\n        codeAnswer.forEach {\r\n            if (it == '0') i++\r\n        }\r\n        return i\r\n    }\r\n\r\n    private fun result() {\r\n        setPercentResult()\r\n        Log.d(\"iofjerdklgj\", \"starsPercentAll ${persent}\")\r\n        showResultDialog()\r\n    }\r\n\r\n    private fun setPercentResult() {\r\n        var i = 0\r\n        codeAnswer.forEach {\r\n            if (it == '2') i++\r\n        }\r\n        getQuestionsList()\r\n        i = 0\r\n        var j = 0\r\n        var iThis = 0\r\n        var perc = mutableListOf<Int>()\r\n        maxPersent = 0\r\n\r\n        log(\"questionDetailListThis: $questionDetailListThis\")\r\n        questionDetailListThis.forEach {\r\n            i = 0\r\n            j = 0\r\n            it.codeAnswer?.forEach { item ->\r\n                if (item == '2') i++\r\n                j++\r\n            }\r\n            if (try {\r\n                    ((100 * i) / j)\r\n                } catch (e: Exception) {\r\n                    0\r\n                } > maxPersent\r\n            ) maxPersent = ((100 * i) / j)\r\n            perc.add(((100 * i) / j))\r\n        }\r\n        j = 0\r\n        i = 0\r\n        perc.forEach {\r\n            i += it\r\n        }\r\n\r\n        persentAll = i / perc.size\r\n\r\n        j = 0\r\n        i = 0\r\n        codeAnswer.forEach {\r\n            if (it == '2') {\r\n                i++\r\n            }\r\n            j++\r\n        }\r\n        persent = ((100 * i) / j)\r\n    }\r\n\r\n    private fun showResultDialog() {\r\n\r\n        val resultDialog = ResultDialog(\r\n            hardQuestion,\r\n            quizThis.event,\r\n            quizThis.rating,\r\n            this@QuestionViewModel.persent,\r\n            this@QuestionViewModel.persentAll,\r\n            this@QuestionViewModel.persentPlayerAll,\r\n            this@QuestionViewModel.firstQuestionDetail,\r\n            onDismissListener = { rating ->\r\n                saveResult(rating)\r\n            },\r\n            onRatingSelected = { _ ->\r\n                // Do something when the rating is selected\r\n            },\r\n            context = context, // Pass the context of the activity or fragment\r\n            profile = getProfileUseCase(getTpovId())\r\n        )\r\n        resultDialog.show()\r\n    }\r\n\r\n    private fun saveResult(rating: Int) {\r\n\r\n        log(\"saveResultawd getProfileUseCase(getTpovId()).copy(pointsNolics = getNolic() + CalcValues.getValueNolicForGame(hardQuestion, rating))\")\r\n        log(\"saveResultawd: getNolic():${getNolic()}\")\r\n        log(\r\n            \"saveResultawd: ${\r\n                getProfileUseCase(getTpovId()).copy(\r\n                    pointsNolics = (getNolic() + CalcValues.getValueNolicForGame(\r\n                        hardQuestion,\r\n                        persent,\r\n                        quizThis.event,\r\n                        firstQuestionDetail,\r\n                        getProfileUseCase(getTpovId())\r\n                    ))\r\n                )\r\n            }\"\r\n        )\r\n        log(\r\n            \"saveResultawd: ${\r\n                CalcValues.getValueNolicForGame(\r\n                    hardQuestion, this@QuestionViewModel.persent,\r\n                    quizThis.event,\r\n                    firstQuestionDetail,\r\n                    getProfileUseCase(getTpovId())\r\n                )\r\n            }\"\r\n        )\r\n        updateProfileUseCase(\r\n            getProfileUseCase(getTpovId()).copy(\r\n                pointsNolics = (getNolic() + CalcValues.getValueNolicForGame(\r\n                    hardQuestion,\r\n                    persent,\r\n                    quizThis.event,\r\n                    firstQuestionDetail,\r\n                    getProfileUseCase(getTpovId())\r\n                )),\r\n                pointsSkill = (getSkill() + CalcValues.getValueSkillForFame(\r\n                    hardQuestion,\r\n                    persent,\r\n                    quizThis.event,\r\n                    firstQuestionDetail,\r\n                    getProfileUseCase(getTpovId())\r\n                ))\r\n            )\r\n        )\r\n\r\n        var perc = mutableListOf<Int>()\r\n        log(\"saveResult getQuestionDetailListUseCase(): ${getQuestionDetailListUseCase()}\")\r\n        getQuestionDetailListUseCase().forEach {\r\n            log(\"saveResult all detail: ${it}, it.idQuiz: ${it.idQuiz}, this.idQuiz: ${this@QuestionViewModel.idQuiz}\")\r\n\r\n            var i = 0\r\n            var j = 0\r\n            if (it.idQuiz == this@QuestionViewModel.idQuiz) {\r\n\r\n                it.codeAnswer?.forEach { item ->\r\n                    if (item == '2') i++\r\n                    j++\r\n                }\r\n\r\n                if (!it.hardQuiz) {\r\n                    if (((100 * i) / j) > maxPersent) maxPersent = ((100 * i) / j)\r\n                    perc.add(((100 * i) / j))\r\n                } else {\r\n                    if ((((100 * i) / j) / 5) + 100 > maxPersent) maxPersent =\r\n                        (((100 * i) / j) / 5) + 100\r\n                    perc.add((((100 * i) / j) / 5) + 100)\r\n                }\r\n\r\n                var j = 0\r\n                var i = 0\r\n                perc.forEach { itemPerc ->\r\n                    i += itemPerc\r\n                }\r\n                persentAll = i / perc.size\r\n\r\n                log(\"saveResult $maxPersent\")\r\n\r\n                when (quizThis.event) {\r\n                    1, 5, 6, 7, 8 -> updateQuizUseCase(\r\n                        quizThis.copy(\r\n                            stars = maxPersent,\r\n                            starsAll = persentAll,\r\n                            rating = rating\r\n                        )\r\n                    )\r\n\r\n                    2, 3, 4 -> updateEvent(rating)\r\n\r\n                }\r\n\r\n                someAction()\r\n                Log.d(\"ku65k\", \"rating $rating\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getNewIdQuiz(): Int {\r\n        var i = 0\r\n\r\n        getQuizListUseCase(getTpovId()).forEach {\r\n            log(\"getNewIdQuiz: it: ${it.id}\")\r\n            if (it.id!! in (i + 1)..100) {\r\n                i = it.id!!\r\n            }\r\n        }\r\n        return i + 1\r\n    }\r\n\r\n    private fun updateEvent(rating: Int) {\r\n\r\n        newIdQuizVar = getNewIdQuiz()\r\n        if (getRating(rating) != 0) {\r\n            log(\"DSEFSE, it: quiz\")\r\n            insertQuizUseCase(\r\n                quizThis.copy(\r\n                    id = newIdQuizVar,\r\n                    event = getRating(rating),\r\n                    rating = rating,\r\n                    starsAll = 0,\r\n                    stars = 0\r\n                )\r\n            )\r\n            getQuestionByIdQuizUseCase(idQuiz).forEach {\r\n                log(\"DSEFSE, it: $it\")\r\n                insertQuestionUseCase(it.copy(idQuiz = newIdQuizVar))\r\n            }\r\n\r\n        }\r\n        deleteQuizUseCase(idQuiz)\r\n        deleteQuestionByIdQuizUseCase(idQuiz)\r\n        deleteQuestionDetailByIdQuiz(idQuiz)\r\n        insertQuizPlayers()\r\n\r\n    }\r\n\r\n    private fun getRating(rating: Int): Int {\r\n        log(\"fun getRating: $rating\")\r\n        return if (rating == 1) 0\r\n        else quizThis.event + 1\r\n    }\r\n\r\n    private fun insertQuizPlayers() {\r\n\r\n    }\r\n\r\n    fun getCurrentTimer(typeQuestion: Boolean): Int {\r\n        return if (typeQuestion) TIME_HARD_QUESTION\r\n        else TIME_LIGHT_QUESTION\r\n    }\r\n\r\n    fun formatTime(millisUntilFinished: Long): String {\r\n        val seconds = millisUntilFinished / MILLIS_IN_SECONDS\r\n        val minutes = seconds / SECONDS_IN_MINUTES\r\n        val leftSeconds = seconds - (minutes * SECONDS_IN_MINUTES)\r\n        return String.format(\"%02d:%02d\", minutes, leftSeconds)\r\n    }\r\n\r\n    companion object {\r\n        const val MILLIS_IN_SECONDS = 1000L\r\n        private const val SECONDS_IN_MINUTES = 60\r\n\r\n        private const val TIME_HARD_QUESTION = 10\r\n        private const val TIME_LIGHT_QUESTION = 20\r\n\r\n        private const val MAX_PERCENT = 100\r\n        private const val COEF_PERCENT_HARD_QUIZ =\r\n            20 //Это нужно что-бы посчитать проценты сложных вопросов\r\n    }\r\n}\r\n\r\nfun log(m: String) {\r\n    Logcat.log(m, \"Question\", Logcat.LOG_VIEW_MODEL)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt	(date 1685299236374)
@@ -11,21 +11,7 @@
 import com.tpov.schoolquiz.data.database.entities.QuestionDetailEntity
 import com.tpov.schoolquiz.data.database.entities.QuestionEntity
 import com.tpov.schoolquiz.data.database.entities.QuizEntity
-import com.tpov.schoolquiz.domain.DeleteQuestionByIdQuizUseCase
-import com.tpov.schoolquiz.domain.DeleteQuestionDetailByIdQuiz
-import com.tpov.schoolquiz.domain.DeleteQuizUseCase
-import com.tpov.schoolquiz.domain.GetProfileUseCase
-import com.tpov.schoolquiz.domain.GetQuestionDetailListUseCase
-import com.tpov.schoolquiz.domain.GetQuestionListByIdQuiz
-import com.tpov.schoolquiz.domain.GetQuizByIdUseCase
-import com.tpov.schoolquiz.domain.GetQuizListUseCase
-import com.tpov.schoolquiz.domain.GetQuizLiveDataUseCase
-import com.tpov.schoolquiz.domain.InsertInfoQuestionUseCase
-import com.tpov.schoolquiz.domain.InsertQuestionUseCase
-import com.tpov.schoolquiz.domain.InsertQuizUseCase
-import com.tpov.schoolquiz.domain.UpdateProfileUseCase
-import com.tpov.schoolquiz.domain.UpdateQuestionDetailUseCase
-import com.tpov.schoolquiz.domain.UpdateQuizUseCase
+import com.tpov.schoolquiz.domain.*
 import com.tpov.schoolquiz.presentation.custom.CalcValues
 import com.tpov.schoolquiz.presentation.custom.Logcat
 import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getNolic
@@ -33,11 +19,7 @@
 import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId
 import com.tpov.schoolquiz.presentation.dialog.ResultDialog
 import com.tpov.shoppinglist.utils.TimeManager
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.GlobalScope
-import kotlinx.coroutines.InternalCoroutinesApi
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.withContext
+import kotlinx.coroutines.*
 import javax.inject.Inject
 
 @InternalCoroutinesApi
@@ -80,19 +62,15 @@
     lateinit var questionDetailListThis: List<QuestionDetailEntity>
     lateinit var quizThis: QuizEntity
     lateinit var tpovId: String
-    var resultTranslate = true
     var persentPlayerAll = 0
     var firstQuestionDetail = true
 
-    private val _shouldCloseLiveData = MutableLiveData<Boolean>()
-    val shouldCloseLiveData: LiveData<Boolean> = _shouldCloseLiveData
+    private val _shouldCloseLiveData = MutableLiveData<Int>()
+    val shouldCloseLiveData: LiveData<Int> = _shouldCloseLiveData
 
-    private fun someAction() {
-        _shouldCloseLiveData.postValue(true)
+    private fun someAction(result: Int) {
+        _shouldCloseLiveData.postValue(result)
     }
-
-    private var _viewResultLiveData = MutableLiveData<String>()
-    var viewResultLiveData: LiveData<String> = _viewResultLiveData
 
     fun synthWithDB(context: Context) {
         initConst(context)
@@ -383,8 +361,8 @@
             this@QuestionViewModel.persentAll,
             this@QuestionViewModel.persentPlayerAll,
             this@QuestionViewModel.firstQuestionDetail,
-            onDismissListener = { rating ->
-                saveResult(rating)
+            onDismissListener = { rating, result ->
+                saveResult(rating, result)
             },
             onRatingSelected = { _ ->
                 // Do something when the rating is selected
@@ -395,7 +373,7 @@
         resultDialog.show()
     }
 
-    private fun saveResult(rating: Int) {
+    private fun saveResult(rating: Int, result: Int) {
 
         log("saveResultawd getProfileUseCase(getTpovId()).copy(pointsNolics = getNolic() + CalcValues.getValueNolicForGame(hardQuestion, rating))")
         log("saveResultawd: getNolic():${getNolic()}")
@@ -486,7 +464,7 @@
 
                 }
 
-                someAction()
+                someAction(result)
                 Log.d("ku65k", "rating $rating")
             }
         }
Index: app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data.database\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.room.*\r\nimport com.tpov.schoolquiz.data.database.entities.*\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\n@Dao\r\n\r\ninterface QuizDao {\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertQuizDetailDB(note: QuestionDetailEntity)\r\n\r\n    suspend fun insertQuizDetail(note: QuestionDetailEntity) {\r\n        log(\"fun insertQuizDetail $note\")\r\n        insertQuizDetailDB(note)\r\n    }\r\n\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertQuizDetailListDB(note: List<QuestionDetailEntity>)\r\n\r\n    suspend fun insertQuizDetailList(note: List<QuestionDetailEntity>) {\r\n        log(\"fun insertQuizDetailList $note\")\r\n        insertQuizDetailListDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertProfileDB(profile: ProfileEntity)\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertPlayersList(playersList: List<PlayersEntity>)\r\n\r\n    @Query(\"DELETE FROM table_players\")\r\n    suspend fun deletePlayersList()\r\n\r\n    suspend fun insertProfile(profile: ProfileEntity) {\r\n        log(\"fun insertProfile $profile\")\r\n        insertProfileDB(profile)\r\n    }\r\n\r\n    suspend fun insertQuiz(note: QuizEntity) {\r\n        if (note.id == null) {\r\n            var id = -1\r\n            do {\r\n                id++\r\n                val quiz = getNameQuizByIdQuiz(id)\r\n            } while (quiz != null)\r\n            note.id = id\r\n        }\r\n\r\n        log(\"fun insertQuiz $note\")\r\n        this.insertQuizNewId(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertQuizNewId(note: QuizEntity)\r\n\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertQuestionDB(name: QuestionEntity)\r\n\r\n    suspend fun insertQuestion(note: QuestionEntity) {\r\n        log(\"fun insertQuestion $note\")\r\n        insertQuestionDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertQuizListDB(note: List<QuizEntity>)\r\n\r\n    suspend fun insertQuizList(note: List<QuizEntity>) {\r\n        log(\"fun insertQuizList $note\")\r\n        insertQuizListDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertQuestionListDB(name: List<QuestionEntity>)\r\n\r\n    suspend fun insertQuestionList(note: List<QuestionEntity>) {\r\n        log(\"fun insertQuestionList $note\")\r\n        insertQuestionListDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertListApiQuestionDB(name: List<ApiQuestion>)\r\n\r\n    suspend fun insertListApiQuestion(note: List<ApiQuestion>) {\r\n        log(\"fun insertListApiQuestion $note\")\r\n        insertListApiQuestionDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    suspend fun insertChatDB(chatEntity: ChatEntity)\r\n\r\n    suspend fun insertChat(chatEntity: ChatEntity) {\r\n        log(\"fun insertChat $chatEntity\")\r\n        insertChatDB(chatEntity)\r\n    }\r\n\r\n     fun getProfileFlow(tpovId: Int): Flow<ProfileEntity>  {\r\n        log(\"fun getProfileFlow tpovId: $tpovId, return: ${getProfileByTpovIdDB(tpovId)}\")\r\n        return getProfileFlowDB(tpovId)\r\n    }\r\n    suspend fun getProfile(tpovId: Int): ProfileEntity {\r\n        log(\"fun getProfile tpovId: $tpovId, return: ${getProfileDB(tpovId)}\")\r\n        return getProfileDB(tpovId)\r\n    }\r\n    suspend fun getTpovIdByEmail(email: String): Int {\r\n        log(\"fun getTpovIdByEmail email: $email, return: ${getTpovIdByEmailDB(email)}\")\r\n        return getTpovIdByEmailDB(email)\r\n    }\r\n    suspend fun getProfileByTpovId(tpovId: Int): ProfileEntity {\r\n        log(\"fun getProfileByTpovId tpovId: $tpovId, return: ${getProfileByTpovIdDB(tpovId)}\")\r\n        return getProfileByTpovIdDB(tpovId)\r\n    }\r\n    suspend fun getTpovIdByUid(uid: String?): ProfileEntity {\r\n        log(\"fun getTpovIdByUid uid: $uid, return: ${getTpovIdByUidDB(uid)}\")\r\n        return getTpovIdByUidDB(uid)\r\n    }\r\n    suspend fun getQuizList(tpovId: Int): List<QuizEntity> {\r\n        log(\"fun getQuizList tpovId: $tpovId, return: ${getQuizListDB(tpovId)}\")\r\n        return getQuizListDB(tpovId)\r\n    }\r\n\r\n    suspend fun getTranslateEvent(): List<QuestionEntity> {\r\n        log(\"fun getTranslateEvent return: ${getTranslateEventDB()}\")\r\n        return getTranslateEventDB()\r\n    }\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE tpovId LIKE :tpovId\")\r\n    fun getProfileFlowDB(tpovId: Int): Flow<ProfileEntity>\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE tpovId LIKE :tpovId\")\r\n    suspend fun getProfileDB(tpovId: Int): ProfileEntity\r\n\r\n    @Query(\"SELECT tpovId FROM profiles WHERE login LIKE :email\")\r\n    suspend fun getTpovIdByEmailDB(email: String): Int\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE tpovId LIKE :tpovId\")\r\n    fun getProfileByTpovIdDB(tpovId: Int): ProfileEntity\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE idFirebase LIKE :uid\")\r\n    suspend fun getTpovIdByUidDB(uid: String?): ProfileEntity\r\n\r\n    @Query(\"SELECT * FROM front_list WHERE tpovId LIKE :tpovId\")\r\n    fun getQuizListDB(tpovId: Int): List<QuizEntity>\r\n\r\n    @Query(\"\"\"\r\n    SELECT * FROM new_user_table WHERE idQuiz NOT IN (\r\n        SELECT id\r\n        FROM front_list\r\n    )\r\n\"\"\")\r\n    suspend fun getTranslateEventDB(): List<QuestionEntity>\r\n\r\n    suspend fun getQuizEvent(): List<QuizEntity> {\r\n        log(\"fun getQuizEvent return: ${getQuizEventDB()}\")\r\n        return getQuizEventDB()\r\n    }\r\n\r\n    suspend fun getQuestionList(): List<QuestionEntity> {\r\n        log(\"fun getQuestionList return: ${getQuestionListDB()}\")\r\n        return getQuestionListDB()\r\n    }\r\n    suspend fun getQuestionDetailList(): List<QuestionDetailEntity> {\r\n        log(\"fun getQuestionDetailList return: ${getQuestionDetailListDB()}\")\r\n        return getQuestionDetailListDB()\r\n    }\r\n    fun getQuizLiveData(tpovId: Int): LiveData<List<QuizEntity>> {\r\n        log(\"fun getQuizLiveData, tpovId: $tpovId, return: ${getQuizListDB(tpovId)}\")\r\n        return getQuizLiveDataDB(tpovId)\r\n    }\r\n    suspend fun getListApiQuestion(): List<ApiQuestion> {\r\n        log(\"fun getListApiQuestion return: ${getListApiQuestionDB()}\")\r\n        return getListApiQuestionDB()\r\n    }\r\n    suspend fun getQuizById(id: Int): QuizEntity {\r\n        log(\"fun getQuizById, id: $id return: ${getQuizByIdDB(id)}\")\r\n        return getQuizByIdDB(id)\r\n    }\r\n    suspend fun getQuizListIdByTpovId(tpovId: Int): Int {\r\n        log(\"fun getQuizListIdByTpovId, tpovId: $tpovId, return: ${getQuizListIdByTpovIdDB(tpovId)}\")\r\n        return getQuizListIdByTpovIdDB(tpovId)\r\n    }\r\n    suspend fun getQuizTpovIdById(id: Int): Int {\r\n        log(\"fun getQuizTpovIdById, id: $id, return: ${getQuizTpovIdByIdDB(id)}\")\r\n        return getQuizTpovIdByIdDB(id)\r\n    }\r\n    suspend fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity> {\r\n        log(\"fun getQuestionDetailListByNameQuiz, nameQuiz: $nameQuiz, return: ${getQuestionDetailListByNameQuizDB(nameQuiz)}\")\r\n        return getQuestionDetailListByNameQuizDB(nameQuiz)\r\n    }\r\n    suspend fun getQuestionByIdQuiz(nameQuiz: String): List<QuestionEntity> {\r\n        log(\"fun getQuestionByIdQuiz, nameQuiz: $nameQuiz, return: ${getQuestionByIdQuizDB(nameQuiz)}\")\r\n        return getQuestionByIdQuizDB(nameQuiz)\r\n    }\r\n    suspend fun getListApiQuestionBySystemDate(systemDate: String): List<ApiQuestion> {\r\n        log(\"fun getListApiQuestionBySystemDate, systemDate: $systemDate, return: ${getListApiQuestionBySystemDateDB(systemDate)}\")\r\n        return getListApiQuestionBySystemDateDB(systemDate)\r\n    }\r\n    suspend fun getAllProfilesList(): ProfileEntity {\r\n        log(\"fun getAllProfilesList, return: ${getAllProfilesListDB()}\")\r\n        return getAllProfilesListDB()\r\n    }\r\n    suspend fun getProfileByFirebaseId(id: String): ProfileEntity {\r\n        log(\"fun getProfileByFirebaseId, id: $id, return: ${getProfileByFirebaseIdDB(id)}\")\r\n        return getProfileByFirebaseIdDB(id)\r\n    }\r\n    suspend fun getChat(): Flow<List<ChatEntity>> {\r\n        return getChatDB()\r\n    }\r\n    suspend fun getEventByIdQuiz(id: Int): Int? {\r\n        log(\"fun getEventByIdQuiz, id: $id, return: ${getEventByIdQuizDB(id)}\")\r\n        return getEventByIdQuizDB(id)\r\n    }\r\n    suspend fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int? {\r\n        log(\"fun getIdQuizByNameQuiz, nameQuiz: $nameQuiz, tpovId: $tpovId, return: ${getIdQuizByNameQuizDB(nameQuiz, tpovId)}\")\r\n        return getIdQuizByNameQuizDB(nameQuiz, tpovId)\r\n    }\r\n    suspend fun getNameQuizByIdQuiz(id: Int): String? {\r\n        log(\"fun getNameQuizByIdQuiz, id: $id, return: ${getNameQuizByIdQuizDB(id)}\")\r\n        return getNameQuizByIdQuizDB(id)\r\n    }\r\n    suspend fun getQuestionByIdQuiz(id: Int): List<QuestionEntity> {\r\n        log(\"fun getQuestionByIdQuiz, id: $id, return: ${getQuestionByIdQuizDB(id)}\")\r\n        return getQuestionByIdQuizDB(id)\r\n    }\r\n    suspend fun getQuestionDetailByIdQuiz(id: Int): List<QuestionDetailEntity> {\r\n        log(\"fun getQuestionDetailByIdQuiz, id: $id, return: ${getQuestionDetailByIdQuizDB(id)}\")\r\n        return getQuestionDetailByIdQuizDB(id)\r\n    }\r\n\r\n    @Query(\"SELECT * FROM front_list\")\r\n    suspend fun getQuizEventDB(): List<QuizEntity>\r\n\r\n    @Query(\"SELECT * FROM new_user_table\")\r\n    suspend fun getQuestionListDB(): List<QuestionEntity>\r\n\r\n    @Query(\"SELECT * FROM table_data\")\r\n    suspend fun getQuestionDetailListDB(): List<QuestionDetailEntity>\r\n\r\n    @Query(\"SELECT * FROM table_players\")\r\n    suspend fun getPlayersDB(): List<PlayersEntity>\r\n\r\n    @Query(\"SELECT * FROM table_players WHERE id LIKE :tpovId\")\r\n    suspend fun getPlayersDB(tpovId: Int): PlayersEntity\r\n\r\n    @Query(\"SELECT * FROM front_list WHERE tpovId LIKE :tpovId\")\r\n    fun getQuizLiveDataDB(tpovId: Int): LiveData<List<QuizEntity>>\r\n    @Query(\"SELECT * FROM front_list\")\r\n    fun getEventLiveDataDB(): LiveData<List<QuizEntity>>\r\n\r\n    @Query(\"SELECT * FROM table_generate_question\")\r\n    suspend fun getListApiQuestionDB(): List<ApiQuestion>\r\n\r\n    @Query(\"SELECT * FROM front_list WHERE id LIKE :id\")\r\n    suspend fun getQuizByIdDB(id: Int): QuizEntity\r\n\r\n    @Query(\"SELECT id FROM front_list WHERE tpovId LIKE :tpovId\")\r\n    suspend fun getQuizListIdByTpovIdDB(tpovId: Int): Int\r\n\r\n    @Query(\"SELECT tpovId FROM front_list WHERE id LIKE :id\")\r\n    suspend fun getQuizTpovIdByIdDB(id: Int): Int\r\n\r\n    @Query(\"SELECT * FROM table_data WHERE idQuiz LIKE :nameQuiz\")\r\n    suspend fun getQuestionDetailListByNameQuizDB(nameQuiz: String): List<QuestionDetailEntity>\r\n\r\n    @Query(\"SELECT * FROM new_user_table WHERE idQuiz LIKE :nameQuiz\")\r\n    suspend fun getQuestionByIdQuizDB(nameQuiz: String): List<QuestionEntity>\r\n\r\n    @Query(\"SELECT * FROM table_generate_question WHERE date LIKE :systemDate\")\r\n    suspend fun getListApiQuestionBySystemDateDB(systemDate: String): List<ApiQuestion>\r\n\r\n    @Query(\"SELECT * FROM profiles\")\r\n    suspend fun getAllProfilesListDB(): ProfileEntity\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE idFirebase = :id\")\r\n    suspend fun getProfileByFirebaseIdDB(id: String): ProfileEntity\r\n    @Query(\"SELECT * FROM profiles\")\r\n    suspend fun getAllProfiles(): List<ProfileEntity>\r\n\r\n    @Query(\"SELECT * FROM chat_data ORDER BY id ASC\")\r\n    fun getChatDB(): Flow<List<ChatEntity>>\r\n\r\n    @Query(\"SELECT event FROM front_list WHERE id = :id\")\r\n    suspend fun getEventByIdQuizDB(id: Int): Int?\r\n\r\n    @Query(\"SELECT id FROM front_list WHERE nameQuiz = :nameQuiz AND tpovId = :tpovId\")\r\n    suspend fun getIdQuizByNameQuizDB(nameQuiz: String, tpovId: Int): Int?\r\n\r\n    @Query(\"SELECT nameQuiz FROM front_list WHERE id = :id\")\r\n    suspend fun getNameQuizByIdQuizDB(id: Int): String?\r\n\r\n    @Query(\"SELECT * FROM new_user_table WHERE idQuiz = :id\")\r\n    suspend fun getQuestionByIdQuizDB(id: Int): List<QuestionEntity>\r\n\r\n    @Query(\"SELECT * FROM table_data WHERE idQuiz = :id\")\r\n    suspend fun getQuestionDetailByIdQuizDB(id: Int): List<QuestionDetailEntity>\r\n\r\n    @Query(\"DELETE FROM new_user_table WHERE idQuiz IS :id\")\r\n    fun deleteQuestionByIdQuizDB(id: Int)\r\n\r\n    fun deleteQuestionByIdQuiz(id: Int) {\r\n        log(\"fun deleteQuestionByIdQuiz(), idQuiz: $id\")\r\n        deleteQuestionByIdQuizDB(id)\r\n    }\r\n\r\n    @Query(\"DELETE FROM table_data WHERE idQuiz IS :id\")\r\n    fun deleteQuestionDetailByIdQuiz(id: Int)\r\n\r\n\r\n    @Query(\"DELETE FROM chat_data WHERE time LIKE :time\")\r\n    fun deleteChat(time: String)\r\n\r\n    fun deleteQuizById(id: Int) {\r\n        log(\"fun deleteQuizById: id: $id\")\r\n        deleteQuizByIdDB(id)\r\n    }\r\n    @Query(\"DELETE FROM front_list WHERE id LIKE :id\")\r\n    fun deleteQuizByIdDB(id: Int)\r\n\r\n    @Update\r\n    suspend fun updateQuizDetailDB(questionDetailEntity: QuestionDetailEntity)\r\n\r\n    suspend fun updateQuizDetail(questionDetailEntity: QuestionDetailEntity) {\r\n        log(\"updateQuizDetail questionDetailEntity: $questionDetailEntity\")\r\n        updateQuizDetailDB(questionDetailEntity)\r\n    }\r\n\r\n    @Update\r\n    suspend fun updateQuiz(quizEntity: QuizEntity)\r\n\r\n    @Update\r\n    suspend fun updateApiQuestion(generateQuestion: ApiQuestion)\r\n\r\n    @Update\r\n    suspend fun updateProfilesDB(profileEntity: ProfileEntity)\r\n\r\n    suspend fun updateProfiles(profileEntity: ProfileEntity) {\r\n        log(\"fun update profile: $profileEntity\")\r\n        updateProfilesDB(profileEntity)\r\n    }\r\n\r\n    @Update\r\n    suspend fun updateQuestion(questionEntity: QuestionEntity)\r\n\r\n    @Query(\"SELECT COUNT(*) FROM table_data\")\r\n    fun getQuestionDetailCount(): Int\r\n\r\n    @Query(\"SELECT COUNT(*) FROM new_user_table\")\r\n    fun getQuestionCount(): Int\r\n\r\n    @Query(\"SELECT COUNT(*) FROM front_list\")\r\n    fun getQuizCount(): Int\r\n\r\n    @Query(\"SELECT COUNT(*) FROM table_generate_question\")\r\n    fun getApiQuestionCount(): Int\r\n\r\n    @Query(\"SELECT COUNT(*) FROM profiles\")\r\n    fun getProfileCount(): Int\r\n\r\n    @Query(\"SELECT COUNT(*) FROM chat_data\")\r\n    fun getChatCount(): Int\r\n\r\n}\r\n\r\n@OptIn(InternalCoroutinesApi::class)\r\nfun log(m: String) { Logcat.log(m, \"QuizDao\", Logcat.LOG_DATABASE)}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt b/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt	(date 1685299242356)
@@ -11,37 +11,37 @@
 
 interface QuizDao {
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertQuizDetailDB(note: QuestionDetailEntity)
+    fun insertQuizDetailDB(note: QuestionDetailEntity)
 
-    suspend fun insertQuizDetail(note: QuestionDetailEntity) {
+    fun insertQuizDetail(note: QuestionDetailEntity) {
         log("fun insertQuizDetail $note")
         insertQuizDetailDB(note)
     }
 
 
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertQuizDetailListDB(note: List<QuestionDetailEntity>)
+    fun insertQuizDetailListDB(note: List<QuestionDetailEntity>)
 
-    suspend fun insertQuizDetailList(note: List<QuestionDetailEntity>) {
+    fun insertQuizDetailList(note: List<QuestionDetailEntity>) {
         log("fun insertQuizDetailList $note")
         insertQuizDetailListDB(note)
     }
 
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertProfileDB(profile: ProfileEntity)
+    fun insertProfileDB(profile: ProfileEntity)
 
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertPlayersList(playersList: List<PlayersEntity>)
+    fun insertPlayersList(playersList: List<PlayersEntity>)
 
     @Query("DELETE FROM table_players")
-    suspend fun deletePlayersList()
+    fun deletePlayersList()
 
-    suspend fun insertProfile(profile: ProfileEntity) {
+    fun insertProfile(profile: ProfileEntity) {
         log("fun insertProfile $profile")
         insertProfileDB(profile)
     }
 
-    suspend fun insertQuiz(note: QuizEntity) {
+    fun insertQuiz(note: QuizEntity) {
         if (note.id == null) {
             var id = -1
             do {
@@ -56,75 +56,67 @@
     }
 
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertQuizNewId(note: QuizEntity)
+    fun insertQuizNewId(note: QuizEntity)
 
 
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertQuestionDB(name: QuestionEntity)
+    fun insertQuestionDB(name: QuestionEntity)
 
-    suspend fun insertQuestion(note: QuestionEntity) {
+    fun insertQuestion(note: QuestionEntity) {
         log("fun insertQuestion $note")
         insertQuestionDB(note)
     }
 
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertQuizListDB(note: List<QuizEntity>)
+    fun insertQuizListDB(note: List<QuizEntity>)
 
-    suspend fun insertQuizList(note: List<QuizEntity>) {
+    fun insertQuizList(note: List<QuizEntity>) {
         log("fun insertQuizList $note")
         insertQuizListDB(note)
     }
 
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertQuestionListDB(name: List<QuestionEntity>)
+    fun insertQuestionListDB(name: List<QuestionEntity>)
 
-    suspend fun insertQuestionList(note: List<QuestionEntity>) {
+    fun insertQuestionList(note: List<QuestionEntity>) {
         log("fun insertQuestionList $note")
         insertQuestionListDB(note)
     }
 
     @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertListApiQuestionDB(name: List<ApiQuestion>)
-
-    suspend fun insertListApiQuestion(note: List<ApiQuestion>) {
-        log("fun insertListApiQuestion $note")
-        insertListApiQuestionDB(note)
-    }
-
-    @Insert(onConflict = OnConflictStrategy.REPLACE)
-    suspend fun insertChatDB(chatEntity: ChatEntity)
+    fun insertChatDB(chatEntity: ChatEntity)
 
-    suspend fun insertChat(chatEntity: ChatEntity) {
+    fun insertChat(chatEntity: ChatEntity) {
         log("fun insertChat $chatEntity")
         insertChatDB(chatEntity)
     }
 
-     fun getProfileFlow(tpovId: Int): Flow<ProfileEntity>  {
+    fun getProfileFlow(tpovId: Int): Flow<ProfileEntity>  {
         log("fun getProfileFlow tpovId: $tpovId, return: ${getProfileByTpovIdDB(tpovId)}")
         return getProfileFlowDB(tpovId)
     }
-    suspend fun getProfile(tpovId: Int): ProfileEntity {
+    fun getProfile(tpovId: Int): ProfileEntity {
         log("fun getProfile tpovId: $tpovId, return: ${getProfileDB(tpovId)}")
         return getProfileDB(tpovId)
     }
-    suspend fun getTpovIdByEmail(email: String): Int {
+    fun getTpovIdByEmail(email: String): Int {
         log("fun getTpovIdByEmail email: $email, return: ${getTpovIdByEmailDB(email)}")
         return getTpovIdByEmailDB(email)
     }
-    suspend fun getProfileByTpovId(tpovId: Int): ProfileEntity {
+    fun getProfileByTpovId(tpovId: Int): ProfileEntity {
         log("fun getProfileByTpovId tpovId: $tpovId, return: ${getProfileByTpovIdDB(tpovId)}")
         return getProfileByTpovIdDB(tpovId)
     }
-    suspend fun getTpovIdByUid(uid: String?): ProfileEntity {
+    fun getTpovIdByUid(uid: String?): ProfileEntity {
         log("fun getTpovIdByUid uid: $uid, return: ${getTpovIdByUidDB(uid)}")
         return getTpovIdByUidDB(uid)
     }
-    suspend fun getQuizList(tpovId: Int): List<QuizEntity> {
+    fun getQuizList(tpovId: Int): List<QuizEntity> {
         log("fun getQuizList tpovId: $tpovId, return: ${getQuizListDB(tpovId)}")
         return getQuizListDB(tpovId)
     }
 
-    suspend fun getTranslateEvent(): List<QuestionEntity> {
+    fun getTranslateEvent(): List<QuestionEntity> {
         log("fun getTranslateEvent return: ${getTranslateEventDB()}")
         return getTranslateEventDB()
     }
@@ -133,16 +125,16 @@
     fun getProfileFlowDB(tpovId: Int): Flow<ProfileEntity>
 
     @Query("SELECT * FROM profiles WHERE tpovId LIKE :tpovId")
-    suspend fun getProfileDB(tpovId: Int): ProfileEntity
+    fun getProfileDB(tpovId: Int): ProfileEntity
 
     @Query("SELECT tpovId FROM profiles WHERE login LIKE :email")
-    suspend fun getTpovIdByEmailDB(email: String): Int
+    fun getTpovIdByEmailDB(email: String): Int
 
     @Query("SELECT * FROM profiles WHERE tpovId LIKE :tpovId")
     fun getProfileByTpovIdDB(tpovId: Int): ProfileEntity
 
     @Query("SELECT * FROM profiles WHERE idFirebase LIKE :uid")
-    suspend fun getTpovIdByUidDB(uid: String?): ProfileEntity
+    fun getTpovIdByUidDB(uid: String?): ProfileEntity
 
     @Query("SELECT * FROM front_list WHERE tpovId LIKE :tpovId")
     fun getQuizListDB(tpovId: Int): List<QuizEntity>
@@ -153,18 +145,18 @@
         FROM front_list
     )
 """)
-    suspend fun getTranslateEventDB(): List<QuestionEntity>
+    fun getTranslateEventDB(): List<QuestionEntity>
 
-    suspend fun getQuizEvent(): List<QuizEntity> {
+    fun getQuizEvent(): List<QuizEntity> {
         log("fun getQuizEvent return: ${getQuizEventDB()}")
         return getQuizEventDB()
     }
 
-    suspend fun getQuestionList(): List<QuestionEntity> {
+    fun getQuestionList(): List<QuestionEntity> {
         log("fun getQuestionList return: ${getQuestionListDB()}")
         return getQuestionListDB()
     }
-    suspend fun getQuestionDetailList(): List<QuestionDetailEntity> {
+    fun getQuestionDetailList(): List<QuestionDetailEntity> {
         log("fun getQuestionDetailList return: ${getQuestionDetailListDB()}")
         return getQuestionDetailListDB()
     }
@@ -172,132 +164,118 @@
         log("fun getQuizLiveData, tpovId: $tpovId, return: ${getQuizListDB(tpovId)}")
         return getQuizLiveDataDB(tpovId)
     }
-    suspend fun getListApiQuestion(): List<ApiQuestion> {
-        log("fun getListApiQuestion return: ${getListApiQuestionDB()}")
-        return getListApiQuestionDB()
-    }
-    suspend fun getQuizById(id: Int): QuizEntity {
+    fun getQuizById(id: Int): QuizEntity {
         log("fun getQuizById, id: $id return: ${getQuizByIdDB(id)}")
         return getQuizByIdDB(id)
     }
-    suspend fun getQuizListIdByTpovId(tpovId: Int): Int {
+    fun getQuizListIdByTpovId(tpovId: Int): Int {
         log("fun getQuizListIdByTpovId, tpovId: $tpovId, return: ${getQuizListIdByTpovIdDB(tpovId)}")
         return getQuizListIdByTpovIdDB(tpovId)
     }
-    suspend fun getQuizTpovIdById(id: Int): Int {
+    fun getQuizTpovIdById(id: Int): Int {
         log("fun getQuizTpovIdById, id: $id, return: ${getQuizTpovIdByIdDB(id)}")
         return getQuizTpovIdByIdDB(id)
     }
-    suspend fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity> {
+    fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity> {
         log("fun getQuestionDetailListByNameQuiz, nameQuiz: $nameQuiz, return: ${getQuestionDetailListByNameQuizDB(nameQuiz)}")
         return getQuestionDetailListByNameQuizDB(nameQuiz)
     }
-    suspend fun getQuestionByIdQuiz(nameQuiz: String): List<QuestionEntity> {
+    fun getQuestionByIdQuiz(nameQuiz: String): List<QuestionEntity> {
         log("fun getQuestionByIdQuiz, nameQuiz: $nameQuiz, return: ${getQuestionByIdQuizDB(nameQuiz)}")
         return getQuestionByIdQuizDB(nameQuiz)
     }
-    suspend fun getListApiQuestionBySystemDate(systemDate: String): List<ApiQuestion> {
-        log("fun getListApiQuestionBySystemDate, systemDate: $systemDate, return: ${getListApiQuestionBySystemDateDB(systemDate)}")
-        return getListApiQuestionBySystemDateDB(systemDate)
-    }
-    suspend fun getAllProfilesList(): ProfileEntity {
+    fun getAllProfilesList(): ProfileEntity {
         log("fun getAllProfilesList, return: ${getAllProfilesListDB()}")
         return getAllProfilesListDB()
     }
-    suspend fun getProfileByFirebaseId(id: String): ProfileEntity {
+    fun getProfileByFirebaseId(id: String): ProfileEntity {
         log("fun getProfileByFirebaseId, id: $id, return: ${getProfileByFirebaseIdDB(id)}")
         return getProfileByFirebaseIdDB(id)
     }
-    suspend fun getChat(): Flow<List<ChatEntity>> {
+    fun getChat(): Flow<List<ChatEntity>> {
         return getChatDB()
     }
-    suspend fun getEventByIdQuiz(id: Int): Int? {
+    fun getEventByIdQuiz(id: Int): Int? {
         log("fun getEventByIdQuiz, id: $id, return: ${getEventByIdQuizDB(id)}")
         return getEventByIdQuizDB(id)
     }
-    suspend fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int? {
+    fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int? {
         log("fun getIdQuizByNameQuiz, nameQuiz: $nameQuiz, tpovId: $tpovId, return: ${getIdQuizByNameQuizDB(nameQuiz, tpovId)}")
         return getIdQuizByNameQuizDB(nameQuiz, tpovId)
     }
-    suspend fun getNameQuizByIdQuiz(id: Int): String? {
+    fun getNameQuizByIdQuiz(id: Int): String? {
         log("fun getNameQuizByIdQuiz, id: $id, return: ${getNameQuizByIdQuizDB(id)}")
         return getNameQuizByIdQuizDB(id)
     }
-    suspend fun getQuestionByIdQuiz(id: Int): List<QuestionEntity> {
+    fun getQuestionByIdQuiz(id: Int): List<QuestionEntity> {
         log("fun getQuestionByIdQuiz, id: $id, return: ${getQuestionByIdQuizDB(id)}")
         return getQuestionByIdQuizDB(id)
     }
-    suspend fun getQuestionDetailByIdQuiz(id: Int): List<QuestionDetailEntity> {
+    fun getQuestionDetailByIdQuiz(id: Int): List<QuestionDetailEntity> {
         log("fun getQuestionDetailByIdQuiz, id: $id, return: ${getQuestionDetailByIdQuizDB(id)}")
         return getQuestionDetailByIdQuizDB(id)
     }
 
     @Query("SELECT * FROM front_list")
-    suspend fun getQuizEventDB(): List<QuizEntity>
+    fun getQuizEventDB(): List<QuizEntity>
 
     @Query("SELECT * FROM new_user_table")
-    suspend fun getQuestionListDB(): List<QuestionEntity>
+    fun getQuestionListDB(): List<QuestionEntity>
 
     @Query("SELECT * FROM table_data")
-    suspend fun getQuestionDetailListDB(): List<QuestionDetailEntity>
+    fun getQuestionDetailListDB(): List<QuestionDetailEntity>
 
     @Query("SELECT * FROM table_players")
-    suspend fun getPlayersDB(): List<PlayersEntity>
+    fun getPlayersDB(): List<PlayersEntity>
 
     @Query("SELECT * FROM table_players WHERE id LIKE :tpovId")
-    suspend fun getPlayersDB(tpovId: Int): PlayersEntity
+    fun getPlayersDB(tpovId: Int): PlayersEntity
 
     @Query("SELECT * FROM front_list WHERE tpovId LIKE :tpovId")
     fun getQuizLiveDataDB(tpovId: Int): LiveData<List<QuizEntity>>
     @Query("SELECT * FROM front_list")
     fun getEventLiveDataDB(): LiveData<List<QuizEntity>>
 
-    @Query("SELECT * FROM table_generate_question")
-    suspend fun getListApiQuestionDB(): List<ApiQuestion>
-
     @Query("SELECT * FROM front_list WHERE id LIKE :id")
-    suspend fun getQuizByIdDB(id: Int): QuizEntity
+    fun getQuizByIdDB(id: Int): QuizEntity
 
     @Query("SELECT id FROM front_list WHERE tpovId LIKE :tpovId")
-    suspend fun getQuizListIdByTpovIdDB(tpovId: Int): Int
+    fun getQuizListIdByTpovIdDB(tpovId: Int): Int
 
     @Query("SELECT tpovId FROM front_list WHERE id LIKE :id")
-    suspend fun getQuizTpovIdByIdDB(id: Int): Int
+    fun getQuizTpovIdByIdDB(id: Int): Int
 
     @Query("SELECT * FROM table_data WHERE idQuiz LIKE :nameQuiz")
-    suspend fun getQuestionDetailListByNameQuizDB(nameQuiz: String): List<QuestionDetailEntity>
+    fun getQuestionDetailListByNameQuizDB(nameQuiz: String): List<QuestionDetailEntity>
 
     @Query("SELECT * FROM new_user_table WHERE idQuiz LIKE :nameQuiz")
-    suspend fun getQuestionByIdQuizDB(nameQuiz: String): List<QuestionEntity>
-
-    @Query("SELECT * FROM table_generate_question WHERE date LIKE :systemDate")
-    suspend fun getListApiQuestionBySystemDateDB(systemDate: String): List<ApiQuestion>
+    fun getQuestionByIdQuizDB(nameQuiz: String): List<QuestionEntity>
 
     @Query("SELECT * FROM profiles")
-    suspend fun getAllProfilesListDB(): ProfileEntity
+    fun getAllProfilesListDB(): ProfileEntity
 
     @Query("SELECT * FROM profiles WHERE idFirebase = :id")
-    suspend fun getProfileByFirebaseIdDB(id: String): ProfileEntity
+    fun getProfileByFirebaseIdDB(id: String): ProfileEntity
     @Query("SELECT * FROM profiles")
-    suspend fun getAllProfiles(): List<ProfileEntity>
+    fun getAllProfiles(): List<ProfileEntity>
 
     @Query("SELECT * FROM chat_data ORDER BY id ASC")
     fun getChatDB(): Flow<List<ChatEntity>>
 
     @Query("SELECT event FROM front_list WHERE id = :id")
-    suspend fun getEventByIdQuizDB(id: Int): Int?
+    fun getEventByIdQuizDB(id: Int): Int?
 
     @Query("SELECT id FROM front_list WHERE nameQuiz = :nameQuiz AND tpovId = :tpovId")
-    suspend fun getIdQuizByNameQuizDB(nameQuiz: String, tpovId: Int): Int?
+    fun getIdQuizByNameQuizDB(nameQuiz: String, tpovId: Int): Int?
 
     @Query("SELECT nameQuiz FROM front_list WHERE id = :id")
-    suspend fun getNameQuizByIdQuizDB(id: Int): String?
+    fun getNameQuizByIdQuizDB(id: Int): String?
 
     @Query("SELECT * FROM new_user_table WHERE idQuiz = :id")
-    suspend fun getQuestionByIdQuizDB(id: Int): List<QuestionEntity>
+    fun getQuestionByIdQuizDB(id: Int): List<QuestionEntity>
 
     @Query("SELECT * FROM table_data WHERE idQuiz = :id")
-    suspend fun getQuestionDetailByIdQuizDB(id: Int): List<QuestionDetailEntity>
+    fun getQuestionDetailByIdQuizDB(id: Int): List<QuestionDetailEntity>
 
     @Query("DELETE FROM new_user_table WHERE idQuiz IS :id")
     fun deleteQuestionByIdQuizDB(id: Int)
@@ -322,29 +300,26 @@
     fun deleteQuizByIdDB(id: Int)
 
     @Update
-    suspend fun updateQuizDetailDB(questionDetailEntity: QuestionDetailEntity)
+    fun updateQuizDetailDB(questionDetailEntity: QuestionDetailEntity)
 
-    suspend fun updateQuizDetail(questionDetailEntity: QuestionDetailEntity) {
+    fun updateQuizDetail(questionDetailEntity: QuestionDetailEntity) {
         log("updateQuizDetail questionDetailEntity: $questionDetailEntity")
         updateQuizDetailDB(questionDetailEntity)
     }
 
     @Update
-    suspend fun updateQuiz(quizEntity: QuizEntity)
+    fun updateQuiz(quizEntity: QuizEntity)
 
     @Update
-    suspend fun updateApiQuestion(generateQuestion: ApiQuestion)
+    fun updateProfilesDB(profileEntity: ProfileEntity)
 
-    @Update
-    suspend fun updateProfilesDB(profileEntity: ProfileEntity)
-
-    suspend fun updateProfiles(profileEntity: ProfileEntity) {
+    fun updateProfiles(profileEntity: ProfileEntity) {
         log("fun update profile: $profileEntity")
         updateProfilesDB(profileEntity)
     }
 
     @Update
-    suspend fun updateQuestion(questionEntity: QuestionEntity)
+    fun updateQuestion(questionEntity: QuestionEntity)
 
     @Query("SELECT COUNT(*) FROM table_data")
     fun getQuestionDetailCount(): Int
@@ -355,9 +330,6 @@
     @Query("SELECT COUNT(*) FROM front_list")
     fun getQuizCount(): Int
 
-    @Query("SELECT COUNT(*) FROM table_generate_question")
-    fun getApiQuestionCount(): Int
-
     @Query("SELECT COUNT(*) FROM profiles")
     fun getProfileCount(): Int
 
Index: app/src/main/res/layout/activity_main_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:id=\"@+id/mainLayout\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_marginTop=\"10dp\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:animateLayoutChanges=\"true\"\r\n    android:background=\"@color/nullColor\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/swipe_layout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_gravity=\"center\"\r\n        android:background=\"#00FFFFFF\"\r\n        android:elevation=\"10dp\"\r\n        android:foregroundGravity=\"center\"\r\n        android:gravity=\"end\"\r\n        android:orientation=\"horizontal\"\r\n        android:translationZ=\"100dp\">\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/edit_button_swipe\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:visibility=\"gone\"\r\n            android:layout_margin=\"4dp\"\r\n            android:layout_alignParentRight=\"true\"\r\n            android:background=\"#59005A41\"\r\n            android:padding=\"21dp\"\r\n            android:text=\"\"\r\n            android:textColor=\"#000000\"\r\n            app:srcCompat=\"@drawable/baseline_edit_24\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/delete_button_swipe\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:visibility=\"gone\"\r\n            android:layout_margin=\"4dp\"\r\n            android:layout_alignParentRight=\"true\"\r\n            android:background=\"#59FF0000\"\r\n            android:padding=\"21dp\"\r\n            android:text=\"\"\r\n            android:textColor=\"#000000\"\r\n            app:srcCompat=\"@drawable/ic_baseline_quiz\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/send_button_swipe\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:visibility=\"gone\"\r\n            android:layout_alignParentRight=\"true\"\r\n            android:layout_margin=\"4dp\"\r\n            android:background=\"#590037FF\"\r\n            android:padding=\"21dp\"\r\n            android:text=\"\"\r\n            android:textColor=\"#000000\"\r\n            app:srcCompat=\"@drawable/ic_baseline_drive_folder_upload_24\" />\r\n    </LinearLayout>\r\n\r\n    <com.tpov.schoolquiz.presentation.custom.CustomRoundedImageView\r\n\r\n        android:id=\"@+id/constraint_layout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"10dp\"\r\n        android:layout_marginEnd=\"10dp\"\r\n        android:layout_marginBottom=\"20dp\"\r\n        android:animateLayoutChanges=\"true\"\r\n        android:background=\"@drawable/rounded_corners\"\r\n        android:elevation=\"8dp\"\r\n        android:outlineSpotShadowColor=\"#000000\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:background=\"@color/backgraund_item_front_activity\"\r\n            android:orientation=\"horizontal\">\r\n\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvTime\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"end\"\r\n                android:layout_marginEnd=\"20dp\"\r\n                android:layout_weight=\"1\"\r\n                android:gravity=\"right|end\"\r\n                android:text=\"time\"\r\n                android:textColor=\"#334573\"\r\n                android:visibility=\"gone\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvName\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginLeft=\"20dp\"\r\n                android:layout_weight=\"0.3\"\r\n                android:foregroundGravity=\"left\"\r\n                android:text=\"Name\"\r\n                android:visibility=\"gone\"\r\n                android:layout_gravity=\"center\"\r\n                android:textColor=\"#384A7A\"\r\n                android:textColorLink=\"#8E0000\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvNumHardQuiz\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"end\"\r\n                android:layout_marginEnd=\"20dp\"\r\n                android:layout_weight=\"1\"\r\n                android:gravity=\"right|end\"\r\n                android:text=\"time\"\r\n                android:textColor=\"#334573\"\r\n                android:visibility=\"gone\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvNumQuestion\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"end\"\r\n                android:layout_marginEnd=\"20dp\"\r\n                android:layout_weight=\"1\"\r\n                android:gravity=\"right|end\"\r\n                android:text=\"time\"\r\n                android:textColor=\"#334573\"\r\n                android:visibility=\"gone\" />\r\n\r\n            <Button\r\n                android:id=\"@+id/main_title_button\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingLeft=\"16dp\"\r\n                android:maxWidth=\"85dp\"\r\n                android:gravity=\"center\"\r\n                android:layout_marginTop=\"15dp\"\r\n                android:background=\"@null\"\r\n                android:transformPivotX=\"12dp\"\r\n                android:elevation=\"12dp\"\r\n                android:inputType=\"textAutoCorrect\"\r\n                android:text=\"name quiz\"\r\n                android:textColor=\"@color/white\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_weight=\"1\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:gravity=\"center\"\r\n                    android:minWidth=\"40dp\"\r\n                    android:orientation=\"vertical\">\r\n\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/imv_translate\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:background=\"@color/nullColor\"\r\n                        android:layout_gravity=\"center\"\r\n                        app:srcCompat=\"@drawable/ic_translate\" />\r\n\r\n                    <CheckBox\r\n                        android:id=\"@+id/chb_type_quiz\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"center\"\r\n                        android:text=\"\" />\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n\r\n\r\n            <RatingBar\r\n                android:id=\"@+id/ratingBar\"\r\n                style=\"?android:attr/ratingBarStyleIndicator\"\r\n                android:layout_width=\"106dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"center|center_vertical\"\r\n                android:background=\"#003A3A3A\"\r\n                android:numStars=\"3\"\r\n                android:progressBackgroundTint=\"#AAAAAA\"\r\n                android:progressBackgroundTintMode=\"multiply\"\r\n                android:stepSize=\"0.01\"\r\n                android:theme=\"@style/RatingBar\" />\r\n\r\n            <ImageView\r\n                android:id=\"@+id/imageView\"\r\n                android:layout_width=\"100dp\"\r\n                android:layout_height=\"75dp\"\r\n                android:layout_alignParentRight=\"true\"\r\n                android:scaleType=\"fitCenter\"\r\n                app:layout_constraintEnd_toEndOf=\"parent\" />\r\n\r\n            <ImageButton\r\n                android:id=\"@+id/imShare\"\r\n                android:layout_width=\"20dp\"\r\n                android:layout_height=\"20dp\"\r\n                android:layout_gravity=\"center|right\"\r\n                android:layout_weight=\"1\"\r\n                android:backgroundTint=\"#00FFFFFF\"\r\n                android:elevation=\"15dp\"\r\n                android:foregroundGravity=\"right\"\r\n                android:visibility=\"gone\"\r\n                app:srcCompat=\"@drawable/ic_share_quiz\" />\r\n\r\n            <ImageButton\r\n                android:id=\"@+id/imDeleteQuiz\"\r\n                android:layout_width=\"15dp\"\r\n                android:layout_height=\"15dp\"\r\n                android:layout_gravity=\"center\"\r\n                android:layout_marginLeft=\"6dp\"\r\n                android:layout_marginRight=\"6dp\"\r\n                android:backgroundTint=\"#124F5E\"\r\n                android:elevation=\"15dp\"\r\n                android:visibility=\"gone\"\r\n                app:srcCompat=\"@drawable/ic_baseline_quiz\"\r\n                app:tint=\"#FF0000\" />\r\n\r\n\r\n        </LinearLayout>\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/imv_gradient_light_quiz\"\r\n            android:layout_width=\"100dp\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_margin=\"0dp\"\r\n            android:background=\"@color/nullColor\"\r\n            android:foregroundGravity=\"bottom\"\r\n            android:padding=\"0dp\"\r\n            android:visibility=\"gone\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            app:srcCompat=\"@drawable/gradient_light_quiz\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/imv_grafient_hard_quiz\"\r\n            android:layout_width=\"100dp\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_margin=\"0dp\"\r\n            android:background=\"@color/nullColor\"\r\n            android:foregroundGravity=\"bottom\"\r\n            android:padding=\"0dp\"\r\n            android:visibility=\"gone\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            app:srcCompat=\"@drawable/gradient_hard_quiz\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/imv_gradient_translate_quiz\"\r\n            android:layout_width=\"100dp\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_margin=\"0dp\"\r\n            android:background=\"@color/nullColor\"\r\n            android:foregroundGravity=\"bottom\"\r\n            android:padding=\"0dp\"\r\n            android:visibility=\"gone\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            app:srcCompat=\"@drawable/gradient_universal_quiz\" />\r\n\r\n    </com.tpov.schoolquiz.presentation.custom.CustomRoundedImageView>\r\n\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main_item.xml b/app/src/main/res/layout/activity_main_item.xml
--- a/app/src/main/res/layout/activity_main_item.xml	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/res/layout/activity_main_item.xml	(date 1685299242373)
@@ -20,43 +20,30 @@
         android:orientation="horizontal"
         android:translationZ="100dp">
 
-        <ImageButton
-            android:id="@+id/edit_button_swipe"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:visibility="gone"
-            android:layout_margin="4dp"
-            android:layout_alignParentRight="true"
-            android:background="#59005A41"
-            android:padding="21dp"
-            android:text=""
-            android:textColor="#000000"
-            app:srcCompat="@drawable/baseline_edit_24" />
-
         <ImageButton
             android:id="@+id/delete_button_swipe"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:visibility="gone"
+            android:layout_alignParentRight="true"
             android:layout_margin="4dp"
-            android:layout_alignParentRight="true"
             android:background="#59FF0000"
             android:padding="21dp"
             android:text=""
             android:textColor="#000000"
+            android:visibility="gone"
             app:srcCompat="@drawable/ic_baseline_quiz" />
 
         <ImageButton
             android:id="@+id/send_button_swipe"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:visibility="gone"
             android:layout_alignParentRight="true"
             android:layout_margin="4dp"
             android:background="#590037FF"
             android:padding="21dp"
             android:text=""
             android:textColor="#000000"
+            android:visibility="gone"
             app:srcCompat="@drawable/ic_baseline_drive_folder_upload_24" />
     </LinearLayout>
 
@@ -73,200 +60,212 @@
         android:elevation="8dp"
         android:outlineSpotShadowColor="#000000">
 
+        <ImageButton
+            android:id="@+id/imv_gradient_light_quiz"
+            android:layout_width="100dp"
+            android:layout_height="0dp"
+            android:layout_margin="0dp"
+            android:background="@color/nullColor"
+            android:foregroundGravity="bottom"
+            android:padding="0dp"
+            android:visibility="gone"
+            app:layout_constraintBottom_toBottomOf="@+id/linearLayout"
+            app:layout_constraintTop_toTopOf="@+id/linearLayout"
+            app:srcCompat="@drawable/gradient_light_quiz" />
+
+        <ImageButton
+            android:id="@+id/imv_grafient_hard_quiz"
+            android:layout_width="100dp"
+            android:layout_height="0dp"
+            android:layout_margin="0dp"
+            android:background="@color/nullColor"
+            android:foregroundGravity="bottom"
+            android:padding="0dp"
+            android:visibility="gone"
+            app:layout_constraintBottom_toBottomOf="@+id/linearLayout"
+            app:layout_constraintTop_toTopOf="@+id/linearLayout"
+            app:srcCompat="@drawable/gradient_hard_quiz" />
+
+        <ImageButton
+            android:id="@+id/imv_gradient_translate_quiz"
+            android:layout_width="100dp"
+            android:layout_height="0dp"
+            android:layout_margin="0dp"
+            android:background="@color/nullColor"
+            android:foregroundGravity="bottom"
+            android:padding="0dp"
+            android:visibility="gone"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintTop_toTopOf="@+id/linearLayout"
+            app:srcCompat="@drawable/gradient_universal_quiz" />
+
         <LinearLayout
+            android:id="@+id/linearLayout"
             android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:background="@color/backgraund_item_front_activity"
-            android:orientation="horizontal">
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="@color/backgraund_item_front_activity"
+                android:orientation="horizontal">
 
 
-            <TextView
-                android:id="@+id/tvTime"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="end"
-                android:layout_marginEnd="20dp"
-                android:layout_weight="1"
-                android:gravity="right|end"
-                android:text="time"
-                android:textColor="#334573"
-                android:visibility="gone" />
-
-            <TextView
-                android:id="@+id/tvName"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="20dp"
-                android:layout_weight="0.3"
-                android:foregroundGravity="left"
-                android:text="Name"
-                android:visibility="gone"
-                android:layout_gravity="center"
-                android:textColor="#384A7A"
-                android:textColorLink="#8E0000" />
-
-            <TextView
-                android:id="@+id/tvNumHardQuiz"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="end"
-                android:layout_marginEnd="20dp"
-                android:layout_weight="1"
-                android:gravity="right|end"
-                android:text="time"
-                android:textColor="#334573"
-                android:visibility="gone" />
+                <TextView
+                    android:id="@+id/tvNumHardQuiz"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="end"
+                    android:layout_marginEnd="20dp"
+                    android:layout_weight="1"
+                    android:gravity="right|end"
+                    android:text="time"
+                    android:textColor="#334573"
+                    android:visibility="gone" />
 
-            <TextView
-                android:id="@+id/tvNumQuestion"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="end"
-                android:layout_marginEnd="20dp"
-                android:layout_weight="1"
-                android:gravity="right|end"
-                android:text="time"
-                android:textColor="#334573"
-                android:visibility="gone" />
+                <TextView
+                    android:id="@+id/tvNumQuestion"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="end"
+                    android:layout_marginEnd="20dp"
+                    android:layout_weight="1"
+                    android:gravity="right|end"
+                    android:text="time"
+                    android:textColor="#334573"
+                    android:visibility="gone" />
 
-            <Button
-                android:id="@+id/main_title_button"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:paddingLeft="16dp"
-                android:maxWidth="85dp"
-                android:gravity="center"
-                android:layout_marginTop="15dp"
-                android:background="@null"
-                android:transformPivotX="12dp"
-                android:elevation="12dp"
-                android:inputType="textAutoCorrect"
-                android:text="name quiz"
-                android:textColor="@color/white"
-                android:textStyle="bold" />
+                <Button
+                    android:id="@+id/main_title_button"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="15dp"
+                    android:background="@null"
+                    android:elevation="12dp"
+                    android:gravity="center"
+                    android:inputType="textAutoCorrect"
+                    android:maxWidth="85dp"
+                    android:paddingLeft="16dp"
+                    android:text="name quiz"
+                    android:textColor="@color/white"
+                    android:textStyle="bold"
+                    android:transformPivotX="12dp" />
 
-            <LinearLayout
-                android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                android:layout_weight="1"
-                android:orientation="horizontal">
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_weight="1"
+                    android:orientation="horizontal">
 
-                <LinearLayout
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:gravity="center"
-                    android:minWidth="40dp"
-                    android:orientation="vertical">
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent"
+                        android:gravity="center"
+                        android:minWidth="40dp"
+                        android:orientation="vertical">
 
 
-                    <ImageView
-                        android:id="@+id/imv_translate"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:background="@color/nullColor"
-                        android:layout_gravity="center"
-                        app:srcCompat="@drawable/ic_translate" />
+                        <ImageView
+                            android:id="@+id/imv_translate"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:layout_gravity="center"
+                            android:background="@color/nullColor"
+                            app:srcCompat="@drawable/ic_translate" />
 
-                    <CheckBox
-                        android:id="@+id/chb_type_quiz"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:layout_gravity="center"
-                        android:text="" />
-                </LinearLayout>
-            </LinearLayout>
+                        <CheckBox
+                            android:id="@+id/chb_type_quiz"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:layout_gravity="center"
+                            android:text="" />
+                    </LinearLayout>
+                </LinearLayout>
 
 
-            <RatingBar
-                android:id="@+id/ratingBar"
-                style="?android:attr/ratingBarStyleIndicator"
-                android:layout_width="106dp"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center|center_vertical"
-                android:background="#003A3A3A"
-                android:numStars="3"
-                android:progressBackgroundTint="#AAAAAA"
-                android:progressBackgroundTintMode="multiply"
-                android:stepSize="0.01"
-                android:theme="@style/RatingBar" />
+                <RatingBar
+                    android:id="@+id/ratingBar"
+                    style="?android:attr/ratingBarStyleIndicator"
+                    android:layout_width="106dp"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center|center_vertical"
+                    android:background="#003A3A3A"
+                    android:numStars="3"
+                    android:progressBackgroundTint="#AAAAAA"
+                    android:progressBackgroundTintMode="multiply"
+                    android:stepSize="0.01"
+                    android:theme="@style/RatingBar" />
 
-            <ImageView
-                android:id="@+id/imageView"
-                android:layout_width="100dp"
-                android:layout_height="75dp"
-                android:layout_alignParentRight="true"
-                android:scaleType="fitCenter"
-                app:layout_constraintEnd_toEndOf="parent" />
+                <ImageView
+                    android:id="@+id/imageView"
+                    android:layout_width="100dp"
+                    android:layout_height="75dp"
+                    android:layout_alignParentRight="true"
+                    android:scaleType="fitCenter"
+                    app:layout_constraintEnd_toEndOf="parent" />
 
-            <ImageButton
-                android:id="@+id/imShare"
-                android:layout_width="20dp"
-                android:layout_height="20dp"
-                android:layout_gravity="center|right"
-                android:layout_weight="1"
-                android:backgroundTint="#00FFFFFF"
-                android:elevation="15dp"
-                android:foregroundGravity="right"
-                android:visibility="gone"
-                app:srcCompat="@drawable/ic_share_quiz" />
+                <ImageButton
+                    android:id="@+id/imShare"
+                    android:layout_width="20dp"
+                    android:layout_height="20dp"
+                    android:layout_gravity="center|right"
+                    android:layout_weight="1"
+                    android:backgroundTint="#00FFFFFF"
+                    android:elevation="15dp"
+                    android:foregroundGravity="right"
+                    android:visibility="gone"
+                    app:srcCompat="@drawable/ic_share_quiz" />
 
-            <ImageButton
-                android:id="@+id/imDeleteQuiz"
-                android:layout_width="15dp"
-                android:layout_height="15dp"
-                android:layout_gravity="center"
-                android:layout_marginLeft="6dp"
-                android:layout_marginRight="6dp"
-                android:backgroundTint="#124F5E"
-                android:elevation="15dp"
-                android:visibility="gone"
-                app:srcCompat="@drawable/ic_baseline_quiz"
-                app:tint="#FF0000" />
+                <ImageButton
+                    android:id="@+id/imDeleteQuiz"
+                    android:layout_width="15dp"
+                    android:layout_height="15dp"
+                    android:layout_gravity="center"
+                    android:layout_marginLeft="6dp"
+                    android:layout_marginRight="6dp"
+                    android:backgroundTint="#124F5E"
+                    android:elevation="15dp"
+                    android:visibility="gone"
+                    app:srcCompat="@drawable/ic_baseline_quiz"
+                    app:tint="#FF0000" />
 
 
-        </LinearLayout>
+            </LinearLayout>
 
-        <ImageButton
-            android:id="@+id/imv_gradient_light_quiz"
-            android:layout_width="100dp"
-            android:layout_height="0dp"
-            android:layout_margin="0dp"
-            android:background="@color/nullColor"
-            android:foregroundGravity="bottom"
-            android:padding="0dp"
-            android:visibility="gone"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toTopOf="parent"
-            app:srcCompat="@drawable/gradient_light_quiz" />
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_weight="0.3"
+                android:orientation="horizontal">
 
-        <ImageButton
-            android:id="@+id/imv_grafient_hard_quiz"
-            android:layout_width="100dp"
-            android:layout_height="0dp"
-            android:layout_margin="0dp"
-            android:background="@color/nullColor"
-            android:foregroundGravity="bottom"
-            android:padding="0dp"
-            android:visibility="gone"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toTopOf="parent"
-            app:srcCompat="@drawable/gradient_hard_quiz" />
+                <TextView
+                    android:id="@+id/tvName"
+                    android:layout_width="wrap_content"
+                    android:layout_height="match_parent"
+                    android:layout_gravity="center"
+                    android:layout_marginLeft="20dp"
+                    android:layout_weight="0.3"
+                    android:foregroundGravity="left"
+                    android:text="user name"
+                    android:textColor="#000000"
+                    android:textColorLink="#8E0000"
+                    android:visibility="gone" />
 
-        <ImageButton
-            android:id="@+id/imv_gradient_translate_quiz"
-            android:layout_width="100dp"
-            android:layout_height="0dp"
-            android:layout_margin="0dp"
-            android:background="@color/nullColor"
-            android:foregroundGravity="bottom"
-            android:padding="0dp"
-            android:visibility="gone"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toTopOf="parent"
-            app:srcCompat="@drawable/gradient_universal_quiz" />
+                <TextView
+                    android:id="@+id/tvTime"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="end"
+                    android:layout_marginEnd="20dp"
+                    android:layout_weight="1"
+                    android:gravity="right|end"
+                    android:text="time"
+                    android:textColor="#000000"
+                    android:visibility="gone" />
+            </LinearLayout>
+
+        </LinearLayout>
 
     </com.tpov.schoolquiz.presentation.custom.CustomRoundedImageView>
 
Index: app/src/main/res/drawable/ic_translate.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><vector android:height=\"24dp\" android:tint=\"#0051FF\"\r\n    android:viewportHeight=\"24\" android:viewportWidth=\"24\"\r\n    android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <path android:fillColor=\"@android:color/white\" android:pathData=\"M21,4L11,4l-1,-3L3,1c-1.1,0 -2,0.9 -2,2v15c0,1.1 0.9,2 2,2h8l1,3h9c1.1,0 2,-0.9 2,-2L23,6c0,-1.1 -0.9,-2 -2,-2zM7,16c-2.76,0 -5,-2.24 -5,-5s2.24,-5 5,-5c1.35,0 2.48,0.5 3.35,1.3L9.03,8.57c-0.38,-0.36 -1.04,-0.78 -2.03,-0.78 -1.74,0 -3.15,1.44 -3.15,3.21S5.26,14.21 7,14.21c2.01,0 2.84,-1.44 2.92,-2.41L7,11.8v-1.71h4.68c0.07,0.31 0.12,0.61 0.12,1.02C11.8,13.97 9.89,16 7,16zM13.17,10.58h3.7c-0.43,1.25 -1.11,2.43 -2.05,3.47 -0.31,-0.35 -0.6,-0.72 -0.86,-1.1l-0.79,-2.37zM21.5,20.5c0,0.55 -0.45,1 -1,1L14,21.5l2,-2.5 -1.04,-3.1 3.1,3.1 0.92,-0.92 -3.3,-3.25 0.02,-0.02c1.13,-1.25 1.93,-2.69 2.4,-4.22L20,10.59v-1.3h-4.53L15.47,8h-1.29v1.29h-1.44L11.46,5.5h9.04c0.55,0 1,0.45 1,1v14z\"/>\r\n</vector>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_translate.xml b/app/src/main/res/drawable/ic_translate.xml
--- a/app/src/main/res/drawable/ic_translate.xml	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/res/drawable/ic_translate.xml	(date 1685299242376)
@@ -1,5 +1,5 @@
-<vector android:height="24dp" android:tint="#0051FF"
+<vector android:height="20dp" android:tint="#0051FF"
     android:viewportHeight="24" android:viewportWidth="24"
-    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    android:width="20dp" xmlns:android="http://schemas.android.com/apk/res/android">
     <path android:fillColor="@android:color/white" android:pathData="M21,4L11,4l-1,-3L3,1c-1.1,0 -2,0.9 -2,2v15c0,1.1 0.9,2 2,2h8l1,3h9c1.1,0 2,-0.9 2,-2L23,6c0,-1.1 -0.9,-2 -2,-2zM7,16c-2.76,0 -5,-2.24 -5,-5s2.24,-5 5,-5c1.35,0 2.48,0.5 3.35,1.3L9.03,8.57c-0.38,-0.36 -1.04,-0.78 -2.03,-0.78 -1.74,0 -3.15,1.44 -3.15,3.21S5.26,14.21 7,14.21c2.01,0 2.84,-1.44 2.92,-2.41L7,11.8v-1.71h4.68c0.07,0.31 0.12,0.61 0.12,1.02C11.8,13.97 9.89,16 7,16zM13.17,10.58h3.7c-0.43,1.25 -1.11,2.43 -2.05,3.47 -0.31,-0.35 -0.6,-0.72 -0.86,-1.1l-0.79,-2.37zM21.5,20.5c0,0.55 -0.45,1 -1,1L14,21.5l2,-2.5 -1.04,-3.1 3.1,3.1 0.92,-0.92 -3.3,-3.25 0.02,-0.02c1.13,-1.25 1.93,-2.69 2.4,-4.22L20,10.59v-1.3h-4.53L15.47,8h-1.29v1.29h-1.44L11.46,5.5h9.04c0.55,0 1,0.45 1,1v14z"/>
 </vector>
Index: app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.shoppinglist.utils\r\n\r\nimport android.content.SharedPreferences\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport java.text.ParseException\r\nimport java.text.SimpleDateFormat\r\nimport java.time.ZoneId\r\nimport java.time.temporal.ChronoUnit\r\nimport java.util.*\r\nimport kotlin.math.abs\r\n\r\nobject TimeManager {\r\n\r\n    private const val DEF_TIME_FORMAT = \"hh:mm:ss - yyyy/MM/dd\"\r\n    fun getCurrentTime(): String{\r\n        Log.d(\"NewNoteActivity\", \"getCurrentTime\")\r\n\r\n        val formatter = SimpleDateFormat(\"HH:mm:ss - dd/MM/yy\", Locale.getDefault())\r\n        return formatter.format(Calendar.getInstance().time)\r\n    }\r\n\r\n    fun getTimeFormat(time: String, defPreferences: SharedPreferences): String {\r\n        val defFormatter = SimpleDateFormat(DEF_TIME_FORMAT, Locale.getDefault())\r\n        val defDate = defFormatter.parse(time)\r\n        val newFormat = defPreferences.getString(\"time_format_key\", DEF_TIME_FORMAT)\r\n        val newFormatter = SimpleDateFormat(newFormat, Locale.getDefault())\r\n        return if (defDate != null) {\r\n            newFormatter.format(defDate)\r\n        } else {\r\n            time\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getDaysBetweenDates(dateString1: String, dateString2: String): Long? {\r\n        val formatter = SimpleDateFormat(DEF_TIME_FORMAT, Locale.getDefault())\r\n\r\n        return try {\r\n            // Преобразуйте строки даты в объекты Date\r\n            val date1 = formatter.parse(dateString1)\r\n            val date2 = formatter.parse(dateString2)\r\n\r\n            // Преобразуйте объекты Date в объекты LocalDate\r\n            val localDate1 = date1.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()\r\n            val localDate2 = date2.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()\r\n\r\n            // Вычислите разницу между двумя объектами LocalDate в днях\r\n            abs(ChronoUnit.DAYS.between(localDate1, localDate2))\r\n        } catch (e: ParseException) {\r\n            0\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getSecondBetweenDates(dateString1: String, dateString2: String): Long? {\r\n        val formatter = SimpleDateFormat(DEF_TIME_FORMAT, Locale.getDefault())\r\n\r\n        return try {\r\n            val date1 = formatter.parse(dateString1)\r\n            val date2 = formatter.parse(dateString2)\r\n\r\n            val millisecondsDiff = abs( date2.time - date1.time )\r\n            millisecondsDiff / 1000\r\n        } catch (e: ParseException) {\r\n            0\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt b/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt	(date 1685299242380)
@@ -13,7 +13,7 @@
 
 object TimeManager {
 
-    private const val DEF_TIME_FORMAT = "hh:mm:ss - yyyy/MM/dd"
+    private const val DEF_TIME_FORMAT = "HH:mm:ss - dd/MM/yy"
     fun getCurrentTime(): String{
         Log.d("NewNoteActivity", "getCurrentTime")
 
@@ -34,7 +34,7 @@
     }
 
     @RequiresApi(Build.VERSION_CODES.O)
-    fun getDaysBetweenDates(dateString1: String, dateString2: String): Long? {
+    fun getDaysBetweenDates(dateString1: String, dateString2: String): Long {
         val formatter = SimpleDateFormat(DEF_TIME_FORMAT, Locale.getDefault())
 
         return try {
@@ -46,8 +46,11 @@
             val localDate1 = date1.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
             val localDate2 = date2.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
 
-            // Вычислите разницу между двумя объектами LocalDate в днях
-            abs(ChronoUnit.DAYS.between(localDate1, localDate2))
+            // Вычислите разницу между двумя объектами LocalDate
+            val daysBetween = ChronoUnit.DAYS.between(localDate1, localDate2)
+            Log.d("daysBetween","daysBetween: $daysBetween")
+            // Верните абсолютное значение разницы в днях
+            abs(daysBetween)
         } catch (e: ParseException) {
             0
         }
Index: app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.network.event\r\n\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.tpov.schoolquiz.data.database.entities.ChatEntity\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.domain.*\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport javax.inject.Inject\r\n\r\n\r\nclass EventViewModel @Inject constructor(\r\n    private val getQuizEventUseCase: GetQuizEventUseCase,\r\n    private val getEventTranslateUseCase: GetEventTranslateUseCase,\r\n    private val getProfileUseCase: GetProfileUseCase,\r\n    private val getQuestionListUseCase: GetQuestionListUseCase,\r\n    val updateProfileUseCase: UpdateProfileUseCase\r\n) : ViewModel() {\r\n    var quiz2List: MutableList<QuizEntity> = arrayListOf()\r\n    var quiz3List: MutableList<QuizEntity> = arrayListOf()\r\n    var quiz4List: MutableList<QuizEntity> = arrayListOf()\r\n    var translate1Question: MutableList<QuestionEntity> = arrayListOf()\r\n    var translate2Question: MutableList<QuestionEntity> = arrayListOf()\r\n    var translateEditQuestion: MutableList<QuestionEntity> = arrayListOf()\r\n    var moderator: MutableList<ChatEntity> = arrayListOf()\r\n    var admin: MutableList<ChatEntity> = arrayListOf()\r\n    var develop: MutableList<ChatEntity> = arrayListOf()\r\n\r\n    val questionLiveData: MutableLiveData<List<QuestionEntity>?> = MutableLiveData()\r\n\r\n    fun getProfile(): ProfileEntity {\r\n        return getProfileUseCaseFun(SharedPreferencesManager.getTpovId())\r\n    }\r\n    private fun getProfileUseCaseFun(tpovId: Int): ProfileEntity {\r\n        log(\"getProfileUseCaseFun getProfileUseCase(tpovId):${getProfileUseCase(tpovId)}\")\r\n        return getProfileUseCase(tpovId)\r\n    }\r\n\r\n    fun loadQuests() {\r\n        log(\"loadQuests\")\r\n        // Здесь загружайте список квестов и устанавливайте значение для questsLiveData\r\n        questionLiveData.value = getQuestionListUseCase()\r\n    }\r\n\r\n    fun loadQuestion(idQuestion: Int) {\r\n        log(\"getQuestionListUseCase() :${getQuestionListUseCase()}\")\r\n        // Здесь загружайте вопрос и устанавливайте значение для questionLiveData\r\n        questionLiveData.value = getQuestionListUseCase()\r\n    }\r\n\r\n    fun getQuizList() {\r\n        log(\"fun getQuizList\")\r\n\r\n        getQuizEventUseCase().forEach {\r\n            when (it.event) {\r\n                2 -> quiz2List.add(it)\r\n                3 -> quiz3List.add(it)\r\n                4 -> quiz4List.add(it)\r\n            }\r\n        }\r\n\r\n        log(\"getQuizList quiz2List: $quiz2List\")\r\n        log(\"getQuizList quiz3List: $quiz3List\")\r\n        log(\"getQuizList quiz4List: $quiz4List\")\r\n    }\r\n\r\n    fun getTranslateList(tpovId: Int) {\r\n        log(\"fun getTranslateList: ${getEventTranslateUseCase()}\")\r\n        getEventTranslateUseCase()\r\n            .groupBy { it.idQuiz }\r\n            .flatMap { (_, questions) ->\r\n                questions.filter { question ->\r\n                    log(\"getTranslateList: question.language: ${question.language}, getProfileUseCase(tpovId).languages!!.split(|): ${getProfileUseCase(tpovId).languages!!.split(\"|\")}\")\r\n                    question.language !in getProfileUseCase(tpovId).languages!!.split(\"|\") ||\r\n                            question.lvlTranslate < (getProfileUseCase(tpovId).translater)!! - 50\r\n                }\r\n            }\r\n            .forEach { question ->\r\n                if (question.language !in getProfileUseCase(tpovId).languages!!.split(\"|\")) {\r\n                    translateEditQuestion.add(question)\r\n                } else if (question.lvlTranslate > 200) {\r\n                    translate2Question.add(question)\r\n                } else {\r\n                    translate1Question.add(question)\r\n                }\r\n            }\r\n    }\r\n    fun getProfileCount(): Int? {\r\n        val profile = getProfileUseCase(SharedPreferencesManager.getTpovId())\r\n        log(\"getProfileCount(): $profile, ${SharedPreferencesManager.getTpovId()}\")\r\n        return profile.count\r\n    }\r\n    fun getEventDeveloper() {\r\n        log(\"fun getTranslateList\")\r\n\r\n        log(\"getEventDeveloper moderator: $moderator\")\r\n        log(\"getEventDeveloper admin: $admin\")\r\n        log(\"getEventDeveloper develop: $develop\")\r\n    }\r\n\r\n    fun saveQuestions(updatedQuestions: List<QuestionEntity>) {\r\n\r\n    }\r\n}\r\n@OptIn(InternalCoroutinesApi::class)\r\nfun log(m: String) { Logcat.log(m, \"Event\", Logcat.LOG_VIEW_MODEL)}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt	(date 1685299242385)
@@ -18,7 +18,8 @@
     private val getEventTranslateUseCase: GetEventTranslateUseCase,
     private val getProfileUseCase: GetProfileUseCase,
     private val getQuestionListUseCase: GetQuestionListUseCase,
-    val updateProfileUseCase: UpdateProfileUseCase
+    val updateProfileUseCase: UpdateProfileUseCase,
+    val updateQuestionUseCase: UpdateQuestionUseCase
 ) : ViewModel() {
     var quiz2List: MutableList<QuizEntity> = arrayListOf()
     var quiz3List: MutableList<QuizEntity> = arrayListOf()
@@ -103,7 +104,9 @@
     }
 
     fun saveQuestions(updatedQuestions: List<QuestionEntity>) {
-
+        updatedQuestions.forEach {
+            updateQuestionUseCase(it)
+        }
     }
 }
 @OptIn(InternalCoroutinesApi::class)
Index: app/src/main/java/com/tpov/schoolquiz/data/database/QuizDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data.database\r\n\r\nimport android.content.Context\r\nimport androidx.room.Database\r\nimport androidx.room.Room\r\nimport androidx.room.RoomDatabase\r\nimport androidx.room.TypeConverters\r\nimport com.tpov.schoolquiz.data.database.entities.*\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\n\r\n@Database(\r\n    entities = [QuestionDetailEntity::class, PlayersEntity::class, QuestionEntity::class, QuizEntity::class, ApiQuestion::class, ProfileEntity::class, ChatEntity::class],\r\n    version = 1,\r\n    exportSchema = true\r\n)\r\n@TypeConverters(Converters::class)\r\nabstract class QuizDatabase : RoomDatabase() {\r\n    abstract fun getQuizDao(): QuizDao\r\n\r\n    companion object {\r\n        @Volatile\r\n        private var INSTANCE: QuizDatabase? = null\r\n\r\n        @InternalCoroutinesApi\r\n        fun getDatabase(context: Context): QuizDatabase {\r\n            return INSTANCE ?: synchronized(this) {\r\n                val instance = Room.databaseBuilder(\r\n                    context.applicationContext, QuizDatabase::class.java, \"SchoolQuiz.db\"\r\n                ).fallbackToDestructiveMigration().build()\r\n                INSTANCE = instance\r\n                instance\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDatabase.kt b/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDatabase.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDatabase.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDatabase.kt	(date 1685299242389)
@@ -9,8 +9,8 @@
 import kotlinx.coroutines.InternalCoroutinesApi
 
 @Database(
-    entities = [QuestionDetailEntity::class, PlayersEntity::class, QuestionEntity::class, QuizEntity::class, ApiQuestion::class, ProfileEntity::class, ChatEntity::class],
-    version = 1,
+    entities = [QuestionDetailEntity::class, PlayersEntity::class, QuestionEntity::class, QuizEntity::class, ProfileEntity::class, ChatEntity::class],
+    version = 2,
     exportSchema = true
 )
 @TypeConverters(Converters::class)
Index: app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.dialog\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.content.DialogInterface\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.CheckBox\r\nimport android.widget.EditText\r\nimport android.widget.LinearLayout\r\nimport android.widget.RadioButton\r\nimport androidx.appcompat.widget.AppCompatTextView\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.presentation.custom.Errors.errorGetLvlTranslate\r\nimport com.tpov.schoolquiz.presentation.custom.LanguageUtils\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport com.tpov.schoolquiz.presentation.main.MainActivityViewModel\r\nimport com.tpov.schoolquiz.presentation.question.log\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.android.synthetic.main.create_question_dialog.view.*\r\nimport kotlinx.android.synthetic.main.question_create_item.view.*\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\n\r\nclass CreateQuestionDialog : DialogFragment() {\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private val mainActivityViewModel by lazy {\r\n        ViewModelProvider(requireActivity())[MainActivityViewModel::class.java]\r\n    }\r\n    private lateinit var dialogView: View\r\n    private lateinit var questionsContainer: LinearLayout\r\n    private var numQuestion = 0\r\n    private var id = 0\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val id = arguments?.getInt(\"id\") ?: -1\r\n        this.id = id\r\n\r\n        val inflater = LayoutInflater.from(requireContext())\r\n        dialogView = inflater.inflate(R.layout.create_question_dialog, null)\r\n        questionsContainer = dialogView.findViewById(R.id.questions_container)\r\n        mainActivityViewModel.getQuestionListByIdQuiz(id).forEach { questionEntity ->\r\n            addFilledQuestionItem(questionEntity)\r\n        }\r\n\r\n        val dialogTitle: String\r\n        val positiveButtonText: String\r\n        val positiveButtonAction: (DialogInterface, Int) -> Unit\r\n\r\n        if (id == -1) {\r\n            dialogTitle = \"Создать вопросы\"\r\n            positiveButtonText = \"Завершить\"\r\n            positiveButtonAction = { _, _ -> createQuestions() }\r\n\r\n            dialogView.add_question_button.setOnClickListener {\r\n                addQuestionItem()\r\n            }\r\n        } else {\r\n            dialogTitle = \"Обновить вопросы\"\r\n            positiveButtonText = \"Сохранить\"\r\n            positiveButtonAction = { _, _ -> createQuestions() }\r\n\r\n            dialogView.quiz_title.setText(mainActivityViewModel.getQuizById(id).nameQuiz)\r\n\r\n            mainActivityViewModel.getQuestionListByIdQuiz(id).forEach { questionEntity ->\r\n                addFilledQuestionItem(questionEntity)\r\n            }\r\n        }\r\n\r\n        return AlertDialog.Builder(requireContext(), R.style.CustomDialogTheme)\r\n            .setTitle(dialogTitle)\r\n            .setView(dialogView)\r\n            .setPositiveButton(positiveButtonText, positiveButtonAction)\r\n            .setNegativeButton(\"Отмена\") { _, _ -> }\r\n            .create()\r\n    }\r\n\r\n    private fun addQuestionItem(): View {\r\n        val inflater = LayoutInflater.from(requireContext())\r\n        val questionItemView = inflater.inflate(R.layout.question_create_item, null)\r\n\r\n        questionItemView.language_selector.setOnClickListener {\r\n            showLanguageDialog(questionItemView)\r\n        }\r\n\r\n        numQuestion++\r\n        questionItemView.question_number.text = numQuestion.toString()\r\n        questionsContainer.addView(questionItemView)\r\n\r\n        return questionItemView\r\n    }\r\n\r\n    private fun addFilledQuestionItem(questionEntity: QuestionEntity): View {\r\n        val questionItemView = addQuestionItem()\r\n\r\n        val questionTitle = questionItemView.findViewById<EditText>(R.id.question_title)\r\n        val trueButton = questionItemView.findViewById<RadioButton>(R.id.true_button)\r\n        val hardQuestionCheckbox =\r\n            questionItemView.findViewById<CheckBox>(R.id.hard_question_checkbox)\r\n        val languageSelector =\r\n            questionItemView.findViewById<AppCompatTextView>(R.id.language_selector)\r\n\r\n        questionTitle.setText(questionEntity.nameQuestion)\r\n        trueButton.isChecked = questionEntity.answerQuestion\r\n        hardQuestionCheckbox.isChecked = questionEntity.hardQuestion\r\n        languageSelector.text = LanguageUtils.getLanguageFullName(questionEntity.language)\r\n\r\n        return questionItemView\r\n    }\r\n\r\n    private fun showLanguageDialog(questionItemView: View) {\r\n        val builder = AlertDialog.Builder(requireContext())\r\n        builder.setTitle(\"Язык вопроса\")\r\n        builder.setItems(LanguageUtils.languagesFullNames) { dialog, which ->\r\n            questionItemView.language_selector.text = LanguageUtils.languagesFullNames[which]\r\n            dialog.dismiss()\r\n        }\r\n        builder.show()\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private fun createQuestions() {\r\n        val questions = mutableListOf<QuestionEntity>()\r\n        var numHQ = 0\r\n        var numLQ = 0\r\n\r\n        var idQuiz = if (id == -1) mainActivityViewModel.getNewIdQuiz()\r\n        else id\r\n\r\n        log(\"getNewIdQuiz: ${mainActivityViewModel.getNewIdQuiz()}\")\r\n        for (i in 0 until questionsContainer.childCount) {\r\n            val questionItemView = questionsContainer.getChildAt(i)\r\n\r\n            val questionTitle = questionItemView.question_title.text.toString()\r\n            val questionAnswer = questionItemView.true_button.isChecked\r\n            val questionHard = questionItemView.hard_question_checkbox.isChecked\r\n\r\n            if (questionHard) numHQ++\r\n            else numLQ++\r\n\r\n            val questionLanguage = questionItemView.language_selector.text.toString()\r\n            val language = LanguageUtils.getLanguageShortCode(questionLanguage)\r\n\r\n                    val question = QuestionEntity(\r\n                        null,\r\n                        if (questionHard) numHQ\r\n                        else numLQ,\r\n                        questionTitle,\r\n                        questionAnswer,\r\n                        questionHard,\r\n                        idQuiz,\r\n                        language,\r\n                        try {\r\n                            mainActivityViewModel.getProfile().translater ?: errorGetLvlTranslate(\r\n                                activity\r\n                            )\r\n                        } catch (e: Exception) {\r\n                            0\r\n                        }\r\n\r\n                    )\r\n\r\n                    questions.add(question)\r\n        }\r\n\r\n        // Создание QuizEntity\r\n        val nameQuiz = dialogView.quiz_title.text.toString()\r\n        val currentTime = TimeManager.getCurrentTime()\r\n\r\n                val quizEntity = QuizEntity(\r\n                    idQuiz,\r\n                    nameQuiz,\r\n                    mainActivityViewModel.getProfile().name ?: \"\",\r\n                    if (id == -1) currentTime\r\n                    else (mainActivityViewModel.getQuizById(id).data),\r\n                    if (id == -1) 0\r\n                    else (mainActivityViewModel.getQuizById(id).stars),\r\n                    if (id == -1) 0\r\n                    else (mainActivityViewModel.getQuizById(id).starsPlayer),\r\n                    questions.count { !it.hardQuestion },\r\n                    questions.count { it.hardQuestion },\r\n                    if (id == -1) 0\r\n                    else (mainActivityViewModel.getQuizById(id).starsAll),\r\n                    if (id == -1) 0\r\n                    else (mainActivityViewModel.getQuizById(id).starsAllPlayer),\r\n                    if (id == -1) 0\r\n                    else (mainActivityViewModel.getQuizById(id).versionQuiz + 1),\r\n                    if (id == -1) null\r\n                    else (mainActivityViewModel.getQuizById(id).picture),\r\n                    if (id == -1) 1\r\n                    else (mainActivityViewModel.getQuizById(id).event),\r\n                    if (id == -1) 0\r\n                    else (mainActivityViewModel.getQuizById(id).rating),\r\n                    if (id == -1) 0\r\n                    else (mainActivityViewModel.getQuizById(id).ratingPlayer),\r\n                    true,\r\n                    if (id == -1) SharedPreferencesManager.getTpovId()\r\n                    else (mainActivityViewModel.getQuizById(id).tpovId)\r\n                )\r\n\r\n                // Сохранение quizEntity и questions в базу данных\r\n                mainActivityViewModel.insertQuiz(quizEntity)\r\n\r\n                questions.forEach {\r\n                    mainActivityViewModel.insertQuestion(\r\n                        it.copy(\r\n                            idQuiz = mainActivityViewModel.getIdQuizByNameQuiz(\r\n                                nameQuiz\r\n                            )\r\n                        )\r\n                    )\r\n                }\r\n    }\r\n\r\n    companion object {\r\n        const val NAME = \"name\"\r\n\r\n        fun newInstance(name: String, id: Int): CreateQuestionDialog {\r\n            val fragment = CreateQuestionDialog()\r\n            val args = Bundle()\r\n            args.putString(NAME, name)\r\n            args.putInt(\"id\", id)\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt	(date 1685299242395)
@@ -4,6 +4,8 @@
 import android.app.Dialog
 import android.content.DialogInterface
 import android.os.Bundle
+import android.text.Editable
+import android.text.TextWatcher
 import android.view.LayoutInflater
 import android.view.View
 import android.widget.CheckBox
@@ -13,18 +15,21 @@
 import androidx.appcompat.widget.AppCompatTextView
 import androidx.fragment.app.DialogFragment
 import androidx.lifecycle.ViewModelProvider
+import com.google.mlkit.nl.languageid.LanguageIdentification
 import com.tpov.schoolquiz.R
 import com.tpov.schoolquiz.data.database.entities.QuestionEntity
 import com.tpov.schoolquiz.data.database.entities.QuizEntity
 import com.tpov.schoolquiz.presentation.custom.Errors.errorGetLvlTranslate
 import com.tpov.schoolquiz.presentation.custom.LanguageUtils
-import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager
+import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId
 import com.tpov.schoolquiz.presentation.main.MainActivityViewModel
 import com.tpov.schoolquiz.presentation.question.log
 import com.tpov.shoppinglist.utils.TimeManager
 import kotlinx.android.synthetic.main.create_question_dialog.view.*
+import kotlinx.android.synthetic.main.profile_item.*
 import kotlinx.android.synthetic.main.question_create_item.view.*
-import kotlinx.coroutines.InternalCoroutinesApi
+import kotlinx.coroutines.*
+import java.util.*
 
 class CreateQuestionDialog : DialogFragment() {
 
@@ -35,12 +40,12 @@
     private lateinit var dialogView: View
     private lateinit var questionsContainer: LinearLayout
     private var numQuestion = 0
-    private var id = 0
+    private var id1 = 0
 
     @OptIn(InternalCoroutinesApi::class)
     override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
         val id = arguments?.getInt("id") ?: -1
-        this.id = id
+        this.id1 = id
 
         val inflater = LayoutInflater.from(requireContext())
         dialogView = inflater.inflate(R.layout.create_question_dialog, null)
@@ -54,16 +59,16 @@
         val positiveButtonAction: (DialogInterface, Int) -> Unit
 
         if (id == -1) {
-            dialogTitle = "Создать вопросы"
-            positiveButtonText = "Завершить"
+            dialogTitle = "Создать квест"
+            positiveButtonText = "Создать"
             positiveButtonAction = { _, _ -> createQuestions() }
 
             dialogView.add_question_button.setOnClickListener {
                 addQuestionItem()
             }
         } else {
-            dialogTitle = "Обновить вопросы"
-            positiveButtonText = "Сохранить"
+            dialogTitle = "Обновить квест"
+            positiveButtonText = "Обновить"
             positiveButtonAction = { _, _ -> createQuestions() }
 
             dialogView.quiz_title.setText(mainActivityViewModel.getQuizById(id).nameQuiz)
@@ -85,10 +90,52 @@
         val inflater = LayoutInflater.from(requireContext())
         val questionItemView = inflater.inflate(R.layout.question_create_item, null)
 
+        val questionTitle = questionItemView.findViewById<EditText>(R.id.question_title)
+
         questionItemView.language_selector.setOnClickListener {
             showLanguageDialog(questionItemView)
         }
 
+        // Добавляем TextWatcher к questionTitle
+        questionTitle.addTextChangedListener(object : TextWatcher {
+            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
+
+            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
+                log("onTextChanged $s")
+                if (count > 0) {
+                    log("onTextChanged count > 0")
+
+                    var lang = ""
+                    val languageIdentifier = LanguageIdentification.getClient()
+                    languageIdentifier.identifyLanguage(s.toString())
+                        .addOnSuccessListener { language ->
+                            log("onTextChanged, $language")
+                            lang = language ?: "und"
+                            if (lang == "und") {
+                                val userLocale: Locale = Locale.getDefault()
+                                val userLanguageCode: String = userLocale.language
+
+                                val languageFullName = LanguageUtils.getLanguageFullName(userLanguageCode)
+                                questionItemView.language_selector.text = languageFullName
+                            } else {
+                                val languageFullName = LanguageUtils.getLanguageFullName(language)
+                                questionItemView.language_selector.text = languageFullName
+                            }
+                        }
+                        .addOnFailureListener {
+                            val userLocale: Locale = Locale.getDefault()
+                            val userLanguageCode: String = userLocale.language
+                            lang = userLanguageCode
+
+                            val languageFullName = LanguageUtils.getLanguageFullName(lang)
+                            questionItemView.language_selector.text = languageFullName
+                        }
+                }
+            }
+
+            override fun afterTextChanged(s: Editable?) {}
+        })
+
         numQuestion++
         questionItemView.question_number.text = numQuestion.toString()
         questionsContainer.addView(questionItemView)
@@ -130,8 +177,8 @@
         var numHQ = 0
         var numLQ = 0
 
-        var idQuiz = if (id == -1) mainActivityViewModel.getNewIdQuiz()
-        else id
+        var idQuiz = if (id1 == -1) mainActivityViewModel.getNewIdQuiz()
+        else id1
 
         log("getNewIdQuiz: ${mainActivityViewModel.getNewIdQuiz()}")
         for (i in 0 until questionsContainer.childCount) {
@@ -147,75 +194,75 @@
             val questionLanguage = questionItemView.language_selector.text.toString()
             val language = LanguageUtils.getLanguageShortCode(questionLanguage)
 
-                    val question = QuestionEntity(
-                        null,
-                        if (questionHard) numHQ
-                        else numLQ,
-                        questionTitle,
-                        questionAnswer,
-                        questionHard,
-                        idQuiz,
-                        language,
-                        try {
-                            mainActivityViewModel.getProfile().translater ?: errorGetLvlTranslate(
-                                activity
-                            )
-                        } catch (e: Exception) {
-                            0
-                        }
-
-                    )
+            val question = QuestionEntity(
+                null,
+                if (questionHard) numHQ
+                else numLQ,
+                questionTitle,
+                questionAnswer,
+                questionHard,
+                idQuiz,
+                language,
+                try {
+                    mainActivityViewModel.getProfile().translater ?: errorGetLvlTranslate(
+                        activity
+                    )
+                } catch (e: Exception) {
+                    0
+                },
+                getTpovId().toString()
+            )
 
-                    questions.add(question)
+            questions.add(question)
         }
 
         // Создание QuizEntity
         val nameQuiz = dialogView.quiz_title.text.toString()
         val currentTime = TimeManager.getCurrentTime()
 
-                val quizEntity = QuizEntity(
-                    idQuiz,
-                    nameQuiz,
-                    mainActivityViewModel.getProfile().name ?: "",
-                    if (id == -1) currentTime
-                    else (mainActivityViewModel.getQuizById(id).data),
-                    if (id == -1) 0
-                    else (mainActivityViewModel.getQuizById(id).stars),
-                    if (id == -1) 0
-                    else (mainActivityViewModel.getQuizById(id).starsPlayer),
-                    questions.count { !it.hardQuestion },
-                    questions.count { it.hardQuestion },
-                    if (id == -1) 0
-                    else (mainActivityViewModel.getQuizById(id).starsAll),
-                    if (id == -1) 0
-                    else (mainActivityViewModel.getQuizById(id).starsAllPlayer),
-                    if (id == -1) 0
-                    else (mainActivityViewModel.getQuizById(id).versionQuiz + 1),
-                    if (id == -1) null
-                    else (mainActivityViewModel.getQuizById(id).picture),
-                    if (id == -1) 1
-                    else (mainActivityViewModel.getQuizById(id).event),
-                    if (id == -1) 0
-                    else (mainActivityViewModel.getQuizById(id).rating),
-                    if (id == -1) 0
-                    else (mainActivityViewModel.getQuizById(id).ratingPlayer),
-                    true,
-                    if (id == -1) SharedPreferencesManager.getTpovId()
-                    else (mainActivityViewModel.getQuizById(id).tpovId)
-                )
+        val quizEntity = QuizEntity(
+            idQuiz,
+            nameQuiz,
+            mainActivityViewModel.getProfile().name ?: "",
+            if (id1 == -1) currentTime
+            else (mainActivityViewModel.getQuizById(id1).data),
+            if (id1 == -1) 0
+            else (mainActivityViewModel.getQuizById(id1).stars),
+            if (id1 == -1) 0
+            else (mainActivityViewModel.getQuizById(id1).starsPlayer),
+            questions.count { !it.hardQuestion },
+            questions.count { it.hardQuestion },
+            if (id1 == -1) 0
+            else (mainActivityViewModel.getQuizById(id1).starsAll),
+            if (id1 == -1) 0
+            else (mainActivityViewModel.getQuizById(id1).starsAllPlayer),
+            if (id1 == -1) 0
+            else (mainActivityViewModel.getQuizById(id1).versionQuiz + 1),
+            if (id1 == -1) null
+            else (mainActivityViewModel.getQuizById(id1).picture),
+            if (id1 == -1) 1
+            else (mainActivityViewModel.getQuizById(id1).event),
+            if (id1 == -1) 0
+            else (mainActivityViewModel.getQuizById(id1).rating),
+            if (id1 == -1) 0
+            else (mainActivityViewModel.getQuizById(id1).ratingPlayer),
+            true,
+            if (id1 == -1) getTpovId()
+            else (mainActivityViewModel.getQuizById(id1).tpovId)
+        )
 
-                // Сохранение quizEntity и questions в базу данных
-                mainActivityViewModel.insertQuiz(quizEntity)
+        // Сохранение quizEntity и questions в базу данных
+        mainActivityViewModel.insertQuiz(quizEntity)
 
-                questions.forEach {
-                    mainActivityViewModel.insertQuestion(
-                        it.copy(
-                            idQuiz = mainActivityViewModel.getIdQuizByNameQuiz(
-                                nameQuiz
-                            )
-                        )
-                    )
-                }
+        questions.forEach {
+            mainActivityViewModel.insertQuestion(
+                it.copy(
+                    idQuiz = mainActivityViewModel.getIdQuizByNameQuiz(
+                        nameQuiz
+                    )
+                )
+            )
+        }
     }
 
     companion object {
Index: app/src/main/java/com/tpov/schoolquiz/data/RepositoryDBImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport com.tpov.schoolquiz.data.database.QuizDao\r\nimport com.tpov.schoolquiz.data.database.entities.ApiQuestion\r\nimport com.tpov.schoolquiz.data.database.entities.PlayersEntity\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionDetailEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.data.database.log\r\nimport com.tpov.schoolquiz.domain.repository.RepositoryDB\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport javax.inject.Inject\r\n\r\n\r\n@InternalCoroutinesApi\r\nclass RepositoryDBImpl @Inject constructor(\r\n    private val dao: QuizDao\r\n) : RepositoryDB {\r\n    override suspend fun insertQuizDetail(questionDetailEntity: QuestionDetailEntity) {\r\n        dao.insertQuizDetail(questionDetailEntity)\r\n    }\r\n\r\n    override suspend fun insertProfile(profile: ProfileEntity) {\r\n        dao.insertProfile(profile)\r\n    }\r\n\r\n    override suspend fun insertQuiz(quizEntity: QuizEntity) {\r\n        dao.insertQuiz(quizEntity)\r\n    }\r\n\r\n    override suspend fun insertQuestion(questionEntity: QuestionEntity) {\r\n        dao.insertQuestion(questionEntity)\r\n    }\r\n\r\n    override suspend fun insertListApiQuestion(apiQuestion: List<ApiQuestion>) {\r\n        dao.insertListApiQuestion(apiQuestion)\r\n    }\r\n\r\n    override suspend fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity> {\r\n        return dao.getQuestionDetailListByNameQuiz(nameQuiz)\r\n    }\r\n\r\n    override fun getQuizLiveData(tpovId: Int): LiveData<List<QuizEntity>> {\r\n        return dao.getQuizLiveData(tpovId)\r\n    }\r\n\r\n    override fun getEventLiveData(): LiveData<List<QuizEntity>> {\r\n        return dao.getEventLiveDataDB()\r\n    }\r\n\r\n    override suspend fun getQuestionDetailList(): List<QuestionDetailEntity> {\r\n        return dao.getQuestionDetailList()\r\n    }\r\n\r\n    override fun getProfileFlow(tpovId: Int): Flow<ProfileEntity> {\r\n\r\n        return dao.getProfileFlow(tpovId)\r\n    }\r\n\r\n    override suspend fun getTpovIdByEmail(email: String): Int {\r\n        return dao.getTpovIdByEmail(email)\r\n    }\r\n\r\n    override suspend fun getProfile(tpovId: Int): ProfileEntity {\r\n        return dao.getProfile(tpovId)\r\n    }\r\n\r\n    override suspend fun getAllProfiles(): List<ProfileEntity> {\r\n        return dao.getAllProfiles()\r\n    }\r\n\r\n    override suspend fun getQuizList(tpovId: Int): List<QuizEntity> {\r\n        return dao.getQuizList(tpovId)\r\n    }\r\n\r\n    override suspend fun getQuizEvent(): List<QuizEntity> {\r\n        return dao.getQuizEvent()\r\n    }\r\n\r\n    override suspend fun getTranslateEvent(): List<QuestionEntity> {\r\n        return dao.getTranslateEvent()\r\n    }\r\n\r\n    override suspend fun getQuizById(id: Int): QuizEntity {\r\n        return dao.getQuizById(id)\r\n    }\r\n\r\n    override suspend fun getQuestionList(): List<QuestionEntity> {\r\n        return dao.getQuestionList()\r\n    }\r\n\r\n    override suspend fun getQuestionListByIdQuiz(id: Int): List<QuestionEntity> {\r\n        return dao.getQuestionByIdQuiz(id)\r\n    }\r\n\r\n    override suspend fun getListApiQuestionBySystemDate(systemDate: String): List<ApiQuestion> {\r\n        return dao.getListApiQuestionBySystemDate(systemDate)\r\n    }\r\n\r\n    override suspend fun getApiQuestionList(): List<ApiQuestion> {\r\n        return dao.getListApiQuestion()\r\n    }\r\n\r\n    override suspend fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int {\r\n        return dao.getIdQuizByNameQuiz(nameQuiz, tpovId) ?: dao.getIdQuizByNameQuiz(nameQuiz, 0)\r\n        ?: 0\r\n    }\r\n\r\n    override suspend fun getNameQuizByIdQuiz(id: Int): String {\r\n        return dao.getNameQuizByIdQuiz(id)!!\r\n    }\r\n\r\n    override suspend fun getPlayersDB(): List<PlayersEntity> {\r\n        return dao.getPlayersDB()\r\n    }\r\n\r\n    override suspend fun getPlayersDB(tpovId: Int): PlayersEntity {\r\n        return dao.getPlayersDB(tpovId)\r\n    }\r\n\r\n    override fun deleteQuestionById(id: Int) {\r\n        dao.deleteQuestionByIdQuiz(id)\r\n    }\r\n\r\n    override fun deleteChat(time: String) {\r\n        dao.deleteChat(time)\r\n    }\r\n\r\n    override fun deleteQuizById(id: Int) {\r\n        dao.deleteQuizById(id)\r\n    }\r\n\r\n    override fun deleteQuestionDetailById(id: Int) {\r\n        dao.deleteQuestionDetailByIdQuiz(id)\r\n    }\r\n\r\n    override fun updateQuestionDetail(questionDetailEntity: QuestionDetailEntity) {\r\n\r\n        GlobalScope.launch {\r\n            withContext(Dispatchers.IO) {\r\n                dao.updateQuizDetail(questionDetailEntity)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun updateQuiz(quizEntity: QuizEntity) {\r\n        GlobalScope.launch {\r\n            withContext(Dispatchers.IO) {\r\n                dao.updateQuiz(quizEntity)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun updateApiQuestion(apiQuestion: ApiQuestion) {\r\n        GlobalScope.launch {\r\n            withContext(Dispatchers.IO) {\r\n                dao.updateApiQuestion(apiQuestion)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun updateProfile(profile: ProfileEntity) {\r\n\r\n        GlobalScope.launch {\r\n            withContext(Dispatchers.IO) {\r\n                log(\"updateProfileCount() updateProfile(): ${profile.pointsNolics}\")\r\n                dao.updateProfiles(profile)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun updateQuestion(questionEntity: QuestionEntity) {\r\n        GlobalScope.launch {\r\n            withContext(Dispatchers.IO) {\r\n                dao.updateQuestion(questionEntity)\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/RepositoryDBImpl.kt b/app/src/main/java/com/tpov/schoolquiz/data/RepositoryDBImpl.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/RepositoryDBImpl.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/RepositoryDBImpl.kt	(date 1685299243024)
@@ -2,20 +2,11 @@
 
 import androidx.lifecycle.LiveData
 import com.tpov.schoolquiz.data.database.QuizDao
-import com.tpov.schoolquiz.data.database.entities.ApiQuestion
-import com.tpov.schoolquiz.data.database.entities.PlayersEntity
-import com.tpov.schoolquiz.data.database.entities.ProfileEntity
-import com.tpov.schoolquiz.data.database.entities.QuestionDetailEntity
-import com.tpov.schoolquiz.data.database.entities.QuestionEntity
-import com.tpov.schoolquiz.data.database.entities.QuizEntity
+import com.tpov.schoolquiz.data.database.entities.*
 import com.tpov.schoolquiz.data.database.log
 import com.tpov.schoolquiz.domain.repository.RepositoryDB
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.GlobalScope
-import kotlinx.coroutines.InternalCoroutinesApi
+import kotlinx.coroutines.*
 import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.withContext
 import javax.inject.Inject
 
 
@@ -23,27 +14,23 @@
 class RepositoryDBImpl @Inject constructor(
     private val dao: QuizDao
 ) : RepositoryDB {
-    override suspend fun insertQuizDetail(questionDetailEntity: QuestionDetailEntity) {
+    override fun insertQuizDetail(questionDetailEntity: QuestionDetailEntity) {
         dao.insertQuizDetail(questionDetailEntity)
     }
 
-    override suspend fun insertProfile(profile: ProfileEntity) {
+    override fun insertProfile(profile: ProfileEntity) {
         dao.insertProfile(profile)
     }
 
-    override suspend fun insertQuiz(quizEntity: QuizEntity) {
+    override fun insertQuiz(quizEntity: QuizEntity) {
         dao.insertQuiz(quizEntity)
     }
 
-    override suspend fun insertQuestion(questionEntity: QuestionEntity) {
+    override fun insertQuestion(questionEntity: QuestionEntity) {
         dao.insertQuestion(questionEntity)
     }
 
-    override suspend fun insertListApiQuestion(apiQuestion: List<ApiQuestion>) {
-        dao.insertListApiQuestion(apiQuestion)
-    }
-
-    override suspend fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity> {
+    override fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity> {
         return dao.getQuestionDetailListByNameQuiz(nameQuiz)
     }
 
@@ -55,7 +42,7 @@
         return dao.getEventLiveDataDB()
     }
 
-    override suspend fun getQuestionDetailList(): List<QuestionDetailEntity> {
+    override fun getQuestionDetailList(): List<QuestionDetailEntity> {
         return dao.getQuestionDetailList()
     }
 
@@ -64,64 +51,56 @@
         return dao.getProfileFlow(tpovId)
     }
 
-    override suspend fun getTpovIdByEmail(email: String): Int {
+    override fun getTpovIdByEmail(email: String): Int {
         return dao.getTpovIdByEmail(email)
     }
 
-    override suspend fun getProfile(tpovId: Int): ProfileEntity {
+    override fun getProfile(tpovId: Int): ProfileEntity {
         return dao.getProfile(tpovId)
     }
 
-    override suspend fun getAllProfiles(): List<ProfileEntity> {
+    override fun getAllProfiles(): List<ProfileEntity> {
         return dao.getAllProfiles()
     }
 
-    override suspend fun getQuizList(tpovId: Int): List<QuizEntity> {
+    override fun getQuizList(tpovId: Int): List<QuizEntity> {
         return dao.getQuizList(tpovId)
     }
 
-    override suspend fun getQuizEvent(): List<QuizEntity> {
+    override fun getQuizEvent(): List<QuizEntity> {
         return dao.getQuizEvent()
     }
 
-    override suspend fun getTranslateEvent(): List<QuestionEntity> {
+    override fun getTranslateEvent(): List<QuestionEntity> {
         return dao.getTranslateEvent()
     }
 
-    override suspend fun getQuizById(id: Int): QuizEntity {
+    override fun getQuizById(id: Int): QuizEntity {
         return dao.getQuizById(id)
     }
 
-    override suspend fun getQuestionList(): List<QuestionEntity> {
+    override fun getQuestionList(): List<QuestionEntity> {
         return dao.getQuestionList()
     }
 
-    override suspend fun getQuestionListByIdQuiz(id: Int): List<QuestionEntity> {
+    override fun getQuestionListByIdQuiz(id: Int): List<QuestionEntity> {
         return dao.getQuestionByIdQuiz(id)
     }
 
-    override suspend fun getListApiQuestionBySystemDate(systemDate: String): List<ApiQuestion> {
-        return dao.getListApiQuestionBySystemDate(systemDate)
-    }
-
-    override suspend fun getApiQuestionList(): List<ApiQuestion> {
-        return dao.getListApiQuestion()
-    }
-
-    override suspend fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int {
+    override fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int {
         return dao.getIdQuizByNameQuiz(nameQuiz, tpovId) ?: dao.getIdQuizByNameQuiz(nameQuiz, 0)
         ?: 0
     }
 
-    override suspend fun getNameQuizByIdQuiz(id: Int): String {
+    override fun getNameQuizByIdQuiz(id: Int): String {
         return dao.getNameQuizByIdQuiz(id)!!
     }
 
-    override suspend fun getPlayersDB(): List<PlayersEntity> {
+    override fun getPlayersDB(): List<PlayersEntity> {
         return dao.getPlayersDB()
     }
 
-    override suspend fun getPlayersDB(tpovId: Int): PlayersEntity {
+    override fun getPlayersDB(tpovId: Int): PlayersEntity {
         return dao.getPlayersDB(tpovId)
     }
 
@@ -158,14 +137,6 @@
         }
     }
 
-    override fun updateApiQuestion(apiQuestion: ApiQuestion) {
-        GlobalScope.launch {
-            withContext(Dispatchers.IO) {
-                dao.updateApiQuestion(apiQuestion)
-            }
-        }
-    }
-
     override fun updateProfile(profile: ProfileEntity) {
 
         GlobalScope.launch {
Index: app/src/main/java/com/tpov/schoolquiz/data/database/entities/QuestionEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data.database.entities\r\n\r\nimport androidx.room.ColumnInfo\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\n\r\n\r\n@Entity(tableName = \"new_user_table\")\r\ndata class QuestionEntity(\r\n    @PrimaryKey(autoGenerate = true)\r\n    val id: Int?,\r\n\r\n    @ColumnInfo(name = \"numQuestion\")\r\n    val numQuestion: Int,\r\n\r\n    @ColumnInfo(name = \"nameQuestion\")\r\n    var nameQuestion: String,\r\n\r\n    @ColumnInfo(name = \"answerQuestion\")\r\n    val answerQuestion: Boolean,\r\n\r\n    @ColumnInfo(name = \"hardQuestion\")\r\n    val hardQuestion: Boolean,\r\n\r\n    @ColumnInfo(name = \"idQuiz\")\r\n    val idQuiz: Int,\r\n\r\n    @ColumnInfo(name = \"language\")\r\n    var language: String,\r\n\r\n    @ColumnInfo(name = \"lvlTranslate\")\r\n    var lvlTranslate: Int\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/database/entities/QuestionEntity.kt b/app/src/main/java/com/tpov/schoolquiz/data/database/entities/QuestionEntity.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/database/entities/QuestionEntity.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/database/entities/QuestionEntity.kt	(date 1685299243039)
@@ -29,5 +29,9 @@
     var language: String,
 
     @ColumnInfo(name = "lvlTranslate")
-    var lvlTranslate: Int
+    var lvlTranslate: Int,
+
+    @ColumnInfo(name = "infoTranslater")
+    var infoTranslater: String,
+
 )
Index: app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data\r\n\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.lifecycle.MutableLiveData\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.*\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.StorageReference\r\nimport com.tpov.schoolquiz.data.database.QuizDao\r\nimport com.tpov.schoolquiz.data.database.entities.*\r\nimport com.tpov.schoolquiz.data.fierbase.*\r\nimport com.tpov.schoolquiz.domain.repository.RepositoryFB\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.getTpovId\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager.setTpovId\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.*\r\nimport kotlinx.coroutines.flow.Flow\r\nimport java.io.File\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n\r\n@Singleton\r\nclass RepositoryFBImpl @Inject constructor(\r\n    private val dao: QuizDao,\r\n    private val application: Application\r\n) : RepositoryFB {\r\n\r\n    private lateinit var chatValueEventListener: ValueEventListener\r\n    private val context = application.baseContext\r\n    var synthLiveData = MutableLiveData<Int>()\r\n    var synth = 0\r\n    var synthGetData = 0\r\n    var synthSetData = 0\r\n    override fun deleteAllQuiz() {\r\n        FirebaseDatabase.getInstance().getReference(\"question1\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question2\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question3\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question4\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question5\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question6\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question7\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question8\").setValue(null)\r\n\r\n        FirebaseDatabase.getInstance().getReference(\"quiz1\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz2\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz3\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz4\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz5\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz6\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz7\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"quiz8\").setValue(null)\r\n\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail1\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail2\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail3\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail4\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail5\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail6\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail7\").setValue(null)\r\n        FirebaseDatabase.getInstance().getReference(\"question_detail8\").setValue(null)\r\n\r\n    }\r\n\r\n    override fun getValSynth(): MutableLiveData<Int> {\r\n        log(\"getValSynth()  ${synthLiveData.value}\")\r\n        log(\"getValSynth()s  $synth\")\r\n        return synthLiveData\r\n    }\r\n\r\n    override fun getPlayersList() {\r\n        val playersListRef = FirebaseDatabase.getInstance().getReference(\"players/listPlayers\")\r\n        playersListRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n\r\n                val playersList = mutableListOf<PlayersEntity>()\r\n                log(\"getPlayersList snapshot: $snapshot\")\r\n                for (playerSnapshot in snapshot.children) {\r\n\r\n                    log(\"getPlayersList playerSnapshot: $playerSnapshot\")\r\n                    val player = playerSnapshot.getValue(Players::class.java)\r\n                    if (player != null) {\r\n                        log(\"getPlayersList player: $player\")\r\n                        playersList.add(\r\n                            player.toPlayersEntity().copy(id = playerSnapshot.key?.toInt())\r\n                        )\r\n                    }\r\n                }\r\n                dao.deletePlayersList()\r\n                dao.insertPlayersList(playersList)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                // Обработка ошибок\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getTranslateFB() {\r\n        val questionRef3 = FirebaseDatabase.getInstance().getReference(\"question3\")\r\n        val questionRef4 = FirebaseDatabase.getInstance().getReference(\"question4\")\r\n        val questionRef5 = FirebaseDatabase.getInstance().getReference(\"question5\")\r\n        val questionRef6 = FirebaseDatabase.getInstance().getReference(\"question6\")\r\n        val questionRef7 = FirebaseDatabase.getInstance().getReference(\"question7\")\r\n        val questionRef8 = FirebaseDatabase.getInstance().getReference(\"question8\")\r\n\r\n        questionRef3.limitToLast(1).addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestion snapshot: ${snapshot.key}\")\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    if (dao.getQuizByIdDB(idQuizSnap.key?.toInt()!!) != null) {\r\n                        log(\"getQuestion idQuizSnap: ${idQuizSnap.key}\")\r\n                        for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            log(\"getQuestion idQuestionSnap: ${idQuestionSnap.key}\")\r\n                            for (languageSnap in idQuestionSnap.children) { // перебор всех вопросов внутри language\r\n                                log(\"getQuestion languageSnap: ${languageSnap.key}\")\r\n                                val question = languageSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    dao.insertQuestion(\r\n                                        QuestionEntity(\r\n                                            null,\r\n                                            idQuestionSnap.key?.toInt() ?: 0,\r\n                                            question.nameQuestion,\r\n                                            question.answerQuestion,\r\n                                            question.typeQuestion,\r\n                                            idQuizSnap.key?.toInt() ?: -1,\r\n                                            languageSnap.key ?: \"eu\",\r\n                                            question.lvlTranslate\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestion8Data ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    init {\r\n        val referenceValue = Integer.toHexString(System.identityHashCode(getValSynth()))\r\n\r\n        log(\"fun init referenceValue :$referenceValue\")\r\n    }\r\n\r\n    @OptIn(DelicateCoroutinesApi::class)\r\n    override fun getChatData(): Flow<List<ChatEntity>> {\r\n        val chatRef = FirebaseDatabase.getInstance().getReference(\"chat\")\r\n        val dateFormat = SimpleDateFormat(\"HH:mm:ss - dd/MM/yy\")\r\n        chatValueEventListener =\r\n            chatRef.limitToLast(10).addValueEventListener(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    log(\"getChatData snapshot: $snapshot\")\r\n                    GlobalScope.launch {\r\n                        // Получаем данные из snapshot и сохраняем их в локальную базу данных\r\n\r\n                        for (dateSnapshot in snapshot.children) {\r\n                            log(\"getChatData dateSnapshot: $dateSnapshot\")\r\n                            for (data in dateSnapshot.children) {\r\n                                log(\"getChatData data: $data\")\r\n                                val chat = data.getValue(Chat::class.java)\r\n                                val date1 = dateFormat.parse(chat?.time.toString())\r\n                                var date2: Date? =\r\n                                    if (SharedPreferencesManager.getTimeMassage() == \"0\") {\r\n                                        SharedPreferencesManager.setTimeMassage(TimeManager.getCurrentTime())\r\n                                        dateFormat.parse(SharedPreferencesManager.getTimeMassage())\r\n                                    } else dateFormat.parse(SharedPreferencesManager.getTimeMassage())\r\n\r\n                                log(\"getChatData (date1.after(date2): ${(date1.after(date2))}\")\r\n                                if (chat != null && (date1.after(date2))) {\r\n                                    dao.insertChat(chat.toChatEntity())\r\n                                    SharedPreferencesManager.setTimeMassage(chat.time)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n                    // Обработка ошибок\r\n                }\r\n            })\r\n        return dao.getChat()\r\n    }\r\n\r\n    override fun removeChatListener() {\r\n        val chatRef = FirebaseDatabase.getInstance().getReference(\"chat\")\r\n        chatRef.removeEventListener(chatValueEventListener)\r\n    }\r\n\r\n    fun savePictureToLocalDirectory(\r\n        pictureString: String,\r\n        callback: (path: String?) -> Unit\r\n    ) {\r\n        log(\"fun savePictureToLocalDirectory()\")\r\n        if (!context.cacheDir.exists()) context.cacheDir.mkdir()\r\n        val directory = File(context.cacheDir, \"\")\r\n        var uid = FirebaseAuth.getInstance().currentUser?.uid\r\n\r\n        val storage: FirebaseStorage = FirebaseStorage.getInstance()\r\n        val storageRef: StorageReference = storage.reference\r\n        val pathReference: StorageReference = storageRef.child(\"picture/$pictureString\")\r\n\r\n        val file = File(directory, \"$pictureString\")\r\n\r\n        log(\"savePictureToLocalDirectory() путь сохранения картинки: $pictureString\")\r\n        pathReference.getFile(file).addOnSuccessListener {\r\n            // Обработка успешного скачивания картинки\r\n            log(\"savePictureToLocalDirectory() картинка получена успешно\")\r\n\r\n            callback(\"$pictureString\")\r\n        }.addOnFailureListener {\r\n\r\n            log(\"savePictureToLocalDirectory() ошибка получение картинки: $it\")\r\n            // Обработка ошибок\r\n            callback(null)\r\n        }\r\n    }\r\n\r\n    override fun getQuiz8Data() {\r\n        log(\"fun getQuiz8Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz8\"))\r\n    }\r\n\r\n    @OptIn(DelicateCoroutinesApi::class)\r\n    override fun getQuiz7Data() {\r\n        log(\"fun getQuiz7Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz7\"))\r\n    }\r\n\r\n    private fun getQuiz(\r\n        quizRef: DatabaseReference\r\n    ) {\r\n        log(\"fun getQuiz()\")\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                for (data in snapshot.children) {\r\n                    val versionQuiz =\r\n                        SharedPreferencesManager.getVersionQuiz(data.key ?: \"-1\")\r\n                    val quiz = data.getValue(Quiz::class.java)\r\n\r\n                    log(\"getQuiz(), data: ${data.key}, versionQuiz: $versionQuiz, quizEntity: $quiz\")\r\n                    if (quiz != null && versionQuiz < quiz.versionQuiz) {\r\n                        savePictureToLocalDirectory(\r\n                            quiz.picture\r\n                        ) { path ->\r\n                            log(\"getQuiz() версия квеста меньше - обновляем, или добавляем\")\r\n                            if (versionQuiz == -1) dao.insertQuiz(\r\n                                quiz.toQuizEntity(\r\n                                    data.key!!.toInt(),\r\n                                    0,\r\n                                    0,\r\n                                    0,\r\n                                    path ?: \"\"\r\n                                )\r\n                            )\r\n                            else dao.updateQuiz(\r\n                                quiz.toQuizEntity(\r\n                                    data.key!!.toInt(),\r\n                                    0,\r\n                                    0,\r\n                                    0,\r\n                                    path\r\n                                )\r\n                            )\r\n                            val refQuestion = when (quiz.event) {\r\n                                2 -> FirebaseDatabase.getInstance().getReference(\"question2\")\r\n                                3 -> FirebaseDatabase.getInstance().getReference(\"question3\")\r\n                                4 -> FirebaseDatabase.getInstance().getReference(\"question4\")\r\n                                5 -> FirebaseDatabase.getInstance().getReference(\"question5\")\r\n                                6 -> FirebaseDatabase.getInstance().getReference(\"question6\")\r\n                                7 -> FirebaseDatabase.getInstance().getReference(\"question7\")\r\n                                8 -> FirebaseDatabase.getInstance().getReference(\"question8\")\r\n                                else -> FirebaseDatabase.getInstance()\r\n                                    .getReference(\"question1/${quiz.tpovId}\")\r\n                            }\r\n\r\n                            val refQuestionDetail = when (quiz.event) {\r\n                                1 -> FirebaseDatabase.getInstance()\r\n                                    .getReference(\"question_detail1/${getTpovId()}\")\r\n\r\n                                2 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                3 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                4 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                5 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                6 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                7 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                8 -> FirebaseDatabase.getInstance().getReference(\"\")\r\n                                else -> FirebaseDatabase.getInstance()\r\n                                    .getReference(\"\")\r\n                            }\r\n                            getQuestion(refQuestion, data.key!!)\r\n                            getQuestionDetail(refQuestionDetail, data.key!!)\r\n\r\n                            SharedPreferencesManager.setVersionQuiz(\r\n                                data.key!!,\r\n                                quiz.versionQuiz\r\n                            )\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuiz(), error: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuiz6Data() {\r\n        log(\"fun getQuiz6Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz6\"))\r\n    }\r\n\r\n    override fun getQuiz5Data() {\r\n        log(\"fun getQuiz5Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz5\"))\r\n    }\r\n\r\n    override fun getQuiz4Data() {\r\n        log(\"fun getQuiz4Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz4\"))\r\n    }\r\n\r\n    override fun getQuiz3Data() {\r\n        log(\"fun getQuiz3Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz3\"))\r\n    }\r\n\r\n    override fun getQuiz2Data() {\r\n        log(\"fun getQuiz2Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz2\"))\r\n    }\r\n\r\n    override fun getQuiz1Data() {\r\n        log(\"fun getQuiz1Data\")\r\n        getQuiz(FirebaseDatabase.getInstance().getReference(\"quiz1/${getTpovId()}\"))\r\n    }\r\n\r\n    override fun getQuestion8() {\r\n        log(\"fun getQuestion8Data\")\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question8\")\r\n        getQuestion(questionRef, \"-1\")\r\n    }\r\n\r\n    private fun getQuestion(questionRef: DatabaseReference, idQuiz: String) {\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestion snapshot: ${snapshot.key}\")\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    if (idQuizSnap.key == idQuiz) {\r\n                        dao.deleteQuestionByIdQuiz(idQuizSnap.key?.toInt() ?: -1)\r\n                        log(\"getQuestion idQuizSnap: ${idQuizSnap.key}\")\r\n                        for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            log(\"getQuestion idQuestionSnap: ${idQuestionSnap.key}\")\r\n                            for (languageSnap in idQuestionSnap.children) { // перебор всех вопросов внутри language\r\n                                log(\"getQuestion languageSnap: ${languageSnap.key}\")\r\n                                val question = languageSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    dao.insertQuestion(\r\n                                        QuestionEntity(\r\n                                            null,\r\n                                            idQuestionSnap.key?.toInt() ?: 0,\r\n                                            question.nameQuestion,\r\n                                            question.answerQuestion,\r\n                                            question.typeQuestion,\r\n                                            idQuizSnap.key?.toInt() ?: -1,\r\n                                            languageSnap.key ?: \"eu\",\r\n                                            question.lvlTranslate\r\n                                        )\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestion8Data ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion7() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question7\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion6() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question6\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion5() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question5\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion4() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question4\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion3() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question3\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion2() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question2\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestion1() {\r\n        getQuestion(FirebaseDatabase.getInstance().getReference(\"question1/$${getTpovId()}\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail1() {\r\n        log(\"fun getQuestionDetail1()\")\r\n        getQuestionDetail(\r\n            FirebaseDatabase.getInstance().getReference(\"question_detail1/$${getTpovId()}\"), \"-1\"\r\n        )\r\n    }\r\n\r\n    override fun getQuestionDetail2() {\r\n        log(\"fun getQuestionDetail2()\")\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail2\"), \"-1\")\r\n    }\r\n\r\n    private fun getQuestionDetail(questionRef: DatabaseReference, idQuiz: String) {\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestionDetail2() snapshot: ${snapshot.key}\")\r\n                for (user in snapshot.children) {\r\n                    log(\"getQuestionDetail2() user: ${user.key}\")\r\n                    if (user.key == idQuiz && dao.getQuestionDetailList().size != user.childrenCount.toInt()) {\r\n                        dao.deleteQuestionDetailByIdQuiz(idQuiz.toInt())\r\n                        for (idQuizSnap in user.children) {                                             //\r\n                            log(\"getQuestionDetail2() idQuizSnap: ${idQuizSnap.key}\")\r\n                            val questionDetailEntity =\r\n                                idQuizSnap.getValue(QuestionDetail::class.java)\r\n                            if (questionDetailEntity != null) {\r\n                                log(\"getQuestionDetail2() квест не пустой, добавляем в список\")\r\n\r\n                                dao.insertQuizDetail(\r\n                                    questionDetailEntity.toQuestionDetailEntity(\r\n                                        null,\r\n                                        idQuiz.toInt(),\r\n                                        true\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestionDetail2() ошибка: $error\")\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail3() {\r\n        log(\"fun getQuestionDetail3()\")\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail3\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail4() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail4\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail5() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail5\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail6() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail6\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail7() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail7\"), \"-1\")\r\n    }\r\n\r\n    override fun getQuestionDetail8() {\r\n        getQuestionDetail(FirebaseDatabase.getInstance().getReference(\"question_detail8\"), \"-1\")\r\n    }\r\n\r\n    override fun getProfile() {\r\n        log(\"fun getProfile()\")\r\n        val profileRef = FirebaseDatabase.getInstance().getReference(\"Profiles\")\r\n\r\n        profileRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getProfile() snapshot: ${snapshot.key}\")\r\n                val tpovId = getTpovId()\r\n                val profile = snapshot.child(\"$tpovId\").getValue(Profile::class.java)\r\n\r\n                log(\"getProfile() tpovId: $tpovId\")\r\n\r\n                if (profile != null) {\r\n                    log(\"getProfile() профиль не пустой\")\r\n                    if (dao.getProfileByTpovId(tpovId) == null) {\r\n                        log(\"getProfile() профиль по tpovid пустой, создаем новый\")\r\n                        dao.insertProfile(profile.toProfileEntity(100, 500))\r\n\r\n                    } else {\r\n                        log(\"getProfile() профиль по tpovid найден\")\r\n                        dao.updateProfiles(\r\n                            dao.getProfileByFirebaseId(\r\n                                FirebaseAuth.getInstance().currentUser?.uid ?: \"\"\r\n                            )\r\n                                .copy(\r\n                                    addPointsGold = profile.addPoints.addGold,\r\n                                    addPointsNolics = profile.addPoints.addNolics,\r\n                                    addTrophy = profile.addPoints.addTrophy,\r\n                                    addPointsSkill = profile.addPoints.addSkill,\r\n                                    addPointsSkillInSeason = profile.addPoints.addSkillInSesone,\r\n                                    gamer = profile.qualification.gamer,\r\n                                    sponsor = profile.qualification.sponsor,\r\n                                    tester = profile.qualification.tester,\r\n                                    translater = profile.qualification.translater,\r\n                                    moderator = profile.qualification.moderator,\r\n                                    admin = profile.qualification.admin,\r\n                                    developer = profile.qualification.developer,\r\n                                    dateSynch = TimeManager.getCurrentTime(),\r\n                                    count = dao.getProfileByTpovId(tpovId).count,\r\n                                    countGold = dao.getProfileByTpovId(tpovId).countGold\r\n                                )\r\n                        )\r\n                    }\r\n                    synthLiveData.value = ++synth\r\n                    log(\"getProfile() synth: ${synthLiveData.value}\")\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getProfile() ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun setEvent() {\r\n        log(\"fun setEvent\")\r\n\r\n        val quizEventDB = dao.getQuizEvent()\r\n        val database = FirebaseDatabase.getInstance()\r\n\r\n        val quizRef2 = database.getReference(\"quiz2\")\r\n        val quizRef3 = database.getReference(\"quiz3\")\r\n        val quizRef4 = database.getReference(\"quiz4\")\r\n        val quizRef5 = database.getReference(\"quiz5\")\r\n        val quizRef6 = database.getReference(\"quiz6\")\r\n        val quizRef7 = database.getReference(\"quiz7\")\r\n        val quizRef8 = database.getReference(\"quiz8\")\r\n        val questionRef2 = database.getReference(\"question2\")\r\n        val questionRef3 = database.getReference(\"question3\")\r\n        val questionRef4 = database.getReference(\"question4\")\r\n        val questionRef5 = database.getReference(\"question5\")\r\n        val questionRef6 = database.getReference(\"question6\")\r\n        val questionRef7 = database.getReference(\"question7\")\r\n        val questionRef8 = database.getReference(\"question8\")\r\n        val playersRef = database.getReference(\"players\")\r\n        val playersQuiz = playersRef.child(\"quiz\")\r\n\r\n        for (quiz in quizEventDB) {\r\n            log(\"fun setEvent event: ${quiz.event}, quiz.id.toString(): ${quiz.id.toString()}\")\r\n            when (quiz.event) {\r\n                3 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}, quiz.id.toString(): ${quiz.id.toString()}\")\r\n                    quizRef3.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef2.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef3.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question).addOnSuccessListener {\r\n                                questionRef2.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n\r\n                }\r\n\r\n                4 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}\")\r\n                    quizRef4.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef3.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef4.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question).addOnSuccessListener {\r\n                                questionRef3.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n                }\r\n\r\n                5 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}\")\r\n                    quizRef5.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef4.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef5.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question)\r\n                            .addOnSuccessListener {\r\n                                questionRef4.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (TimeManager.getDaysBetweenDates(quiz.data, TimeManager.getCurrentTime())!! > 90) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n                }\r\n\r\n                6 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}\")\r\n                    quizRef6.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef5.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef6.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question)\r\n                            .addOnSuccessListener {\r\n                                questionRef5.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n                }\r\n\r\n                7 -> {\r\n                    log(\"fun setEvent event: ${quiz.event}\")\r\n                    quizRef7.child(quiz.id.toString())\r\n                        .setValue(quiz).addOnSuccessListener {\r\n                            quizRef6.child(\"${quiz.id}\").removeValue()\r\n                        }\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef7.child(\"${question.idQuiz}/${question.id}/${question.language}\")\r\n                            .setValue(question)\r\n                            .addOnSuccessListener {\r\n                                questionRef6.child(\"${question.idQuiz}\").removeValue()\r\n                            }\r\n                    }\r\n                    if (quiz.stars != 0) {\r\n                        dao.deleteQuizById(quiz.id!!)\r\n                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)\r\n                        dao.deleteQuestionByIdQuiz(quiz.id!!)\r\n                    }\r\n                }\r\n\r\n                8 -> {\r\n                    quizRef7.child(\"${quiz.id}\").removeValue()\r\n                    dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->\r\n                        questionRef7.child(\"${question.idQuiz}\").removeValue()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun setQuizData() {\r\n        log(\"fun setQuizData()\")\r\n        var tpovId = getTpovId()\r\n        var quizDB = dao.getQuizEvent()\r\n\r\n        var idQuiz = 0\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val quizRef1 = database.getReference(\"quiz1\")\r\n        val quizRef2 = database.getReference(\"quiz2\")\r\n        val quizRef3 = database.getReference(\"quiz3\")\r\n        val quizRef4 = database.getReference(\"quiz4\")\r\n        val quizRef5 = database.getReference(\"quiz5\")\r\n        val quizRef6 = database.getReference(\"quiz6\")\r\n        val quizRef7 = database.getReference(\"quiz7\")\r\n        val quizRef8 = database.getReference(\"quiz8\")\r\n\r\n        val playersRef = database.getReference(\"players\")\r\n        // создаем скоуп для запуска корутин\r\n        val coroutineScope = CoroutineScope(Dispatchers.Default)\r\n        val playersQuiz = playersRef.child(\"quiz\")\r\n\r\n// запускаем корутину\r\n        coroutineScope.launch(Dispatchers.IO) {\r\n            log(\"setQuizData() launch\")\r\n            var readValue = true\r\n            var blockServer = false\r\n            quizDB.forEach {\r\n                if (it.id!! < 100) {\r\n                    log(\"setQuizData() найден квест который не был синхронизирован с сервером\")\r\n                    blockServer = true\r\n                }\r\n            }\r\n\r\n            val databaseReference = FirebaseDatabase.getInstance().getReference(\"players\")\r\n            databaseReference.child(\"read\").addValueEventListener(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    if (blockServer) {\r\n                        readValue = dataSnapshot.value as Boolean\r\n                        log(\"setQuizData() databaseReference readValue: $readValue\")\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    log(\"setQuizData() databaseReference error read fb: $databaseError\")\r\n                }\r\n            })\r\n\r\n            playersRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    log(\"setQuizData() playersRef snapshot: $snapshot\")\r\n\r\n                    coroutineScope.launch(Dispatchers.IO) {\r\n                        if (blockServer) {\r\n                            var i = 0\r\n                            while (!readValue) {\r\n                                log(\"setQuizData() playersRef сервер занят, ждем\")\r\n                                delay(100) // заменяем Thread.sleep() на delay()\r\n                                i++\r\n\r\n                                if (i == 300) Toast.makeText(\r\n                                    context,\r\n                                    \"Если сервер не освободится в течении 3 минут - будет совершена принудительная синхронизация, возможно она решит проблему\",\r\n                                    Toast.LENGTH_LONG\r\n                                ).show()\r\n                                if (i == 600 * 3) break\r\n                            }\r\n\r\n                            val players =\r\n                                snapshot.value as Map<*, *> // Преобразование значений в Map\r\n                            idQuiz =\r\n                                (players[\"idQuiz\"] as Long).toInt() // Получение значения переменной allQuiz\r\n                            log(\"setQuizData() playersRef idQuiz: $idQuiz\")\r\n                            val updates = hashMapOf<String, Any>(\"read\" to false)\r\n                            playersRef.updateChildren(updates)\r\n                        }\r\n\r\n                        quizDB.forEach { quiz ->\r\n                            val quizRatingMap = mapOf(\r\n                                \"rating\" to quiz.rating,\r\n                                \"stars\" to quiz.starsAll\r\n                            )\r\n\r\n                            log(\"setQuizData() playersRef quizDB перебираем: $quiz\")\r\n                            if (quiz.event == 1) {\r\n                                log(\"setQuizData() playersRef quizDB event1\")\r\n\r\n                                if (quiz.id!! >= 100) {\r\n                                    log(\"setQuizData() playersRef quizDB event1 id >= 100 просто созраняем на сервер\")\r\n                                    quizRef1.child(\"${tpovId}/${quiz.id.toString()}\").setValue(quiz)\r\n                                        .addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${quiz.tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                } else {\r\n                                    log(\"setQuizData() playersRef quizDB event1 id < 100 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    val oldId = quiz.id\r\n                                    quiz.id = idQuiz\r\n                                    quizRef1.child(\"${tpovId}/$idQuiz\").setValue(quiz)\r\n                                        .addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${quiz.tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId!!).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz\r\n                                    )\r\n                                }\r\n\r\n                            } else if (quiz.event == 2) {\r\n                                log(\"setQuizData() playersRef quizDB event2\")\r\n                                if (quiz.id!! >= 100) {\r\n                                    log(\"setQuizData() playersRef quizDB id >= 100  event2 просто созраняем на сервер\")\r\n                                    quizRef2.child(\"${tpovId}/${quiz.id.toString()}\")\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                } else {\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef2.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz\r\n                                    )\r\n                                }\r\n\r\n                            } else if (quiz.event == 3) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef3.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef3.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n\r\n                                }\r\n                            } else if (quiz.event == 4) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef4.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef4.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            } else if (quiz.event == 5) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef5.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef5.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            } else if (quiz.event == 6) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef6.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef6.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            } else if (quiz.event == 7) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    quizRef7.child(quiz.id.toString())\r\n                                        .setValue(quiz).addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef7.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            } else if (quiz.event == 8) {\r\n                                if (quiz.id!! >= 100) {\r\n                                    log(\"setQuizData() event8 просто сохраняем на сервер\")\r\n                                    quizRef8.child(quiz.id.toString()).setValue(quiz)\r\n                                        .addOnSuccessListener {\r\n                                            if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                                .updateChildren(quizRatingMap)\r\n                                        }\r\n                                    SharedPreferencesManager.setVersionQuiz(\r\n                                        idQuiz.toString(),\r\n                                        quiz.versionQuiz\r\n                                    )\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = quiz.id!!\r\n                                    quiz.id = idQuiz\r\n                                    quizRef8.child(\"$idQuiz\").setValue(quiz).addOnSuccessListener {\r\n                                        if (quiz.stars != 0) playersQuiz.child(\"${quiz.id}/${tpovId}\")\r\n                                            .updateChildren(quizRatingMap)\r\n                                    }\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = quiz.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = quiz.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(quiz)\r\n                                    dao.deleteQuizById(oldId)\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n                    log(\"setQuizData() error: $error\")\r\n                }\r\n            })\r\n\r\n            var synth2 = true\r\n            log(\"setQuizData() dao.getQuizList(tpovId): ${dao.getQuizList(tpovId)}\")\r\n            while (synth2) {\r\n                synth2 = false\r\n                dao.getQuizList(tpovId).forEach {\r\n                    log(\"setQuizData() it: $it\")\r\n                    if (it.id!! < 100) synth2 = true\r\n                }\r\n            }\r\n            synthLiveData.postValue(++synth)\r\n            if (blockServer) {\r\n\r\n                log(\"setQuizData() blockServer = true\")\r\n                coroutineScope.launch {\r\n                    while (true) {\r\n                        var openServer = true\r\n                        quizDB.forEach {\r\n                            if (it.id!! < 100) openServer = false\r\n                        }\r\n                        log(\"setQuizData() сервер не завершился, ждем..\")\r\n                        if (openServer) break\r\n                        delay(100)\r\n                    }\r\n\r\n                    log(\"setQuizData() открываем доступ к серверу\")\r\n\r\n                    val databaseReference = FirebaseDatabase.getInstance().reference\r\n                    val updates = hashMapOf<String, Any>(\r\n                        \"players/read\" to true,\r\n                        \"players/idQuiz\" to idQuiz\r\n                    )\r\n                    databaseReference.updateChildren(updates).addOnFailureListener {\r\n                        log(\"setQuizData() ошибка : $it\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun setQuestionData() {\r\n        val tpovId = getTpovId()\r\n\r\n        log(\"fun setQuestionData()\")\r\n        var question = dao.getQuestionList()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val questionRef1 = database.getReference(\"question1\")\r\n        val questionRef2 = database.getReference(\"question2\")\r\n        val questionRef3 = database.getReference(\"question3\")\r\n        val questionRef4 = database.getReference(\"question4\")\r\n        val questionRef5 = database.getReference(\"question5\")\r\n        val questionRef6 = database.getReference(\"question6\")\r\n        val questionRef7 = database.getReference(\"question7\")\r\n        val questionRef8 = database.getReference(\"question8\")\r\n\r\n        var i = 0\r\n        question.forEach {\r\n            log(\r\n                \"setQuestionData() перебираем квесты size: ${question.size}, dao.getQuizTpovIdById(it.idQuiz): ${\r\n                    dao.getQuizTpovIdById(\r\n                        it.idQuiz\r\n                    )\r\n                }, = tpovid: $tpovId\"\r\n            )\r\n            synthLiveData.value = --synth\r\n            log(\"setQuestionData() найдет квест it: ${it}\")\r\n            val eventByIdQuiz = dao.getEventByIdQuiz(it.idQuiz)\r\n            if (eventByIdQuiz == 1) questionRef1.child(\"${tpovId}/${it.idQuiz}/${it.numQuestion}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener {\r\n                    synthLiveData.value = ++synth\r\n                }\r\n\r\n            if (eventByIdQuiz == 2) questionRef2.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (eventByIdQuiz == 3) questionRef3.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (eventByIdQuiz == 4) questionRef4.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (eventByIdQuiz == 5) questionRef5.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (eventByIdQuiz == 6) questionRef6.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (eventByIdQuiz == 7) questionRef7.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            if (eventByIdQuiz == 8) questionRef8.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n        }\r\n\r\n        synthLiveData.value = ++synth\r\n\r\n\r\n    }\r\n\r\n    override fun setTpovIdFB() {\r\n\r\n        log(\"fun setTpovIdFB()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val ref = database.getReference(\"players\")\r\n        val uid = FirebaseAuth.getInstance().uid\r\n        log(\"setTpovIdFB() tpovId = ${getTpovId()}\")\r\n\r\n        ref.child(\"listTpovId/$uid\").setValue(getTpovId().toString()).addOnSuccessListener {\r\n            log(\"setTpovIdFB() успех загрузки на сервер\")\r\n            synthLiveData.value = ++synth\r\n        }.addOnFailureListener {\r\n\r\n            log(\"setTpovIdFB() ошибка: $it\")\r\n        }\r\n    }\r\n\r\n    override fun getTpovIdFB() {\r\n        synth = 0\r\n        synthLiveData.value = 0\r\n        log(\"fun getTpovIdFB()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val uid = FirebaseAuth.getInstance().uid\r\n        val ref = database.getReference(\"players\")\r\n\r\n        ref.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getTpovIdFB() snapshot: $snapshot\")\r\n\r\n                val tpovId: String =\r\n                    snapshot.child(\"listTpovId/$uid\").getValue(String::class.java) ?: \"\"\r\n                log(\"getTpovIdFB() tpovId: $tpovId\")\r\n                val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n                setTpovId(tpovId.toInt())\r\n\r\n                log(\"getTpovIdFB()/ set tpovId: $tpovId\")\r\n                synthLiveData.value = ++synth\r\n\r\n                log(\"getTpovIdFB()/ set synth: ${synthLiveData.value}\")\r\n                log(\"getTpovIdFB()/ set synth: ${synth}\")\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getTpovIdFB() ошибка $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun setQuestionDetail() {\r\n        val tpovId = getTpovId()\r\n        log(\"fun setQuestionDetail()\")\r\n\r\n        var questionDetail = dao.getQuestionDetailList()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n\r\n        val questionDetailRefs = arrayOf(\r\n            database.getReference(\"question_detail1/${tpovId}\"),\r\n            database.getReference(\"question_detail2\"),\r\n            database.getReference(\"question_detail3\"),\r\n            database.getReference(\"question_detail4\"),\r\n            database.getReference(\"question_detail5\"),\r\n            database.getReference(\"question_detail6\"),\r\n            database.getReference(\"question_detail7\"),\r\n            database.getReference(\"question_detail8\")\r\n        )\r\n\r\n        questionDetail.forEach {\r\n            if (dao.getQuizTpovIdById(it.idQuiz) == tpovId && !it.synthFB) {\r\n                synthLiveData.value = --synth\r\n                log(\"setQuestionDetail() найден квест с таким же tpovId, idQuiz: ${it.idQuiz}\")\r\n                val event = dao.getEventByIdQuiz(it.idQuiz)\r\n                if (event in 1..8) {\r\n                    questionDetailRefs[event!! - 1].child(\"${it.idQuiz}\").push()\r\n                        .setValue(it).addOnSuccessListener { _ ->\r\n                            dao.updateQuizDetail(it.copy(synthFB = true))\r\n                            synthLiveData.value = ++synth\r\n                        }\r\n                }\r\n            }\r\n        }\r\n        synthLiveData.value = ++synth\r\n    }\r\n\r\n    override fun setProfile() {\r\n        log(\"fun setProfile()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val profileRef = database.getReference(\"Profiles\")\r\n        val profilesRef = database.getReference(\"players\")\r\n        var idUsers = 0\r\n        var oldIdUser = 0\r\n\r\n        val tpovId = getTpovId()\r\n        val profile = dao.getProfileByTpovId(tpovId)\r\n\r\n        log(\"setProfile() tpovId: $tpovId\")\r\n        if (tpovId == 0) {\r\n\r\n            profilesRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    log(\"setProfile() snapshot: ${snapshot.key}\")\r\n                    idUsers =\r\n                        ((snapshot.value as Map<*, *>)[\"idUser\"] as Long).toInt() // Получение значения переменной allQuiz\r\n                    oldIdUser = tpovId\r\n                    idUsers++\r\n\r\n                    profilesRef.updateChildren(\r\n                        hashMapOf<String, Any>(\r\n                            \"idUser\" to idUsers\r\n                        )\r\n                    )\r\n\r\n                    profileRef.child(idUsers.toString()).setValue(\r\n                        profile.copy(\r\n                            tpovId = idUsers,\r\n                            idFirebase = FirebaseAuth.getInstance().currentUser?.uid ?: \"\",\r\n                            dateSynch = TimeManager.getCurrentTime()\r\n                        ).toProfile()\r\n                    ).addOnSuccessListener {\r\n\r\n                        dao.updateProfiles(\r\n                            profile.copy(\r\n                                tpovId = idUsers,\r\n                                idFirebase = FirebaseAuth.getInstance().currentUser?.uid ?: \"\",\r\n                                dateSynch = TimeManager.getCurrentTime()\r\n                            )\r\n                        )\r\n\r\n                        dao.getQuizList(oldIdUser).forEach {\r\n                            dao.updateQuiz(it.copy(tpovId = idUsers))\r\n                        }\r\n\r\n                        setTpovId(idUsers)\r\n                        setTpovIdFB()\r\n\r\n                        log(\"setProfile() tpovId: $tpovId\")\r\n                    }.addOnFailureListener {\r\n                        log(\"setProfile() error1: $it\")\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n\r\n                    log(\"setProfile() error2: $error\")\r\n\r\n                }\r\n            })\r\n\r\n\r\n        } else {\r\n            log(\"setProfile() id != 0 просто сохраняем на сервер profile: $profile, tpovId: $tpovId\")\r\n            try {\r\n                log(\"setProfile() id != 0 просто сохраняем на сервер profile: $profile, tpovId: $tpovId\")\r\n                profileRef.child(tpovId.toString()).setValue(profile.toProfile())\r\n                    .addOnSuccessListener {\r\n                        synthLiveData.value = ++synth\r\n                    }.addOnFailureListener {\r\n                        log(\"$it\")\r\n                    }\r\n\r\n                log(\"setProfile() id != 0 просто сохраняем на сервер\")\r\n            } catch (e: java.lang.Exception) {\r\n                synthLiveData.value = ++synth\r\n                log(\"setProfile() id != 0 и в бд пусто, ничего не отправляем\")\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getUserName(): Profile {\r\n        val tpovId = getTpovId()\r\n        log(\"fun getUserName()\")\r\n        val profileRef = FirebaseDatabase.getInstance().getReference(\"Profiles\")\r\n        var profile = Profile()\r\n\r\n        profileRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getUserName() snapshot: ${snapshot.key}\")\r\n                profile = snapshot.child(\"$tpovId\").getValue(Profile::class.java)!!\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getUserName() ошибка \")\r\n            }\r\n\r\n        })\r\n        return profile\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    fun log(m: String) {\r\n        Logcat.log(m, \"RepositoryFB\", Logcat.LOG_FIREBASE)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt b/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt	(date 1685299243045)
@@ -111,7 +111,7 @@
         val questionRef7 = FirebaseDatabase.getInstance().getReference("question7")
         val questionRef8 = FirebaseDatabase.getInstance().getReference("question8")
 
-        questionRef3.limitToLast(1).addListenerForSingleValueEvent(object : ValueEventListener {
+        questionRef5.limitToLast(10).addListenerForSingleValueEvent(object : ValueEventListener {
             override fun onDataChange(snapshot: DataSnapshot) {
                 log("getQuestion snapshot: ${snapshot.key}")
                 for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid
@@ -132,7 +132,8 @@
                                             question.typeQuestion,
                                             idQuizSnap.key?.toInt() ?: -1,
                                             languageSnap.key ?: "eu",
-                                            question.lvlTranslate
+                                            question.lvlTranslate,
+                                            question.infoTranslater
                                         )
                                     )
                                 }
@@ -244,6 +245,7 @@
     ) {
         log("fun getQuiz()")
         quizRef.addListenerForSingleValueEvent(object : ValueEventListener {
+            @RequiresApi(Build.VERSION_CODES.O)
             override fun onDataChange(snapshot: DataSnapshot) {
                 for (data in snapshot.children) {
                     val versionQuiz =
@@ -252,63 +254,64 @@
 
                     log("getQuiz(), data: ${data.key}, versionQuiz: $versionQuiz, quizEntity: $quiz")
                     if (quiz != null && versionQuiz < quiz.versionQuiz) {
-                        savePictureToLocalDirectory(
-                            quiz.picture
-                        ) { path ->
-                            log("getQuiz() версия квеста меньше - обновляем, или добавляем")
-                            if (versionQuiz == -1) dao.insertQuiz(
-                                quiz.toQuizEntity(
-                                    data.key!!.toInt(),
-                                    0,
-                                    0,
-                                    0,
-                                    path ?: ""
-                                )
-                            )
-                            else dao.updateQuiz(
-                                quiz.toQuizEntity(
-                                    data.key!!.toInt(),
-                                    0,
-                                    0,
-                                    0,
-                                    path
-                                )
-                            )
-                            val refQuestion = when (quiz.event) {
-                                2 -> FirebaseDatabase.getInstance().getReference("question2")
-                                3 -> FirebaseDatabase.getInstance().getReference("question3")
-                                4 -> FirebaseDatabase.getInstance().getReference("question4")
-                                5 -> FirebaseDatabase.getInstance().getReference("question5")
-                                6 -> FirebaseDatabase.getInstance().getReference("question6")
-                                7 -> FirebaseDatabase.getInstance().getReference("question7")
-                                8 -> FirebaseDatabase.getInstance().getReference("question8")
-                                else -> FirebaseDatabase.getInstance()
-                                    .getReference("question1/${quiz.tpovId}")
-                            }
+                        if (quiz.event != 5 || TimeManager.getDaysBetweenDates(quiz.data, TimeManager.getCurrentTime())!! < 90) {
+                            savePictureToLocalDirectory(
+                                quiz.picture
+                            ) { path ->
+                                log("getQuiz() версия квеста меньше - обновляем, или добавляем")
+                                if (versionQuiz == -1) dao.insertQuiz(
+                                    quiz.toQuizEntity(
+                                        data.key!!.toInt(),
+                                        0,
+                                        0,
+                                        0,
+                                        path ?: ""
+                                    )
+                                )
+                                else dao.updateQuiz(
+                                    quiz.toQuizEntity(
+                                        data.key!!.toInt(),
+                                        0,
+                                        0,
+                                        0,
+                                        path
+                                    )
+                                )
+                                val refQuestion = when (quiz.event) {
+                                    2 -> FirebaseDatabase.getInstance().getReference("question2")
+                                    3 -> FirebaseDatabase.getInstance().getReference("question3")
+                                    4 -> FirebaseDatabase.getInstance().getReference("question4")
+                                    5 -> FirebaseDatabase.getInstance().getReference("question5")
+                                    6 -> FirebaseDatabase.getInstance().getReference("question6")
+                                    7 -> FirebaseDatabase.getInstance().getReference("question7")
+                                    8 -> FirebaseDatabase.getInstance().getReference("question8")
+                                    else -> FirebaseDatabase.getInstance()
+                                        .getReference("question1/${quiz.tpovId}")
+                                }
 
-                            val refQuestionDetail = when (quiz.event) {
-                                1 -> FirebaseDatabase.getInstance()
-                                    .getReference("question_detail1/${getTpovId()}")
+                                val refQuestionDetail = when (quiz.event) {
+                                    1 -> FirebaseDatabase.getInstance()
+                                        .getReference("question_detail1/${getTpovId()}")
 
-                                2 -> FirebaseDatabase.getInstance().getReference("")
-                                3 -> FirebaseDatabase.getInstance().getReference("")
-                                4 -> FirebaseDatabase.getInstance().getReference("")
-                                5 -> FirebaseDatabase.getInstance().getReference("")
-                                6 -> FirebaseDatabase.getInstance().getReference("")
-                                7 -> FirebaseDatabase.getInstance().getReference("")
-                                8 -> FirebaseDatabase.getInstance().getReference("")
-                                else -> FirebaseDatabase.getInstance()
-                                    .getReference("")
-                            }
-                            getQuestion(refQuestion, data.key!!)
-                            getQuestionDetail(refQuestionDetail, data.key!!)
+                                    2 -> FirebaseDatabase.getInstance().getReference("")
+                                    3 -> FirebaseDatabase.getInstance().getReference("")
+                                    4 -> FirebaseDatabase.getInstance().getReference("")
+                                    5 -> FirebaseDatabase.getInstance().getReference("")
+                                    6 -> FirebaseDatabase.getInstance().getReference("")
+                                    7 -> FirebaseDatabase.getInstance().getReference("")
+                                    8 -> FirebaseDatabase.getInstance().getReference("")
+                                    else -> FirebaseDatabase.getInstance()
+                                        .getReference("")
+                                }
+                                getQuestion(refQuestion, data.key!!)
+                                getQuestionDetail(refQuestionDetail, data.key!!)
 
-                            SharedPreferencesManager.setVersionQuiz(
-                                data.key!!,
-                                quiz.versionQuiz
-                            )
+                                SharedPreferencesManager.setVersionQuiz(
+                                    data.key!!,
+                                    quiz.versionQuiz
+                                )
+                            }
                         }
-
                     }
                 }
             }
@@ -375,10 +378,11 @@
                                             idQuestionSnap.key?.toInt() ?: 0,
                                             question.nameQuestion,
                                             question.answerQuestion,
-                                            question.typeQuestion,
+                                            idQuestionSnap.key?.toInt()!! < 0,
                                             idQuizSnap.key?.toInt() ?: -1,
                                             languageSnap.key ?: "eu",
-                                            question.lvlTranslate
+                                            question.lvlTranslate,
+                                            question.infoTranslater
                                         )
                                     )
                                 }
@@ -582,7 +586,7 @@
                             quizRef2.child("${quiz.id}").removeValue()
                         }
                     dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->
-                        questionRef3.child("${question.idQuiz}/${question.id}/${question.language}")
+                        questionRef3.child("${question.idQuiz}/${if (question.hardQuestion) -question.numQuestion else question.numQuestion}/${question.language}")
                             .setValue(question).addOnSuccessListener {
                                 questionRef2.child("${question.idQuiz}").removeValue()
                             }
@@ -602,7 +606,7 @@
                             quizRef3.child("${quiz.id}").removeValue()
                         }
                     dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->
-                        questionRef4.child("${question.idQuiz}/${question.id}/${question.language}")
+                        questionRef4.child("${question.idQuiz}/${if (question.hardQuestion) -question.numQuestion else question.numQuestion}/${question.language}")
                             .setValue(question).addOnSuccessListener {
                                 questionRef3.child("${question.idQuiz}").removeValue()
                             }
@@ -621,19 +625,21 @@
                             quizRef4.child("${quiz.id}").removeValue()
                         }
                     dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->
-                        questionRef5.child("${question.idQuiz}/${question.id}/${question.language}")
+                        questionRef5.child("${question.idQuiz}/${if (question.hardQuestion) -question.numQuestion else question.numQuestion}/${question.language}")
                             .setValue(question)
                             .addOnSuccessListener {
                                 questionRef4.child("${question.idQuiz}").removeValue()
                             }
                     }
+                    log("quiz.data: ${quiz.data}, TimeManager.getCurrentTime(): ${TimeManager.getCurrentTime()}")
                     if (TimeManager.getDaysBetweenDates(quiz.data, TimeManager.getCurrentTime())!! > 90) {
-                        dao.deleteQuizById(quiz.id!!)
-                        dao.deleteQuestionDetailByIdQuiz(quiz.id!!)
-                        dao.deleteQuestionByIdQuiz(quiz.id!!)
+                       dao.deleteQuizById(quiz.id!!)
+                       dao.deleteQuestionDetailByIdQuiz(quiz.id!!)
+                       dao.deleteQuestionByIdQuiz(quiz.id!!)
                     }
                 }
 
+
                 6 -> {
                     log("fun setEvent event: ${quiz.event}")
                     quizRef6.child(quiz.id.toString())
@@ -641,7 +647,7 @@
                             quizRef5.child("${quiz.id}").removeValue()
                         }
                     dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->
-                        questionRef6.child("${question.idQuiz}/${question.id}/${question.language}")
+                        questionRef6.child("${question.idQuiz}/${if (question.hardQuestion) -question.numQuestion else question.numQuestion}/${question.language}")
                             .setValue(question)
                             .addOnSuccessListener {
                                 questionRef5.child("${question.idQuiz}").removeValue()
@@ -661,7 +667,7 @@
                             quizRef6.child("${quiz.id}").removeValue()
                         }
                     dao.getQuestionByIdQuiz(quiz.id!!).forEach { question ->
-                        questionRef7.child("${question.idQuiz}/${question.id}/${question.language}")
+                        questionRef7.child("${question.idQuiz}/${if (question.hardQuestion) -question.numQuestion else question.numQuestion}/${question.language}")
                             .setValue(question)
                             .addOnSuccessListener {
                                 questionRef6.child("${question.idQuiz}").removeValue()
Index: app/src/main/java/com/tpov/schoolquiz/domain/repository/RepositoryDB.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.domain.repository\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport com.tpov.schoolquiz.data.database.entities.ApiQuestion\r\nimport com.tpov.schoolquiz.data.database.entities.PlayersEntity\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionDetailEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\n// TODO: 25.07.2022 LiveData -> Flow\r\ninterface RepositoryDB {\r\n    suspend fun insertQuizDetail(questionDetailEntity: QuestionDetailEntity)\r\n\r\n    suspend fun insertProfile(profile: ProfileEntity)\r\n\r\n    suspend fun insertQuiz(quizEntity: QuizEntity)\r\n\r\n    suspend fun insertQuestion(questionEntity: QuestionEntity)\r\n\r\n    suspend fun insertListApiQuestion(apiQuestion: List<ApiQuestion>)\r\n\r\n\r\n    suspend fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity>\r\n\r\n    suspend fun getQuestionDetailList(): List<QuestionDetailEntity>\r\n\r\n    fun getProfileFlow(tpovId: Int): Flow<ProfileEntity>\r\n\r\n    suspend fun getTpovIdByEmail(email: String): Int\r\n\r\n    suspend fun getProfile(tpovId: Int): ProfileEntity\r\n\r\n    suspend fun getAllProfiles(): List<ProfileEntity>\r\n\r\n    suspend fun getQuizList(tpovId: Int): List<QuizEntity>\r\n\r\n    suspend fun getQuizById(id: Int): QuizEntity\r\n\r\n    suspend fun getQuizEvent(): List<QuizEntity>\r\n\r\n    suspend fun getTranslateEvent(): List<QuestionEntity>\r\n\r\n    fun getQuizLiveData(tpovId: Int): LiveData<List<QuizEntity>>\r\n\r\n    fun getEventLiveData(): LiveData<List<QuizEntity>>\r\n    suspend fun getQuestionList(): List<QuestionEntity>\r\n\r\n    suspend fun getQuestionListByIdQuiz(id: Int): List<QuestionEntity>\r\n\r\n    suspend fun getListApiQuestionBySystemDate(systemDate: String): List<ApiQuestion>\r\n\r\n    suspend fun getApiQuestionList(): List<ApiQuestion>\r\n\r\n    suspend fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int\r\n\r\n    suspend fun getNameQuizByIdQuiz(id: Int): String\r\n\r\n    suspend fun getPlayersDB(): List<PlayersEntity>\r\n\r\n    suspend fun getPlayersDB(tpovId: Int): PlayersEntity\r\n\r\n\r\n    fun deleteQuestionById(id: Int)\r\n\r\n    fun deleteChat(time: String)\r\n\r\n    fun deleteQuizById(id: Int)\r\n\r\n    fun deleteQuestionDetailById(id: Int)\r\n\r\n\r\n    fun updateQuestionDetail(questionDetailEntity: QuestionDetailEntity)\r\n\r\n    fun updateQuiz(quizEntity: QuizEntity)\r\n\r\n    fun updateApiQuestion(apiQuestion: ApiQuestion)\r\n\r\n    fun updateProfile(profile: ProfileEntity)\r\n\r\n    fun updateQuestion(questionEntity: QuestionEntity)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/domain/repository/RepositoryDB.kt b/app/src/main/java/com/tpov/schoolquiz/domain/repository/RepositoryDB.kt
--- a/app/src/main/java/com/tpov/schoolquiz/domain/repository/RepositoryDB.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/domain/repository/RepositoryDB.kt	(date 1685299243538)
@@ -1,65 +1,54 @@
 package com.tpov.schoolquiz.domain.repository
 
 import androidx.lifecycle.LiveData
-import com.tpov.schoolquiz.data.database.entities.ApiQuestion
-import com.tpov.schoolquiz.data.database.entities.PlayersEntity
-import com.tpov.schoolquiz.data.database.entities.ProfileEntity
-import com.tpov.schoolquiz.data.database.entities.QuestionDetailEntity
-import com.tpov.schoolquiz.data.database.entities.QuestionEntity
-import com.tpov.schoolquiz.data.database.entities.QuizEntity
+import com.tpov.schoolquiz.data.database.entities.*
 import kotlinx.coroutines.flow.Flow
 
 // TODO: 25.07.2022 LiveData -> Flow
 interface RepositoryDB {
-    suspend fun insertQuizDetail(questionDetailEntity: QuestionDetailEntity)
+    fun insertQuizDetail(questionDetailEntity: QuestionDetailEntity)
 
-    suspend fun insertProfile(profile: ProfileEntity)
+    fun insertProfile(profile: ProfileEntity)
 
-    suspend fun insertQuiz(quizEntity: QuizEntity)
+    fun insertQuiz(quizEntity: QuizEntity)
 
-    suspend fun insertQuestion(questionEntity: QuestionEntity)
+    fun insertQuestion(questionEntity: QuestionEntity)
 
-    suspend fun insertListApiQuestion(apiQuestion: List<ApiQuestion>)
 
+    fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity>
 
-    suspend fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity>
-
-    suspend fun getQuestionDetailList(): List<QuestionDetailEntity>
+    fun getQuestionDetailList(): List<QuestionDetailEntity>
 
     fun getProfileFlow(tpovId: Int): Flow<ProfileEntity>
 
-    suspend fun getTpovIdByEmail(email: String): Int
+    fun getTpovIdByEmail(email: String): Int
 
-    suspend fun getProfile(tpovId: Int): ProfileEntity
+    fun getProfile(tpovId: Int): ProfileEntity
 
-    suspend fun getAllProfiles(): List<ProfileEntity>
+    fun getAllProfiles(): List<ProfileEntity>
 
-    suspend fun getQuizList(tpovId: Int): List<QuizEntity>
+    fun getQuizList(tpovId: Int): List<QuizEntity>
 
-    suspend fun getQuizById(id: Int): QuizEntity
+    fun getQuizById(id: Int): QuizEntity
 
-    suspend fun getQuizEvent(): List<QuizEntity>
+    fun getQuizEvent(): List<QuizEntity>
 
-    suspend fun getTranslateEvent(): List<QuestionEntity>
+    fun getTranslateEvent(): List<QuestionEntity>
 
     fun getQuizLiveData(tpovId: Int): LiveData<List<QuizEntity>>
 
     fun getEventLiveData(): LiveData<List<QuizEntity>>
-    suspend fun getQuestionList(): List<QuestionEntity>
-
-    suspend fun getQuestionListByIdQuiz(id: Int): List<QuestionEntity>
+    fun getQuestionList(): List<QuestionEntity>
 
-    suspend fun getListApiQuestionBySystemDate(systemDate: String): List<ApiQuestion>
+    fun getQuestionListByIdQuiz(id: Int): List<QuestionEntity>
 
-    suspend fun getApiQuestionList(): List<ApiQuestion>
+    fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int
 
-    suspend fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int
+    fun getNameQuizByIdQuiz(id: Int): String
 
-    suspend fun getNameQuizByIdQuiz(id: Int): String
+    fun getPlayersDB(): List<PlayersEntity>
 
-    suspend fun getPlayersDB(): List<PlayersEntity>
-
-    suspend fun getPlayersDB(tpovId: Int): PlayersEntity
+    fun getPlayersDB(tpovId: Int): PlayersEntity
 
 
     fun deleteQuestionById(id: Int)
@@ -75,8 +64,6 @@
 
     fun updateQuiz(quizEntity: QuizEntity)
 
-    fun updateApiQuestion(apiQuestion: ApiQuestion)
-
     fun updateProfile(profile: ProfileEntity)
 
     fun updateQuestion(questionEntity: QuestionEntity)
Index: app/src/main/java/com/tpov/schoolquiz/data/fierbase/Question.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data.fierbase\r\n\r\nimport com.google.firebase.database.IgnoreExtraProperties\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\n\r\n@IgnoreExtraProperties\r\ndata class Question (\r\n    val nameQuestion: String,\r\n    val answerQuestion: Boolean,\r\n    val typeQuestion: Boolean,\r\n    val lvlTranslate: Int\r\n) {\r\n    constructor() : this(\r\n        \"\", false, false, 0\r\n    )\r\n}\r\n\r\nfun QuestionEntity.toQuestion(): Question {\r\n    return Question(\r\n        nameQuestion = this.nameQuestion,\r\n        answerQuestion = this.answerQuestion,\r\n        typeQuestion = this.hardQuestion,\r\n        lvlTranslate = this.lvlTranslate\r\n    )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Question.kt b/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Question.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Question.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Question.kt	(date 1685299243551)
@@ -8,10 +8,11 @@
     val nameQuestion: String,
     val answerQuestion: Boolean,
     val typeQuestion: Boolean,
-    val lvlTranslate: Int
+    val lvlTranslate: Int,
+    val infoTranslater: String
 ) {
     constructor() : this(
-        "", false, false, 0
+        "", false, false, 0, ""
     )
 }
 
@@ -20,6 +21,7 @@
         nameQuestion = this.nameQuestion,
         answerQuestion = this.answerQuestion,
         typeQuestion = this.hardQuestion,
-        lvlTranslate = this.lvlTranslate
+        lvlTranslate = this.lvlTranslate,
+        infoTranslater = this.infoTranslater
     )
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AndroidLayouts\">\r\n    <shared>\r\n      <config>\r\n        <device id=\"_device_class_phone\" />\r\n        <device id=\"_device_class_foldable\" />\r\n        <device id=\"_device_class_desktop\" />\r\n        <locale>uk</locale>\r\n        <target>android-33-ext4</target>\r\n      </config>\r\n    </shared>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5af0db75-4be5-4ef3-8f7e-967bab06300d\" name=\"Changes\" comment=\"Hotfix crash ended quiz in 0 percent&#10;Fix new Id create quiz&#10;Fix null life&#10;Edit FB to suspend&#10;Edit input translate question List -&gt; item\">\r\n      <changelist_data name=\"Oleg\" email=\"oleg12794@gmail.com\" date=\"1685010001000\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/file-system.probe\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/file-system.probe\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Changes.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Changes.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_2023_13_32__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_2023_13_32__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_2023_13_32__Changes_1.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_2023_13_32__Changes_1.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_08_05_2023_9_35__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_08_05_2023_9_35__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_24_04_2023_14_42__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_24_04_2023_14_42__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_27_04_2023_10_24__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_27_04_2023_10_24__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28_04_2023_16_13__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28_04_2023_16_13__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/local.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/local.properties\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[17e6bcfc]\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand />\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Kotlin Object\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"valueResourceFile\" />\r\n        <option value=\"layoutResourceFile\" />\r\n        <option value=\"Kotlin Class\" />\r\n        <option value=\"resourceFile\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"GenerateSignedApkSettings\">\r\n    <option name=\"BUILD_TARGET_KEY\" value=\"apk\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"9a8526523bcec1777508c6ef5973992dba56f221\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"GithubProjectSettings\">\r\n    <option name=\"branchProtectionPatterns\">\r\n      <list>\r\n        <option value=\"master\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MdM8qyqboV1nJrQXz70kLiA3XM\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"project.structure.last.edited\" value=\"SDK Location\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.17\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n  </component>\r\n  <component name=\"PsdUISettings\">\r\n    <option name=\"MODULE_TAB\" value=\"Properties\" />\r\n    <option name=\"LAST_EDITED_BUILD_TYPE\" value=\"release\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\java\\com\\tpov\\schoolquiz\\domain\" />\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\res\\drawable-hdpi\" />\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\res\\drawable-xxhdpi\" />\r\n      <recent name=\"F:\\Developer\\Programmer\\Android\\SchoolQuiz\\app\\src\\main\\res\\drawable\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\Программирование\\Android\\schoolquiz3.0\\app\\src\\main\\res\\drawable-mdpi\" />\r\n      <recent name=\"E:\\Программирование\\Android\\schoolquiz3.0\\app\\src\\main\\res\\drawable\" />\r\n      <recent name=\"E:\\Программирование\\Android\\schoolquiz3.0\\app\\src\\main\\res\\mipmap-hdpi\" />\r\n      <recent name=\"E:\\SchoolQuiz\\app\\src\\main\\res\\menu\" />\r\n      <recent name=\"E:\\Программирование\\Android\\schoolquiz3.0\\app\\src\\main\\res\\anim\" />\r\n    </key>\r\n    <key name=\"MoveKotlinTopLevelDeclarationsDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.event\" />\r\n    </key>\r\n    <key name=\"CopyKotlinDeclarationDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tpov.schoolquiz.domain\" />\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.arena\" />\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.event\" />\r\n      <recent name=\"com.tpov.schoolquiz.data.fierbase\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" activateToolWindowBeforeRun=\"false\">\r\n      <module name=\"schoolquiz.app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"INSPECTION_WITHOUT_ACTIVITY_RESTART\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Hybrid>\r\n      <Java />\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n        <option name=\"PROFILING_MODE\" value=\"NOT_SET\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5af0db75-4be5-4ef3-8f7e-967bab06300d\" name=\"Changes\" comment=\"\" />\r\n      <created>1678092861294</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678092861294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"build\">\r\n      <created>1680408918363</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680408918363</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"fix build\">\r\n      <created>1680435462178</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680435462178</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"fix event adapter\">\r\n      <created>1680449661463</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680449661463</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"create logcat custom\">\r\n      <created>1680493508899</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680493508899</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Refactoring repository FB&#10;fix synth data\">\r\n      <created>1680706876046</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680706876046</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"fix load quiz\">\r\n      <created>1680773588658</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680773588658</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"fix questionActivity\">\r\n      <created>1680779736038</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680779736038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Fix get question detail\">\r\n      <created>1680928726440</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680928726440</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Fix get question detail\">\r\n      <created>1680977705498</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680977705498</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"add 2event -&gt; 3event\">\r\n      <created>1681047372984</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681047372984</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"fix create question (number = 0)&#10;fix synth server\">\r\n      <created>1681051869138</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681051869138</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"create chat\">\r\n      <created>1681137571296</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681137571296</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"edit sort chat\">\r\n      <created>1681185211864</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681185211864</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"fix setEvent quiz\">\r\n      <created>1681186958854</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681186958854</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"edit autoswipe chat\">\r\n      <created>1681207294559</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681207294559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Edit registration fragment (delete to 2 path)\">\r\n      <created>1681221696668</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681221696668</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"create main list quiz and home list quiz\">\r\n      <created>1681376434409</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681376434409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"edit merge front fragment - arena fragment\">\r\n      <created>1681471483540</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681471483540</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Create setting and info\">\r\n      <created>1681725319556</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681725319556</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"fix main images\">\r\n      <created>1681982264179</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681982264179</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"fix main images\">\r\n      <created>1681982665577</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681982665577</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"fix main images (center gravity)\">\r\n      <created>1681984258945</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681984258945</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"fix main images (center gravity)\">\r\n      <created>1681984507809</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681984507809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\">\r\n      <created>1681988419524</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681988419524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\">\r\n      <created>1681996293308</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681996293308</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"fix timer\">\r\n      <created>1682359780573</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682359780573</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"fix timer\">\r\n      <created>1682620234799</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682620234799</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Create create question dialog\">\r\n      <created>1682950533561</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682950533561</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"add create question\">\r\n      <created>1683196789093</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683196789093</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Delete swipe item question&#10;Add swipe menu\">\r\n      <created>1683267960195</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683267960195</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Fix create acc\">\r\n      <created>1683954831933</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683954831933</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"Fix create question not acc\">\r\n      <created>1683959805715</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683959805715</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"Fix synth life with FB&#10;Fix adds nolics in MainActivity\">\r\n      <created>1684505932256</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684505932256</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"34\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:io.reactivex.rxjava2:rxjava\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:com.google.protobuf:protobuf-java\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:io.grpc:grpc-api\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"фвв 2event -&gt; 3event\" />\r\n    <MESSAGE value=\"add 2event -&gt; 3event\" />\r\n    <MESSAGE value=\"fix create question (number = 0)&#10;fix synth server\" />\r\n    <MESSAGE value=\"create chat\" />\r\n    <MESSAGE value=\"edit sort chat\" />\r\n    <MESSAGE value=\"fix setEvent quiz\" />\r\n    <MESSAGE value=\"edit autoswipe chat\" />\r\n    <MESSAGE value=\"Edit registration fragment (delete to 2 path)\" />\r\n    <MESSAGE value=\"create main list quiz and home list quiz\" />\r\n    <MESSAGE value=\"edit merge front fragment - arena fragment\" />\r\n    <MESSAGE value=\"Create setting and info\" />\r\n    <MESSAGE value=\"fix main images\" />\r\n    <MESSAGE value=\"fix main images (center gravity)\" />\r\n    <MESSAGE value=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\" />\r\n    <MESSAGE value=\"Edit MainItem (translate, checkbox)\" />\r\n    <MESSAGE value=\"Add animation mainActivity\" />\r\n    <MESSAGE value=\"fix timer\" />\r\n    <MESSAGE value=\"Create create question dialog\" />\r\n    <MESSAGE value=\"add create question\" />\r\n    <MESSAGE value=\"Delete swipe item question\" />\r\n    <MESSAGE value=\"Delete swipe item question&#10;Add swipe menu\" />\r\n    <MESSAGE value=\"Edit edit quiz (show item menu)\" />\r\n    <MESSAGE value=\"Fix create acc\" />\r\n    <MESSAGE value=\"Fix create question not acc\" />\r\n    <MESSAGE value=\"Hotfix crash ended quiz in 0 percent&#10;Fix new Id create quiz\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Hotfix crash ended quiz in 0 percent&#10;Fix new Id create quiz\" />\r\n    <option name=\"OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/.idea/workspace.xml	(date 1685299243557)
@@ -15,8 +15,7 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5af0db75-4be5-4ef3-8f7e-967bab06300d" name="Changes" comment="Hotfix crash ended quiz in 0 percent&#10;Fix new Id create quiz&#10;Fix null life&#10;Edit FB to suspend&#10;Edit input translate question List -&gt; item">
-      <changelist_data name="Oleg" email="oleg12794@gmail.com" date="1685010001000" />
+    <list default="true" id="5af0db75-4be5-4ef3-8f7e-967bab06300d" name="Changes" comment="Edit setQuiz5, sort quiz5&#10;Delete question day&#10;Fix time format&#10;Edit translate &#10;Add detect language">
       <change beforePath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin" afterDir="false" />
@@ -25,17 +24,53 @@
       <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/file-system.probe" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Changes.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Changes.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_2023_13_32__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_2023_13_32__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_2023_13_32__Changes_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_25_05_2023_13_32__Changes_1.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_08_05_2023_9_35__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_08_05_2023_9_35__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_24_04_2023_14_42__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_24_04_2023_14_42__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_27_04_2023_10_24__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_27_04_2023_10_24__Changes_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28_04_2023_16_13__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_28_04_2023_16_13__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryDBImpl.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryDBImpl.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/api/ApiFactory.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceLang.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/api/ApiServiceQuestion.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/Category.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceLang.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/api/pojo/ResponceQuestion.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/billing/BillingManager.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDatabase.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDatabase.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/entities/ApiQuestion.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/entities/QuestionEntity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/entities/QuestionEntity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Question.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/fierbase/Question.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/workers/ChildWorkerFactory.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/workers/MyReciver.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/workers/RefreshDataWorker.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/workers/WorkerFactory.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/di/ApplicationComponent.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/di/ApplicationComponent.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/di/ViewModelModule.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/di/ViewModelModule.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/domain/GetListApiQuestionBySystemDateUseCase.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/domain/GetQuestionDayUseCase.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/domain/InsertApiQuestionListUseCase.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/domain/UpdateQuestionDayUseCase.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/domain/repository/RepositoryDB.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/domain/repository/RepositoryDB.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialogTerminal.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialogTerminal.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/ResultDialog.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/ResultDialog.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/FragmentMain.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/local.properties" beforeDir="false" afterPath="$PROJECT_DIR$/local.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityAdapter.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityAdapter.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/main/MainActivityViewModel.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventAdapter.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventAdapter.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventFragment.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslationQuestionAdapter.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslationQuestionAdapter.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/ExtentionSplashScreen.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreen.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreen.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/splashscreen/SplashScreenViewModel.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/drawable/ic_translate.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_translate.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/activity_main_item.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/activity_main_item.xml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -77,6 +112,11 @@
     <option name="BUILD_TARGET_KEY" value="apk" />
   </component>
   <component name="Git.Settings">
+    <option name="PREVIOUS_COMMIT_AUTHORS">
+      <list>
+        <option value="Oleg &lt;oleg12794@gmail.com&gt;" />
+      </list>
+    </option>
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
         <entry key="$PROJECT_DIR$" value="9a8526523bcec1777508c6ef5973992dba56f221" />
@@ -113,6 +153,11 @@
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">
+    <property name="PROJECT_TRUSTED_KEY" value="true" />
+    <property name="RunOnceActivity.cidr.known.project.marker" value="true" />
+    <property name="android-custom-viewC:/Users/oleg1/AppData/Local/Android/Sdk/sources/android-33/android/widget/LinearLayout.java_SELECTED" value="LinearLayout" />
+    <property name="android-custom-viewC:/Users/oleg1/AppData/Local/Android/Sdk/sources/android-33/android/widget/TextView.java_SELECTED" value="TextView" />
+    <property name="cidr.known.project.marker" value="true" />
     <property name="project.structure.last.edited" value="SDK Location" />
     <property name="project.structure.proportion" value="0.17" />
     <property name="project.structure.side.proportion" value="0.0" />
@@ -446,7 +491,14 @@
       <option name="project" value="LOCAL" />
       <updated>1684505932256</updated>
     </task>
-    <option name="localTasksCounter" value="34" />
+    <task id="LOCAL-00034" summary="Edit setQuiz5, sort quiz5">
+      <created>1685125505095</created>
+      <option name="number" value="00034" />
+      <option name="presentableId" value="LOCAL-00034" />
+      <option name="project" value="LOCAL" />
+      <updated>1685125505096</updated>
+    </task>
+    <option name="localTasksCounter" value="35" />
     <servers />
   </component>
   <component name="UnknownFeatures">
@@ -466,9 +518,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="фвв 2event -&gt; 3event" />
-    <MESSAGE value="add 2event -&gt; 3event" />
-    <MESSAGE value="fix create question (number = 0)&#10;fix synth server" />
     <MESSAGE value="create chat" />
     <MESSAGE value="edit sort chat" />
     <MESSAGE value="fix setEvent quiz" />
@@ -491,7 +540,10 @@
     <MESSAGE value="Fix create acc" />
     <MESSAGE value="Fix create question not acc" />
     <MESSAGE value="Hotfix crash ended quiz in 0 percent&#10;Fix new Id create quiz" />
-    <option name="LAST_COMMIT_MESSAGE" value="Hotfix crash ended quiz in 0 percent&#10;Fix new Id create quiz" />
+    <MESSAGE value="Edit setQuiz5, sort quiz5" />
+    <MESSAGE value="Edit setQuiz5, sort quiz5&#10;Delete question day&#10;Fix time format&#10;Edit translate" />
+    <MESSAGE value="Edit setQuiz5, sort quiz5&#10;Delete question day&#10;Fix time format&#10;Edit translate &#10;Add detect language" />
+    <option name="LAST_COMMIT_MESSAGE" value="Edit setQuiz5, sort quiz5&#10;Delete question day&#10;Fix time format&#10;Edit translate &#10;Add detect language" />
     <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/dialog/ResultDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.dialog\r\n\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.widget.Button\r\nimport android.widget.ProgressBar\r\nimport android.widget.RatingBar\r\nimport android.widget.TextView\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\nimport com.tpov.schoolquiz.presentation.custom.CalcValues\r\nimport com.tpov.schoolquiz.presentation.custom.CustomProgressBar\r\n\r\n\r\nclass ResultDialog(\r\n    private var hardQuestion: Boolean,\r\n    private var event: Int,\r\n    private var showStars: Int,\r\n    private val stars: Int,\r\n    private val starsPercentAll: Int,\r\n    private val starsPlayersAll: Int,\r\n    private val firstQuestionDetail: Boolean,\r\n    private val onDismissListener: ((Int) -> Unit)? = null, // определение переменной с значением по умолчанию\r\n    private val onRatingSelected: ((Int) -> Unit)? = null,\r\n    context: Context,\r\n    private val profile: ProfileEntity\r\n) : Dialog(context) {\r\n\r\n    private var rating = 0\r\n\r\n    init {\r\n        setCanceledOnTouchOutside(false)\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.result_dialog)\r\n\r\n        val customBar = findViewById<CustomProgressBar>(R.id.customProgressBar)\r\n        val tvResult = findViewById<TextView>(R.id.tv_result)\r\n        val progressBar = findViewById<ProgressBar>(R.id.pb_result)\r\n        val tvEvaluation = findViewById<TextView>(R.id.tv_evaluation)\r\n        val rbEvaluation = findViewById<RatingBar>(R.id.rb_evaluation)\r\n        val bOk = findViewById<Button>(R.id.b_ok)\r\n        val bHelpTranslate = findViewById<Button>(R.id.b_help_translate)\r\n        val tvNolic = findViewById<TextView>(R.id.tv_nolics)\r\n\r\n        tvResult.text = \"${starsPercentAll}%\"\r\n        // Запускаем анимацию заполнения прогресс-бара\r\n        customBar.progress = starsPercentAll / 100.toFloat()\r\n        customBar.leftMarkerPosition = starsPercentAll / 100.toFloat()\r\n        customBar.rightMarkerPosition = starsPlayersAll / 100.toFloat()\r\n        val coins = CalcValues.getValueNolicForGame(hardQuestion, stars, event, firstQuestionDetail, profile)\r\n        tvNolic.text = coins.toString()\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n            customBar.setProgressWithAnimation(\r\n                stars / 100.toFloat(), 2000,\r\n                tvResult,\r\n                progressBar,\r\n                tvEvaluation,\r\n                rbEvaluation,\r\n                bOk,\r\n                bHelpTranslate,\r\n                showStars == 0,\r\n                event\r\n            )\r\n        }, 1000)\r\n\r\n        bOk.setOnClickListener {\r\n            if (showStars == 0) onDismissListener?.invoke(rbEvaluation.progress)\r\n            else onDismissListener?.invoke(showStars)\r\n\r\n            dismiss()\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/ResultDialog.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/ResultDialog.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/ResultDialog.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/ResultDialog.kt	(date 1685299243561)
@@ -13,6 +13,8 @@
 import com.tpov.schoolquiz.data.database.entities.ProfileEntity
 import com.tpov.schoolquiz.presentation.custom.CalcValues
 import com.tpov.schoolquiz.presentation.custom.CustomProgressBar
+import com.tpov.schoolquiz.presentation.question.QuestionActivity
+import kotlinx.coroutines.InternalCoroutinesApi
 
 
 class ResultDialog(
@@ -23,7 +25,7 @@
     private val starsPercentAll: Int,
     private val starsPlayersAll: Int,
     private val firstQuestionDetail: Boolean,
-    private val onDismissListener: ((Int) -> Unit)? = null, // определение переменной с значением по умолчанию
+    private val onDismissListener: ((Int, Int) -> Unit)? = null, // определение переменной с значением по умолчанию
     private val onRatingSelected: ((Int) -> Unit)? = null,
     context: Context,
     private val profile: ProfileEntity
@@ -35,6 +37,7 @@
         setCanceledOnTouchOutside(false)
     }
 
+    @OptIn(InternalCoroutinesApi::class)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.result_dialog)
@@ -70,11 +73,15 @@
         }, 1000)
 
         bOk.setOnClickListener {
-            if (showStars == 0) onDismissListener?.invoke(rbEvaluation.progress)
-            else onDismissListener?.invoke(showStars)
+            if (showStars == 0) onDismissListener?.invoke(rbEvaluation.progress, QuestionActivity.RESULT_OK)
+            else onDismissListener?.invoke(showStars, QuestionActivity.RESULT_OK)
 
             dismiss()
         }
+        bHelpTranslate.setOnClickListener {
+            if (showStars == 0) onDismissListener?.invoke(rbEvaluation.progress, QuestionActivity.RESULT_TRANSLATE)
+            else onDismissListener?.invoke(showStars, QuestionActivity.RESULT_TRANSLATE)
+        }
 
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.dowload\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.tpov.schoolquiz.data.database.QuizDatabase\r\nimport com.tpov.schoolquiz.databinding.DownloadFragmentBinding\r\nimport com.tpov.schoolquiz.presentation.fragment.BaseFragment\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.launch\r\nimport java.io.File\r\n\r\nclass DownloadFragment : BaseFragment() {\r\n\r\n    private lateinit var binding: DownloadFragmentBinding\r\n    private lateinit var downloadedResourcesAdapter: DownloadedResourcesAdapter\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = DownloadFragmentBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        downloadedResourcesAdapter = DownloadedResourcesAdapter { downloadedResource ->\r\n            // Здесь добавьте код для удаления ресурса, например, удаление файла и обновление списка\r\n            // ...\r\n        }\r\n\r\n        binding.recyclerViewDownloadedResources.layoutManager = LinearLayoutManager(requireContext())\r\n        binding.recyclerViewDownloadedResources.adapter = downloadedResourcesAdapter\r\n\r\n        val downloadedResources = getDownloadedResources(requireContext())\r\n        downloadedResourcesAdapter.submitList(downloadedResources)\r\n        loadDownloadedResources()\r\n        loadDatabaseInfo()\r\n    }\r\n\r\n\r\n    private fun getDownloadedResources(context: Context): List<DownloadedResource> {\r\n        val downloadedResources = mutableListOf<DownloadedResource>()\r\n\r\n        val cacheDir = context.cacheDir\r\n        val imageDir = File(cacheDir, \"imageCache\") // Замените на название вашей директории для изображений\r\n        val musicDir = File(cacheDir, \"musicCache\") // Замените на название вашей директории для музыки\r\n\r\n        if (imageDir.exists()) {\r\n            for (file in imageDir.listFiles() ?: emptyArray()) {\r\n                val fileSizeInKb = file.length() / 1024\r\n                downloadedResources.add(DownloadedResource(file.name, fileSizeInKb, file.absolutePath))\r\n            }\r\n        }\r\n\r\n        if (musicDir.exists()) {\r\n            for (file in musicDir.listFiles() ?: emptyArray()) {\r\n                val fileSizeInKb = file.length() / 1024\r\n                downloadedResources.add(DownloadedResource(file.name, fileSizeInKb, file.absolutePath))\r\n            }\r\n        }\r\n\r\n        return downloadedResources\r\n    }\r\n\r\n    private fun loadDownloadedResources() {\r\n        lifecycleScope.launch {\r\n            val downloadedResources = getDownloadedResources(requireContext())\r\n            downloadedResourcesAdapter.submitList(downloadedResources)\r\n        }\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private fun loadDatabaseInfo() {\r\n        lifecycleScope.launch {\r\n            val quizDatabase = QuizDatabase.getDatabase(requireContext())\r\n            val quizDao = quizDatabase.getQuizDao()\r\n\r\n            val questionDetailCount = quizDao.getQuestionDetailCount()\r\n            val questionCount = quizDao.getQuestionCount()\r\n            val quizCount = quizDao.getQuizCount()\r\n            val apiQuestionCount = quizDao.getApiQuestionCount()\r\n            val profileCount = quizDao.getProfileCount()\r\n            val chatCount = quizDao.getChatCount()\r\n\r\n            val databaseInfo = \"\"\"\r\n            QuestionDetailEntity count: $questionDetailCount\r\n            QuestionEntity count: $questionCount\r\n            QuizEntity count: $quizCount\r\n            ApiQuestion count: $apiQuestionCount\r\n            ProfileEntity count: $profileCount\r\n            ChatEntity count: $chatCount\r\n        \"\"\".trimIndent()\r\n\r\n            binding.tvDatabaseInfo.text = databaseInfo\r\n        }\r\n    }\r\n}\r\n\r\ndata class DownloadedResource(\r\n    val fileName: String,\r\n    val fileSize: Long,\r\n    val filePath: String\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt	(revision 8947ae7ee74e48fa34622f23fa0f1d23fce590fc)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/dowload/DownloadFragment.kt	(date 1685299243568)
@@ -85,7 +85,6 @@
             val questionDetailCount = quizDao.getQuestionDetailCount()
             val questionCount = quizDao.getQuestionCount()
             val quizCount = quizDao.getQuizCount()
-            val apiQuestionCount = quizDao.getApiQuestionCount()
             val profileCount = quizDao.getProfileCount()
             val chatCount = quizDao.getChatCount()
 
@@ -93,7 +92,6 @@
             QuestionDetailEntity count: $questionDetailCount
             QuestionEntity count: $questionCount
             QuizEntity count: $quizCount
-            ApiQuestion count: $apiQuestionCount
             ProfileEntity count: $profileCount
             ChatEntity count: $chatCount
         """.trimIndent()
