Index: .idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
+++ /dev/null	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
@@ -1,34 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1" date="1681885256406" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 19.04.2023 9:20 [Changes]" />
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/fileHashes/fileHashes.lock" />
-    <option name="AFTER_PATH" value=".gradle/7.6/fileHashes/fileHashes.lock" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/fileHashes.lock" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/fileHashes/fileHashes.bin" />
-    <option name="AFTER_PATH" value=".gradle/7.6/fileHashes/fileHashes.bin" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/fileHashes.bin" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/buildOutputCleanup/buildOutputCleanup.lock" />
-    <option name="AFTER_PATH" value=".gradle/buildOutputCleanup/buildOutputCleanup.lock" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/buildOutputCleanup.lock" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/executionHistory/executionHistory.bin" />
-    <option name="AFTER_PATH" value=".gradle/7.6/executionHistory/executionHistory.bin" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/executionHistory.bin" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/executionHistory/executionHistory.lock" />
-    <option name="AFTER_PATH" value=".gradle/7.6/executionHistory/executionHistory.lock" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/executionHistory.lock" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value=".gradle/7.6/fileHashes/resourceHashesCache.bin" />
-    <option name="AFTER_PATH" value=".gradle/7.6/fileHashes/resourceHashesCache.bin" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/resourceHashesCache.bin" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.mainactivity\r\n\r\nimport android.Manifest.permission.READ_EXTERNAL_STORAGE\r\nimport android.Manifest.permission.WRITE_EXTERNAL_STORAGE\r\nimport android.animation.Animator\r\nimport android.animation.AnimatorListenerAdapter\r\nimport android.animation.ObjectAnimator\r\nimport android.animation.ValueAnimator\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ClipDrawable\r\nimport android.graphics.drawable.LayerDrawable\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.Spannable\r\nimport android.text.SpannableStringBuilder\r\nimport android.text.style.ForegroundColorSpan\r\nimport android.view.Gravity\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.view.animation.LinearInterpolator\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.gms.ads.interstitial.InterstitialAd\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.databinding.ActivityMainBinding\r\nimport com.tpov.schoolquiz.presentation.MainApp\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport com.tpov.schoolquiz.presentation.dowload.DownloadFragment\r\nimport com.tpov.schoolquiz.presentation.factory.ViewModelFactory\r\nimport com.tpov.schoolquiz.presentation.fragment.FragmentManager\r\nimport com.tpov.schoolquiz.presentation.mainactivity.info.InfoFragment\r\nimport com.tpov.schoolquiz.presentation.network.AutorisationFragment\r\nimport com.tpov.schoolquiz.presentation.network.chat.ChatFragment\r\nimport com.tpov.schoolquiz.presentation.network.event.EventFragment\r\nimport com.tpov.schoolquiz.presentation.network.profile.ProfileFragment\r\nimport com.tpov.schoolquiz.presentation.network.profile.UsersFragment\r\nimport com.tpov.schoolquiz.presentation.setting.SettingsFragment\r\nimport com.tpov.schoolquiz.presentation.shop.ShopFragment\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.*\r\nimport java.text.NumberFormat\r\nimport javax.inject.Inject\r\n\r\n/**\r\n * This is the main screen of the application, it consists of a panel that shows how much spare is left.\r\n * questions of the day and a fragment that displays user and system questions\r\n */\r\n\r\n@InternalCoroutinesApi\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityMainBinding\r\n\r\n    private var iAd: InterstitialAd? = null\r\n    private var numQuestionNotDate = 0\r\n    private lateinit var viewModel: MainActivityViewModel\r\n    private var fr1 = 1\r\n    private var fr2 = 1\r\n\r\n    @Inject\r\n    lateinit var viewModelFactory: ViewModelFactory\r\n\r\n    private var recreateActivity: Boolean = false\r\n\r\n    private val component by lazy {\r\n        (application as MainApp).component\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        component.inject(this)\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        log(\"onCreate()\")\r\n        // Remove the action bar\r\n        supportActionBar?.hide()\r\n        viewModel = ViewModelProvider(this, viewModelFactory)[MainActivityViewModel::class.java]\r\n        val imageResGold = R.drawable.baseline_favorite_24_gold\r\n        val imageRes = R.drawable.baseline_favorite_24\r\n\r\n        val filledDrawable = ContextCompat.getDrawable(this, imageRes)\r\n        val filledDrawableGold = ContextCompat.getDrawable(this, imageResGold)\r\n        val emptyDrawable = ContextCompat.getDrawable(this, R.drawable.baseline_favorite_24_empty)\r\n\r\n        val layers1 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layers2 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layers3 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layers4 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layers5 = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layersGold = arrayOf(\r\n            emptyDrawable,\r\n            ClipDrawable(filledDrawableGold, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val layerDrawable1 = LayerDrawable(layers1)\r\n        val layerDrawable2 = LayerDrawable(layers2)\r\n        val layerDrawable3 = LayerDrawable(layers3)\r\n        val layerDrawable4 = LayerDrawable(layers4)\r\n        val layerDrawable5 = LayerDrawable(layers5)\r\n        val layerDrawableGold = LayerDrawable(layersGold)\r\n\r\n        layerDrawable1.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawable2.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawable3.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawable4.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawable5.setDrawableByLayerId(0, emptyDrawable)\r\n        layerDrawableGold.setDrawableByLayerId(0, emptyDrawable)\r\n\r\n        layerDrawable1.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawable2.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawable3.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawable4.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawable5.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        layerDrawableGold.setDrawableByLayerId(\r\n            1,\r\n            ClipDrawable(filledDrawableGold, Gravity.LEFT, ClipDrawable.HORIZONTAL)\r\n        )\r\n        val imageViewGold = binding.pbLifeGold1\r\n        val imageViewLife1 = binding.pbLife1\r\n        val imageViewLife2 = binding.pbLife2\r\n        val imageViewLife3 = binding.pbLife3\r\n        val imageViewLife4 = binding.pbLife4\r\n        val imageViewLife5 = binding.pbLife5\r\n\r\n        layerDrawable1.setId(0, android.R.id.background)\r\n        layerDrawable2.setId(0, android.R.id.background)\r\n        layerDrawable3.setId(0, android.R.id.background)\r\n        layerDrawable4.setId(0, android.R.id.background)\r\n        layerDrawable4.setId(0, android.R.id.background)\r\n        layerDrawable5.setId(0, android.R.id.background)\r\n        layerDrawableGold.setId(0, android.R.id.background)\r\n        layerDrawable1.setId(1, android.R.id.progress)\r\n        layerDrawable2.setId(1, android.R.id.progress)\r\n        layerDrawable3.setId(1, android.R.id.progress)\r\n        layerDrawable4.setId(1, android.R.id.progress)\r\n        layerDrawable5.setId(1, android.R.id.progress)\r\n        layerDrawableGold.setId(1, android.R.id.progress)\r\n\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                READ_EXTERNAL_STORAGE\r\n            ) == PackageManager.PERMISSION_GRANTED &&\r\n            ContextCompat.checkSelfPermission(\r\n                this,\r\n                WRITE_EXTERNAL_STORAGE\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            // Разрешения уже предоставлены, выполнить нужную функцию\r\n\r\n            viewModel.init()\r\n\r\n            binding.tvName.text = \"\"\r\n\r\n            imageViewGold.setImageDrawable(layerDrawableGold)\r\n            imageViewLife1.setImageDrawable(layerDrawable1)\r\n            imageViewLife2.setImageDrawable(layerDrawable2)\r\n            imageViewLife3.setImageDrawable(layerDrawable3)\r\n            imageViewLife4.setImageDrawable(layerDrawable4)\r\n            imageViewLife5.setImageDrawable(layerDrawable5)\r\n\r\n            SharedPreferencesManager.setProfile(this, viewModel.getProfile)\r\n\r\n        } else {\r\n            // Разрешения не предоставлены, запросить их\r\n            requestStoragePermission()\r\n        }\r\n\r\n        viewModel.getProfileFBLiveData.observe(this) {\r\n            var count = it.count\r\n            layerDrawable1.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawable2.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawable3.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawable4.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawable5.findDrawableByLayerId(android.R.id.progress).level = count\r\n            count -= 10000\r\n            layerDrawableGold.findDrawableByLayerId(android.R.id.progress).level =\r\n                viewModel.getProfile.countGold * 10\r\n\r\n            if (viewModel.getProfile.countGoldLife == 1) {\r\n                imageViewGold.visibility = View.VISIBLE\r\n            } else imageViewGold.visibility = View.GONE\r\n\r\n            when (viewModel.getProfile.countLife) {\r\n                1 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.GONE\r\n                    imageViewLife3.visibility = View.GONE\r\n                    imageViewLife4.visibility = View.GONE\r\n                    imageViewLife5.visibility = View.GONE\r\n                }\r\n\r\n                2 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.VISIBLE\r\n                    imageViewLife3.visibility = View.GONE\r\n                    imageViewLife4.visibility = View.GONE\r\n                    imageViewLife5.visibility = View.GONE\r\n                }\r\n\r\n                3 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.VISIBLE\r\n                    imageViewLife3.visibility = View.VISIBLE\r\n                    imageViewLife4.visibility = View.GONE\r\n                    imageViewLife5.visibility = View.GONE\r\n                }\r\n\r\n                4 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.VISIBLE\r\n                    imageViewLife3.visibility = View.VISIBLE\r\n                    imageViewLife4.visibility = View.VISIBLE\r\n                    imageViewLife5.visibility = View.GONE\r\n                }\r\n\r\n                5 -> {\r\n                    imageViewLife1.visibility = View.VISIBLE\r\n                    imageViewLife2.visibility = View.VISIBLE\r\n                    imageViewLife3.visibility = View.VISIBLE\r\n                    imageViewLife4.visibility = View.VISIBLE\r\n                    imageViewLife5.visibility = View.VISIBLE\r\n                }\r\n            }\r\n\r\n            if (SharedPreferencesManager.getProfile(this)?.nickname != it.nickname) {\r\n                binding.tvName.text = try {\r\n                    \"${viewModel.getProfile.nickname}  \\uD83E\\uDD47\\uD83E\\uDD48️\\uD83C\\uDFC6\\uD83C\\uDF97️\\uD83C\\uDF83\\uD83C\\uDF84\\uD83C\\uDF81\\uD83D\\uDCFB\\uD83C\\uDFA7\\uD83C\\uDF9E️\\uD83E\\uDE99\\uD83D\\uDCC0\\uD83D\\uDCB5❤️\"\r\n                } catch (e: Exception) {\r\n                    \"\"\r\n                }\r\n            }\r\n            if (SharedPreferencesManager.getProfile(this)?.pointsNolics != it.pointsNolics) {\r\n                val animationDuration = 3000L\r\n                animateValue(\r\n                    binding.tvNolics,\r\n                    SharedPreferencesManager.getProfile(this)?.pointsNolics ?: 0,\r\n                    it.pointsNolics,\r\n                    animationDuration,\r\n                    500\r\n                )\r\n            }\r\n            if (SharedPreferencesManager.getProfile(this)?.pointsGold != it.pointsGold) {\r\n                val animationDuration = 3000L\r\n                animateValue(\r\n                    binding.tvGold,\r\n                    SharedPreferencesManager.getProfile(this)?.pointsGold ?: 0,\r\n                    it.pointsGold,\r\n                    animationDuration,\r\n                    500\r\n                )\r\n            }\r\n            if (SharedPreferencesManager.getProfile(this)?.pointsSkill != it.pointsSkill) {\r\n                val animationDuration = 3000L\r\n                animateValueFloat(\r\n                    binding.tvStars,\r\n                    ((SharedPreferencesManager.getProfile(this)?.pointsSkill?.toFloat() ?: 0).toInt() / 1000).toFloat(),\r\n                    (it.pointsSkill / 1000).toFloat(),\r\n                    animationDuration,\r\n                    500\r\n                )\r\n            }\r\n            if (TimeManager.getDaysBetweenDates(\r\n                    SharedPreferencesManager.getProfile(this)?.datePremium ?: \"\", it.datePremium\r\n                ) != 0L\r\n            ) {\r\n                val animationDuration = 3000L\r\n                animateValue(\r\n                    binding.tvCountPremiun,\r\n                    TimeManager.getDaysBetweenDates(\r\n                        SharedPreferencesManager.getProfile(this)?.datePremium ?: \"\",\r\n                        TimeManager.getCurrentTime()\r\n                    ).toInt(),\r\n                    TimeManager.getDaysBetweenDates(it.datePremium, TimeManager.getCurrentTime())\r\n                        .toInt(),\r\n                    animationDuration,\r\n                    500\r\n                )\r\n            }\r\n            SharedPreferencesManager.setProfile(this, it)\r\n        }\r\n\r\n        setButtonNavListener()\r\n        numQuestionNotDate = intent.getIntExtra(NUM_QUESTION_NOT_NUL, 0)\r\n\r\n        FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n        SetItemMenu.setHomeMenu(binding, 1, this)\r\n\r\n        loadNumQuestionNotDate()\r\n\r\n        binding.drawerLayout.addDrawerListener(object : DrawerLayout.DrawerListener {\r\n            override fun onDrawerSlide(drawerView: View, slideOffset: Float) {\r\n                // Вычисляем на сколько нужно сдвинуть элемент LinearLayout\r\n                val slideX = drawerView.width * slideOffset\r\n                binding.cv.translationX = slideX\r\n            }\r\n\r\n            override fun onDrawerOpened(drawerView: View) {\r\n                // Вызывается при открытии шторки\r\n            }\r\n\r\n            override fun onDrawerClosed(drawerView: View) {\r\n                // Вызывается при закрытии шторки\r\n            }\r\n\r\n            override fun onDrawerStateChanged(newState: Int) {\r\n                // Вызывается при изменении состояния шторки\r\n            }\r\n        })\r\n\r\n        listenerDrawer()\r\n        val imvNolics = binding.imvNolics\r\n        val imvStars = binding.imvStars\r\n        val imvGold = binding.imvGold\r\n        val imvPremium = binding.imvPremiun\r\n        val tvPbLoad = binding.tvPbLoad\r\n\r\n        val startValue = 0\r\n        val targetValue = 1000\r\n        val animationDuration = 3000L\r\n\r\n\r\n\r\n        SetItemMenu.setHomeMenu(binding, fr2, this)\r\n\r\n        val yRotateAnimationDuration = 1000\r\n        val repeatDelay = 6000L // Задержка между повторениями (1 минута)\r\n        var initialDelay = 1000L // Начальная задержка перед запуском анимации\r\n        var addInitialDelay = 250L\r\n\r\n\r\n        showTextWithDelay(binding.tvPbLoad, \"Соединение с сервером...\", 50)\r\n\r\n        startAnimationWithRepeat(imvStars, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvNolics, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        animateValue(binding.tvNolics, startValue, targetValue, animationDuration, initialDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife1,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife2,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife3,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife4,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(\r\n            imageViewLife5,\r\n            yRotateAnimationDuration,\r\n            initialDelay,\r\n            repeatDelay\r\n        )\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imageViewGold, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvGold, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        animateValue(binding.tvGold, startValue, 100, animationDuration, initialDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n        startAnimationWithRepeat(imvPremium, yRotateAnimationDuration, initialDelay, repeatDelay)\r\n        animateValue(binding.tvCountPremiun, startValue, 999, animationDuration, initialDelay)\r\n        initialDelay += addInitialDelay\r\n\r\n    }\r\n\r\n    private fun animateValue(\r\n        textView: TextView,\r\n        startValue: Int,\r\n        endValue: Int,\r\n        duration: Long,\r\n        startDelay: Long\r\n    ) {\r\n        val valueAnimator = ValueAnimator.ofInt(startValue, endValue).apply {\r\n            setDuration(duration)\r\n            setStartDelay(startDelay)\r\n            interpolator = LinearInterpolator()\r\n        }\r\n        valueAnimator.addUpdateListener { animation ->\r\n            textView.text = NumberFormat.getIntegerInstance().format(animation.animatedValue)\r\n        }\r\n        valueAnimator.start()\r\n    }\r\n\r\n    private fun animateValueFloat(\r\n        textView: TextView,\r\n        startValue: Float,\r\n        endValue: Float,\r\n        duration: Long,\r\n        startDelay: Long\r\n    ) {\r\n        val valueAnimator = ValueAnimator.ofFloat(startValue, endValue).apply {\r\n            setDuration(duration)\r\n            setStartDelay(startDelay)\r\n            interpolator = LinearInterpolator()\r\n        }\r\n        valueAnimator.addUpdateListener { animation ->\r\n            textView.text = String.format(\"%.1f\", animation.animatedValue)\r\n        }\r\n        valueAnimator.start()\r\n    }\r\n\r\n    private fun showTextWithDelay(textView: TextView, text: String, delayInMillis: Long) {\r\n        CoroutineScope(Dispatchers.Main).launch {\r\n            val spannableText = SpannableStringBuilder()\r\n            for (char in text) {\r\n                val start = spannableText.length\r\n                spannableText.append(char.toString())\r\n                spannableText.setSpan(\r\n                    ForegroundColorSpan(Color.WHITE),\r\n                    start,\r\n                    start + 1,\r\n                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE\r\n                )\r\n                textView.text = spannableText\r\n                delay(delayInMillis)\r\n\r\n                // Возвращаем цвет буквы к исходному (черный в данном случае)\r\n                spannableText.setSpan(\r\n                    ForegroundColorSpan(Color.BLACK),\r\n                    start,\r\n                    start + 1,\r\n                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE\r\n                )\r\n                textView.text = spannableText\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun startAnimationWithRepeat(\r\n        imageView: ImageView,\r\n        duration: Int,\r\n        initialDelay: Long,\r\n        repeatDelay: Long\r\n    ) {\r\n        val animator = ObjectAnimator.ofFloat(imageView, \"rotationY\", 0f, 360f).apply {\r\n            this.duration = duration.toLong()\r\n        }\r\n\r\n        animator.addListener(object : AnimatorListenerAdapter() {\r\n            override fun onAnimationEnd(animation: Animator) {\r\n                animation.removeListener(this)\r\n                imageView.postDelayed({\r\n                    animation.addListener(this)\r\n                    animation.start()\r\n                }, repeatDelay)\r\n            }\r\n        })\r\n\r\n        imageView.postDelayed({\r\n            animator.start()\r\n        }, initialDelay)\r\n    }\r\n\r\n\r\n    // Использование функции в вашем коде\r\n\r\n\r\n    override fun onPrepareOptionsMenu(menu: Menu): Boolean {\r\n        return super.onPrepareOptionsMenu(menu)\r\n    }\r\n\r\n    private fun listenerDrawer() {\r\n\r\n        log(\"fun listenerDrawer()\")\r\n\r\n        binding.navigationView.setNavigationItemSelectedListener { menuItem ->\r\n\r\n            binding.drawerLayout.closeDrawer(GravityCompat.START)\r\n            // ваш код обработки нажатия на элемент меню\r\n\r\n            log(\"listenerDrawer() menuItem: ${menuItem.toString()}\")\r\n            when (menuItem.toString()) {\r\n                resources.getString(R.string.nav_chat) -> {\r\n                    FragmentManager.setFragment(ChatFragment.newInstance(), this)\r\n                    SetItemMenu.setNetworkMenu(binding, 3, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_downloads) -> {\r\n                    FragmentManager.setFragment(DownloadFragment(), this)\r\n                    SetItemMenu.setHomeMenu(\r\n                        binding,\r\n                        4,\r\n                        this\r\n                    ) // Используйте подходящий номер пункта меню\r\n                }\r\n\r\n                resources.getString(R.string.nav_enter) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 10, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_exit) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 11, this)\r\n                    FirebaseAuth.getInstance().signOut()\r\n                }\r\n\r\n                resources.getString(R.string.nav_global) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 8, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_friends) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 9, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_home) -> {\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_leaders) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 11, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_massages) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 5, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_my_quiz) -> {\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(1), this)\r\n                    SetItemMenu.setHomeMenu(binding, 2, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_news) -> {\r\n                    SetItemMenu.setNetworkMenu(binding, 7, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_players) -> {\r\n                    FragmentManager.setFragment(UsersFragment.newInstance(), this)\r\n                    SetItemMenu.setNetworkMenu(binding, 6, this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_reports) -> {\r\n\r\n                }\r\n\r\n                resources.getString(R.string.nav_task) -> {\r\n                    FragmentManager.setFragment(EventFragment.newInstance(), this)\r\n                }\r\n\r\n                resources.getString(R.string.nav_settings) -> {\r\n                    FragmentManager.setFragment(SettingsFragment.newInstance(), this)\r\n                }\r\n\r\n            }\r\n\r\n            binding.navigationView.inflateMenu(R.menu.navigation_manu)\r\n            true // не забудьте вернуть значение true, чтобы показать, что событие было обработано\r\n\r\n        }\r\n    }\r\n\r\n    private fun requestStoragePermission() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE),\r\n            REQUEST_CODE_STORAGE_PERMISSION\r\n        )\r\n    }\r\n\r\n    //Окраживаем квадратики в красный и зеленый в зависимости сколько осталось запасных вопросов-дня\r\n    private fun loadNumQuestionNotDate() = with(binding) {\r\n\r\n        if (numQuestionNotDate > 0) textView10.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 1) textView9.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 2) textView8.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 3) textView7.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 4) textView6.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 5) textView5.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 6) textView4.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 7) textView3.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 8) textView2.setBackgroundResource(R.color.num_chack_norice_green)\r\n        if (numQuestionNotDate > 9) textView.setBackgroundResource(R.color.num_chack_norice_green)\r\n    }\r\n\r\n    fun replaceFragment(fragment: Fragment) {\r\n        val fragmentManager = supportFragmentManager\r\n        val transaction = fragmentManager.beginTransaction()\r\n        transaction.replace(R.id.title_fragment, fragment)\r\n        transaction.addToBackStack(null)\r\n        transaction.commit()\r\n\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n\r\n        if (requestCode == REQUEST_CODE_STORAGE_PERMISSION) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED &&\r\n                grantResults[1] == PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                // Разрешения получены, выполнить нужную функцию\r\n                viewModel =\r\n                    ViewModelProvider(this, viewModelFactory)[MainActivityViewModel::class.java]\r\n                viewModel.init()\r\n            } else {\r\n                // Разрешения не получены, вывести сообщение об ошибке\r\n                Toast.makeText(\r\n                    this,\r\n                    \"Storage permission is required to use this app\",\r\n                    Toast.LENGTH_LONG\r\n                ).show()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun setVisibleMenu(itemId: MenuItem) {\r\n\r\n        log(\"fun setVisibleMenu()\")\r\n        log(\"setVisibleMenu() itemId.itemId = ${itemId}\")\r\n        when (itemId.itemId) {\r\n\r\n            R.id.menu_home -> {\r\n                if (fr1 != 1) {\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                    fr1 = 1\r\n                }\r\n            }\r\n\r\n            R.id.menu_adb -> {\r\n                if (fr1 != 2) {\r\n\r\n                    fr1 = 2\r\n                }\r\n            }\r\n\r\n            R.id.menu_settings -> {\r\n                if (fr1 != 3) {\r\n\r\n                    fr1 = 3\r\n                }\r\n            }\r\n\r\n            R.id.menu_info -> {\r\n                if (fr1 != 4) {\r\n\r\n                    fr1 = 4\r\n                }\r\n            }\r\n\r\n            R.id.menu_network -> {\r\n                if (fr1 != 5) {\r\n                    SetItemMenu.setNetworkMenu(binding, 1, this)\r\n                    fr1 = 5\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setButtonNavListener() {\r\n\r\n        log(\"fun setButtonNavListener()\")\r\n        binding.bNav.setOnItemSelectedListener {\r\n\r\n            setVisibleMenu(it)\r\n            when (it.itemId) {\r\n\r\n                R.id.menu_home -> {\r\n\r\n                    log(\"setButtonNavListener() menu_home\")\r\n                    FragmentManager.setFragment(FragmentMain.newInstance(8), this)\r\n                    SetItemMenu.setHomeMenu(binding, 1, this)\r\n                }\r\n\r\n                R.id.menu_adb -> {\r\n                    FragmentManager.setFragment(ShopFragment.newInstance(), this)\r\n                }\r\n\r\n                R.id.menu_settings -> {\r\n                    log(\"setButtonNavListener() menu_settings\")\r\n                }\r\n\r\n                R.id.menu_info -> {\r\n                    log(\"setButtonNavListener() menu_info\")\r\n                    FragmentManager.setFragment(InfoFragment.newInstance(), this)\r\n                }\r\n\r\n                R.id.menu_network -> {\r\n\r\n                    log(\"setButtonNavListener() menu_network\")\r\n                    val user = FirebaseAuth.getInstance()\r\n                    if (user.currentUser != null) {\r\n                        log(\"setButtonNavListener() Аккаунт зареган\")\r\n                        Toast.makeText(this@MainActivity, \"Аккаунт найден\", Toast.LENGTH_LONG)\r\n                            .show()\r\n\r\n                        FragmentManager.setFragment(ProfileFragment.newInstance(), this)\r\n                    } else {\r\n\r\n                        log(\"setButtonNavListener() Аккаунт не зареган\")\r\n                        Toast.makeText(\r\n                            this@MainActivity,\r\n                            \"Аккаунт не найден, авторизуйтесь.\",\r\n                            Toast.LENGTH_LONG\r\n                        ).show()\r\n                        FragmentManager.setFragment(AutorisationFragment.newInstance(), this)\r\n                    }\r\n                }\r\n            }\r\n            true\r\n        }\r\n    }\r\n\r\n    fun log(massage: String) {\r\n        Logcat.log(massage, \"MainActivity\", Logcat.LOG_ACTIVITY)\r\n    }\r\n\r\n    companion object {\r\n\r\n        const val NUM_QUESTION_NOT_NUL = \"num_question_not_nul\"\r\n        const val SHOP_LIST = \"shop_list\"\r\n        const val REQUEST_CODE_STORAGE_PERMISSION = 1001\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt	(date 1682687533734)
@@ -6,6 +6,8 @@
 import android.animation.AnimatorListenerAdapter
 import android.animation.ObjectAnimator
 import android.animation.ValueAnimator
+import android.content.Context
+import android.content.SharedPreferences
 import android.content.pm.PackageManager
 import android.graphics.Color
 import android.graphics.drawable.ClipDrawable
@@ -31,6 +33,7 @@
 import androidx.drawerlayout.widget.DrawerLayout
 import androidx.fragment.app.Fragment
 import androidx.lifecycle.ViewModelProvider
+import androidx.lifecycle.lifecycleScope
 import com.google.android.gms.ads.interstitial.InterstitialAd
 import com.google.firebase.auth.FirebaseAuth
 import com.tpov.schoolquiz.R
@@ -69,6 +72,14 @@
     private var fr1 = 1
     private var fr2 = 1
 
+    private val sharedPreferenceListener =
+        SharedPreferences.OnSharedPreferenceChangeListener { sharedPreferences, key ->
+            if (key == "tpovId") {
+                val newTpovId = sharedPreferences.getInt(key, -1)
+                viewModel.updateTpovId(newTpovId)
+            }
+        }
+
     @Inject
     lateinit var viewModelFactory: ViewModelFactory
 
@@ -179,6 +190,7 @@
         layerDrawable5.setId(1, android.R.id.progress)
         layerDrawableGold.setId(1, android.R.id.progress)
 
+
         if (ContextCompat.checkSelfPermission(
                 this,
                 READ_EXTERNAL_STORAGE
@@ -189,141 +201,174 @@
             ) == PackageManager.PERMISSION_GRANTED
         ) {
             // Разрешения уже предоставлены, выполнить нужную функцию
-
             viewModel.init()
 
-            binding.tvName.text = ""
-
-            imageViewGold.setImageDrawable(layerDrawableGold)
-            imageViewLife1.setImageDrawable(layerDrawable1)
-            imageViewLife2.setImageDrawable(layerDrawable2)
-            imageViewLife3.setImageDrawable(layerDrawable3)
-            imageViewLife4.setImageDrawable(layerDrawable4)
-            imageViewLife5.setImageDrawable(layerDrawable5)
-
-            SharedPreferencesManager.setProfile(this, viewModel.getProfile)
-
         } else {
             // Разрешения не предоставлены, запросить их
             requestStoragePermission()
         }
 
-        viewModel.getProfileFBLiveData.observe(this) {
-            var count = it.count
-            layerDrawable1.findDrawableByLayerId(android.R.id.progress).level = count
-            count -= 10000
-            layerDrawable2.findDrawableByLayerId(android.R.id.progress).level = count
-            count -= 10000
-            layerDrawable3.findDrawableByLayerId(android.R.id.progress).level = count
-            count -= 10000
-            layerDrawable4.findDrawableByLayerId(android.R.id.progress).level = count
-            count -= 10000
-            layerDrawable5.findDrawableByLayerId(android.R.id.progress).level = count
-            count -= 10000
-            layerDrawableGold.findDrawableByLayerId(android.R.id.progress).level =
-                viewModel.getProfile.countGold * 10
+
+
+        val sharedPref = this.getSharedPreferences("profile", Context.MODE_PRIVATE)
+        sharedPref.registerOnSharedPreferenceChangeListener(sharedPreferenceListener)
+
+        log("getProfileFBLiveData 11 :${viewModel.tpovId}")
+        viewModel.getProfileFBLiveData.observe(this@MainActivity) {
+
+            val sharedPref = this.getSharedPreferences("profile", Context.MODE_PRIVATE)
+            sharedPref?.getInt("tpovId", -1) ?: -1
+            log("getProfileFBLiveData 12 :$it")
+            log("getProfileFBLiveData getTpovId :${sharedPref?.getInt("tpovId", -1) ?: -1}")
+            if (it != null) {
+                log("getProfileFBLiveData 22 $it")
+                var count = it.count
+                layerDrawable1.findDrawableByLayerId(android.R.id.progress).level = count
+                count -= 10000
+                layerDrawable2.findDrawableByLayerId(android.R.id.progress).level = count
+                count -= 10000
+                layerDrawable3.findDrawableByLayerId(android.R.id.progress).level = count
+                count -= 10000
+                layerDrawable4.findDrawableByLayerId(android.R.id.progress).level = count
+                count -= 10000
+                layerDrawable5.findDrawableByLayerId(android.R.id.progress).level = count
+                count -= 10000
+                layerDrawableGold.findDrawableByLayerId(android.R.id.progress).level =
+                    it.countGold * 10
 
-            if (viewModel.getProfile.countGoldLife == 1) {
-                imageViewGold.visibility = View.VISIBLE
-            } else imageViewGold.visibility = View.GONE
+                log("getProfileFBLiveData 22 ${it.countGoldLife}")
+                if (it.countGoldLife == 1) {
+                    imageViewGold.visibility = View.VISIBLE
+                } else imageViewGold.visibility = View.GONE
 
-            when (viewModel.getProfile.countLife) {
-                1 -> {
-                    imageViewLife1.visibility = View.VISIBLE
-                    imageViewLife2.visibility = View.GONE
-                    imageViewLife3.visibility = View.GONE
-                    imageViewLife4.visibility = View.GONE
-                    imageViewLife5.visibility = View.GONE
-                }
+                when (it.countLife) {
+                    0, 1 -> {
+                        imageViewLife1.visibility = View.VISIBLE
+                        imageViewLife2.visibility = View.GONE
+                        imageViewLife3.visibility = View.GONE
+                        imageViewLife4.visibility = View.GONE
+                        imageViewLife5.visibility = View.GONE
+                    }
 
-                2 -> {
-                    imageViewLife1.visibility = View.VISIBLE
-                    imageViewLife2.visibility = View.VISIBLE
-                    imageViewLife3.visibility = View.GONE
-                    imageViewLife4.visibility = View.GONE
-                    imageViewLife5.visibility = View.GONE
-                }
+                    2 -> {
+                        imageViewLife1.visibility = View.VISIBLE
+                        imageViewLife2.visibility = View.VISIBLE
+                        imageViewLife3.visibility = View.GONE
+                        imageViewLife4.visibility = View.GONE
+                        imageViewLife5.visibility = View.GONE
+                    }
 
-                3 -> {
-                    imageViewLife1.visibility = View.VISIBLE
-                    imageViewLife2.visibility = View.VISIBLE
-                    imageViewLife3.visibility = View.VISIBLE
-                    imageViewLife4.visibility = View.GONE
-                    imageViewLife5.visibility = View.GONE
-                }
+                    3 -> {
+                        imageViewLife1.visibility = View.VISIBLE
+                        imageViewLife2.visibility = View.VISIBLE
+                        imageViewLife3.visibility = View.VISIBLE
+                        imageViewLife4.visibility = View.GONE
+                        imageViewLife5.visibility = View.GONE
+                    }
 
-                4 -> {
-                    imageViewLife1.visibility = View.VISIBLE
-                    imageViewLife2.visibility = View.VISIBLE
-                    imageViewLife3.visibility = View.VISIBLE
-                    imageViewLife4.visibility = View.VISIBLE
-                    imageViewLife5.visibility = View.GONE
-                }
+                    4 -> {
+                        imageViewLife1.visibility = View.VISIBLE
+                        imageViewLife2.visibility = View.VISIBLE
+                        imageViewLife3.visibility = View.VISIBLE
+                        imageViewLife4.visibility = View.VISIBLE
+                        imageViewLife5.visibility = View.GONE
+                    }
 
-                5 -> {
-                    imageViewLife1.visibility = View.VISIBLE
-                    imageViewLife2.visibility = View.VISIBLE
-                    imageViewLife3.visibility = View.VISIBLE
-                    imageViewLife4.visibility = View.VISIBLE
-                    imageViewLife5.visibility = View.VISIBLE
-                }
-            }
+                    5 -> {
+                        imageViewLife1.visibility = View.VISIBLE
+                        imageViewLife2.visibility = View.VISIBLE
+                        imageViewLife3.visibility = View.VISIBLE
+                        imageViewLife4.visibility = View.VISIBLE
+                        imageViewLife5.visibility = View.VISIBLE
+                    }
+                }
 
-            if (SharedPreferencesManager.getProfile(this)?.nickname != it.nickname) {
-                binding.tvName.text = try {
-                    "${viewModel.getProfile.nickname}  \uD83E\uDD47\uD83E\uDD48️\uD83C\uDFC6\uD83C\uDF97️\uD83C\uDF83\uD83C\uDF84\uD83C\uDF81\uD83D\uDCFB\uD83C\uDFA7\uD83C\uDF9E️\uD83E\uDE99\uD83D\uDCC0\uD83D\uDCB5❤️"
-                } catch (e: Exception) {
-                    ""
-                }
-            }
-            if (SharedPreferencesManager.getProfile(this)?.pointsNolics != it.pointsNolics) {
-                val animationDuration = 3000L
-                animateValue(
-                    binding.tvNolics,
-                    SharedPreferencesManager.getProfile(this)?.pointsNolics ?: 0,
-                    it.pointsNolics,
-                    animationDuration,
-                    500
-                )
-            }
-            if (SharedPreferencesManager.getProfile(this)?.pointsGold != it.pointsGold) {
-                val animationDuration = 3000L
-                animateValue(
-                    binding.tvGold,
-                    SharedPreferencesManager.getProfile(this)?.pointsGold ?: 0,
-                    it.pointsGold,
-                    animationDuration,
-                    500
-                )
-            }
-            if (SharedPreferencesManager.getProfile(this)?.pointsSkill != it.pointsSkill) {
-                val animationDuration = 3000L
-                animateValueFloat(
-                    binding.tvStars,
-                    ((SharedPreferencesManager.getProfile(this)?.pointsSkill?.toFloat() ?: 0).toInt() / 1000).toFloat(),
-                    (it.pointsSkill / 1000).toFloat(),
-                    animationDuration,
-                    500
-                )
-            }
-            if (TimeManager.getDaysBetweenDates(
-                    SharedPreferencesManager.getProfile(this)?.datePremium ?: "", it.datePremium
-                ) != 0L
-            ) {
-                val animationDuration = 3000L
-                animateValue(
-                    binding.tvCountPremiun,
-                    TimeManager.getDaysBetweenDates(
-                        SharedPreferencesManager.getProfile(this)?.datePremium ?: "",
-                        TimeManager.getCurrentTime()
-                    ).toInt(),
-                    TimeManager.getDaysBetweenDates(it.datePremium, TimeManager.getCurrentTime())
-                        .toInt(),
-                    animationDuration,
-                    500
+                log("getNick() ${SharedPreferencesManager.getNick()}")
+                log("it.nickname() ${it.nickname}")
+                if (SharedPreferencesManager.getNick() != it.nickname) {
+
+                    var text = try {
+                        "${it.nickname}  \uD83E\uDD47\uD83E\uDD48️\uD83C\uDFC6\uD83C\uDF97️\uD83C\uDF83\uD83C\uDF84\uD83C\uDF81\uD83D\uDCFB\uD83C\uDFA7\uD83C\uDF9E️\uD83E\uDE99\uD83D\uDCC0\uD83D\uDCB5❤️"
+                    } catch (e: Exception) {
+                        ""
+                    }
+                    showTextWithDelay(
+                        binding.tvName,
+                        text,
+                        50
+                    )
+                }
+                log("getNolic() ${SharedPreferencesManager.getNolic()}")
+                log("it.pointsNolics() ${it.pointsNolics}")
+                if (SharedPreferencesManager.getNolic() != it.pointsNolics) {
+                    val animationDuration = 3000L
+                    animateValue(
+                        binding.tvNolics,
+                        SharedPreferencesManager.getNolic(),
+                        it.pointsNolics,
+                        animationDuration,
+                        500
+                    )
+                }
+                log("getGold() ${SharedPreferencesManager.getGold()}")
+                log("it.pointsGold() ${it.pointsGold}")
+                if (SharedPreferencesManager.getGold() != it.pointsGold) {
+                    val animationDuration = 3000L
+                    animateValue(
+                        binding.tvGold,
+                        SharedPreferencesManager.getGold(),
+                        it.pointsGold,
+                        animationDuration,
+                        500
+                    )
+                }
+                log("getSkill() ${SharedPreferencesManager.getSkill()}")
+                log("it.pointsSkill() ${it.pointsSkill}")
+                if (SharedPreferencesManager.getSkill() != it.pointsSkill) {
+                    val animationDuration = 3000L
+                    animateValueFloat(
+                        binding.tvStars,
+                        ((SharedPreferencesManager.getSkill().toFloat()
+                            ?: 0).toInt() / 1000).toFloat(),
+                        (it.pointsSkill / 1000).toFloat(),
+                        animationDuration,
+                        500
+                    )
+                }
+                log("getPremium() ${SharedPreferencesManager.getPremium()}")
+                log("it.datePremium() ${it.datePremium}")
+                if (TimeManager.getDaysBetweenDates(
+                        SharedPreferencesManager.getPremium(),
+                        it.datePremium
+                    ) != 0L
+                ) {
+                    val animationDuration = 3000L
+                    TimeManager.getDaysBetweenDates(
+                        it.datePremium,
+                        TimeManager.getCurrentTime()
+                    )
+                        ?.let { it1 ->
+                            animateValue(
+                                binding.tvCountPremiun,
+                                TimeManager.getDaysBetweenDates(
+                                    SharedPreferencesManager.getPremium(),
+                                    TimeManager.getCurrentTime()
+                                )?.toInt() ?: 0,
+                                it1
+                                    .toInt(),
+                                animationDuration,
+                                500
+                            )
+                        }
+                }
+                SharedPreferencesManager.setProfileCounts(
+                    it.pointsNolics,
+                    it.countGold,
+                    it.pointsSkill,
+                    it.datePremium,
+                    it.nickname
                 )
             }
-            SharedPreferencesManager.setProfile(this, it)
         }
 
         setButtonNavListener()
@@ -359,13 +404,6 @@
         val imvStars = binding.imvStars
         val imvGold = binding.imvGold
         val imvPremium = binding.imvPremiun
-        val tvPbLoad = binding.tvPbLoad
-
-        val startValue = 0
-        val targetValue = 1000
-        val animationDuration = 3000L
-
-
 
         SetItemMenu.setHomeMenu(binding, fr2, this)
 
@@ -375,14 +413,18 @@
         var addInitialDelay = 250L
 
 
-        showTextWithDelay(binding.tvPbLoad, "Соединение с сервером...", 50)
+        showTextWithDelay(
+            binding.tvPbLoad,
+            "Соединение с сервером... Загрузка общедоступных квестов...",
+            50
+        )
 
         startAnimationWithRepeat(imvStars, yRotateAnimationDuration, initialDelay, repeatDelay)
 
         initialDelay += addInitialDelay
 
         startAnimationWithRepeat(imvNolics, yRotateAnimationDuration, initialDelay, repeatDelay)
-        animateValue(binding.tvNolics, startValue, targetValue, animationDuration, initialDelay)
+
         initialDelay += addInitialDelay
 
         startAnimationWithRepeat(
@@ -429,15 +471,18 @@
         initialDelay += addInitialDelay
 
         startAnimationWithRepeat(imvGold, yRotateAnimationDuration, initialDelay, repeatDelay)
-        animateValue(binding.tvGold, startValue, 100, animationDuration, initialDelay)
         initialDelay += addInitialDelay
 
         startAnimationWithRepeat(imvPremium, yRotateAnimationDuration, initialDelay, repeatDelay)
-        animateValue(binding.tvCountPremiun, startValue, 999, animationDuration, initialDelay)
         initialDelay += addInitialDelay
 
     }
 
+    override fun onDestroy() {
+        super.onDestroy()
+        val sharedPref = this.getSharedPreferences("profile", Context.MODE_PRIVATE)
+        sharedPref.unregisterOnSharedPreferenceChangeListener(sharedPreferenceListener)
+    }
     private fun animateValue(
         textView: TextView,
         startValue: Int,
@@ -670,6 +715,8 @@
                 viewModel =
                     ViewModelProvider(this, viewModelFactory)[MainActivityViewModel::class.java]
                 viewModel.init()
+
+
             } else {
                 // Разрешения не получены, вывести сообщение об ошибке
                 Toast.makeText(
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AndroidLayouts\">\r\n    <shared>\r\n      <config>\r\n        <device id=\"_device_class_phone\" />\r\n        <device id=\"_device_class_foldable\" />\r\n        <device id=\"_device_class_desktop\" />\r\n        <locale>uk</locale>\r\n        <target>android-33-ext4</target>\r\n      </config>\r\n    </shared>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5af0db75-4be5-4ef3-8f7e-967bab06300d\" name=\"Changes\" comment=\"Add animation mainActivity\">\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/file-system.probe\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/file-system.probe\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/local.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/local.properties\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[17e6bcfc]\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Kotlin Object\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"layoutResourceFile\" />\r\n        <option value=\"valueResourceFile\" />\r\n        <option value=\"resourceFile\" />\r\n        <option value=\"Kotlin Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"GenerateSignedApkSettings\">\r\n    <option name=\"BUILD_TARGET_KEY\" value=\"apk\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"82b940d6209b5a50e1195a052700e8b42ea2da15\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"GithubProjectSettings\">\r\n    <option name=\"branchProtectionPatterns\">\r\n      <list>\r\n        <option value=\"master\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MdM8qyqboV1nJrQXz70kLiA3XM\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"PROJECT_TRUSTED_KEY\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.cidr.known.project.marker\" value=\"true\" />\r\n    <property name=\"cidr.known.project.marker\" value=\"true\" />\r\n    <property name=\"project.structure.last.edited\" value=\"SDK Location\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.17\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n  </component>\r\n  <component name=\"PsdUISettings\">\r\n    <option name=\"MODULE_TAB\" value=\"Properties\" />\r\n    <option name=\"LAST_EDITED_BUILD_TYPE\" value=\"release\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\java\\com\\tpov\\schoolquiz\\domain\" />\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\res\\drawable-hdpi\" />\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\res\\drawable-xxhdpi\" />\r\n      <recent name=\"F:\\Developer\\Programmer\\Android\\SchoolQuiz\\app\\src\\main\\res\\drawable\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\Программирование\\Android\\schoolquiz3.0\\app\\src\\main\\res\\anim\" />\r\n      <recent name=\"E:\\Программирование\\Android\\schoolquiz3.0\\app\\src\\main\\res\\drawable-xxhdpi\" />\r\n      <recent name=\"E:\\SchoolQuiz\\app\\src\\main\\java\\com\\tpov\\schoolquiz\\presentation\\network\\event\\translation\" />\r\n    </key>\r\n    <key name=\"MoveKotlinTopLevelDeclarationsDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.event\" />\r\n    </key>\r\n    <key name=\"CopyKotlinDeclarationDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tpov.schoolquiz.domain\" />\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.arena\" />\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.event\" />\r\n      <recent name=\"com.tpov.schoolquiz.data.fierbase\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" activateToolWindowBeforeRun=\"false\">\r\n      <module name=\"schoolquiz.app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"INSPECTION_WITHOUT_ACTIVITY_RESTART\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Hybrid>\r\n      <Java />\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n        <option name=\"PROFILING_MODE\" value=\"NOT_SET\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5af0db75-4be5-4ef3-8f7e-967bab06300d\" name=\"Changes\" comment=\"\" />\r\n      <created>1678092861294</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678092861294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"build\">\r\n      <created>1680408918363</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680408918363</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"fix build\">\r\n      <created>1680435462178</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680435462178</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"fix event adapter\">\r\n      <created>1680449661463</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680449661463</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"create logcat custom\">\r\n      <created>1680493508899</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680493508899</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Refactoring repository FB&#10;fix synth data\">\r\n      <created>1680706876046</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680706876046</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"fix load quiz\">\r\n      <created>1680773588658</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680773588658</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"fix questionActivity\">\r\n      <created>1680779736038</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680779736038</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Fix get question detail\">\r\n      <created>1680928726440</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680928726440</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Fix get question detail\">\r\n      <created>1680977705498</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680977705498</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"add 2event -&gt; 3event\">\r\n      <created>1681047372984</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681047372984</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"fix create question (number = 0)&#10;fix synth server\">\r\n      <created>1681051869138</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681051869138</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"create chat\">\r\n      <created>1681137571296</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681137571296</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"edit sort chat\">\r\n      <created>1681185211864</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681185211864</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"fix setEvent quiz\">\r\n      <created>1681186958854</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681186958854</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"edit autoswipe chat\">\r\n      <created>1681207294559</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681207294559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Edit registration fragment (delete to 2 path)\">\r\n      <created>1681221696668</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681221696668</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"create main list quiz and home list quiz\">\r\n      <created>1681376434409</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681376434409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"edit merge front fragment - arena fragment\">\r\n      <created>1681471483540</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681471483540</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Create setting and info\">\r\n      <created>1681725319556</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681725319556</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"fix main images\">\r\n      <created>1681982264179</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681982264179</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"fix main images\">\r\n      <created>1681982665577</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681982665577</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"fix main images (center gravity)\">\r\n      <created>1681984258945</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681984258945</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"fix main images (center gravity)\">\r\n      <created>1681984507809</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681984507809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\">\r\n      <created>1681988419524</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681988419524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\">\r\n      <created>1681996293308</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681996293308</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"26\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:io.reactivex.rxjava2:rxjava\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:com.google.protobuf:protobuf-java\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:io.grpc:grpc-api\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"fix build\" />\r\n    <MESSAGE value=\"fix event adapter\" />\r\n    <MESSAGE value=\"create logcat custom\" />\r\n    <MESSAGE value=\"Refactoring repository FB&#10;fix synth data\" />\r\n    <MESSAGE value=\"fix load quiz\" />\r\n    <MESSAGE value=\"fix questionActivity\" />\r\n    <MESSAGE value=\"fix load all questions\" />\r\n    <MESSAGE value=\"Fix numeration item in list FB\" />\r\n    <MESSAGE value=\"Fix get question detail\" />\r\n    <MESSAGE value=\"фвв 2event -&gt; 3event\" />\r\n    <MESSAGE value=\"add 2event -&gt; 3event\" />\r\n    <MESSAGE value=\"fix create question (number = 0)&#10;fix synth server\" />\r\n    <MESSAGE value=\"create chat\" />\r\n    <MESSAGE value=\"edit sort chat\" />\r\n    <MESSAGE value=\"fix setEvent quiz\" />\r\n    <MESSAGE value=\"edit autoswipe chat\" />\r\n    <MESSAGE value=\"Edit registration fragment (delete to 2 path)\" />\r\n    <MESSAGE value=\"create main list quiz and home list quiz\" />\r\n    <MESSAGE value=\"edit merge front fragment - arena fragment\" />\r\n    <MESSAGE value=\"Create setting and info\" />\r\n    <MESSAGE value=\"fix main images\" />\r\n    <MESSAGE value=\"fix main images (center gravity)\" />\r\n    <MESSAGE value=\"fix main images (center gravity)&#10;fix questionActivity &lt;- question8\" />\r\n    <MESSAGE value=\"Edit MainItem (translate, checkbox)\" />\r\n    <MESSAGE value=\"Add animation mainActivity\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Add animation mainActivity\" />\r\n    <option name=\"OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
+++ b/.idea/workspace.xml	(date 1682677475020)
@@ -15,21 +15,28 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5af0db75-4be5-4ef3-8f7e-967bab06300d" name="Changes" comment="Add animation mainActivity">
+    <list default="true" id="5af0db75-4be5-4ef3-8f7e-967bab06300d" name="Changes" comment="create observ profile in mainActivity">
       <change beforePath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/file-system.probe" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/buildOutputCleanup.lock" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/executionHistory.bin" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/executionHistory.lock" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/fileHashes.bin" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/fileHashes.lock" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/resourceHashesCache.bin" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20__Changes_1.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/EventViewModel.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/network/event/TranslateQuestionFragment.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionActivity.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/question/QuestionViewModel.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/custom/SharedPreferencesManager.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/custom/SharedPreferencesManager.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityViewModel.kt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/local.properties" beforeDir="false" afterPath="$PROJECT_DIR$/local.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -51,8 +58,8 @@
         <option value="Class" />
         <option value="layoutResourceFile" />
         <option value="valueResourceFile" />
-        <option value="resourceFile" />
         <option value="Kotlin Class" />
+        <option value="resourceFile" />
       </list>
     </option>
   </component>
@@ -95,14 +102,17 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">
-    <property name="PROJECT_TRUSTED_KEY" value="true" />
-    <property name="RunOnceActivity.cidr.known.project.marker" value="true" />
-    <property name="cidr.known.project.marker" value="true" />
-    <property name="project.structure.last.edited" value="SDK Location" />
-    <property name="project.structure.proportion" value="0.17" />
-    <property name="project.structure.side.proportion" value="0.0" />
-  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "PROJECT_TRUSTED_KEY": "true",
+    "RunOnceActivity.cidr.known.project.marker": "true",
+    "cidr.known.project.marker": "true",
+    "com.google.services.firebase.aqiPopupShown": "true",
+    "project.structure.last.edited": "SDK Location",
+    "project.structure.proportion": "0.17",
+    "project.structure.side.proportion": "0.0"
+  }
+}]]></component>
   <component name="PsdUISettings">
     <option name="MODULE_TAB" value="Properties" />
     <option name="LAST_EDITED_BUILD_TYPE" value="release" />
@@ -179,7 +189,6 @@
         <option name="STARTUP_CPU_PROFILING_CONFIGURATION_NAME" value="Java/Kotlin Method Sample (legacy)" />
         <option name="STARTUP_NATIVE_MEMORY_PROFILING_ENABLED" value="false" />
         <option name="NATIVE_MEMORY_SAMPLE_RATE_BYTES" value="2048" />
-        <option name="PROFILING_MODE" value="NOT_SET" />
       </Profilers>
       <option name="DEEP_LINK" value="" />
       <option name="ACTIVITY_CLASS" value="" />
@@ -374,7 +383,14 @@
       <option name="project" value="LOCAL" />
       <updated>1681996293308</updated>
     </task>
-    <option name="localTasksCounter" value="26" />
+    <task id="LOCAL-00026" summary="create observ profile in mainActivity">
+      <created>1682591591892</created>
+      <option name="number" value="00026" />
+      <option name="presentableId" value="LOCAL-00026" />
+      <option name="project" value="LOCAL" />
+      <updated>1682591591892</updated>
+    </task>
+    <option name="localTasksCounter" value="27" />
     <servers />
   </component>
   <component name="UnknownFeatures">
@@ -394,7 +410,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="fix build" />
     <MESSAGE value="fix event adapter" />
     <MESSAGE value="create logcat custom" />
     <MESSAGE value="Refactoring repository FB&#10;fix synth data" />
@@ -419,7 +434,8 @@
     <MESSAGE value="fix main images (center gravity)&#10;fix questionActivity &lt;- question8" />
     <MESSAGE value="Edit MainItem (translate, checkbox)" />
     <MESSAGE value="Add animation mainActivity" />
-    <option name="LAST_COMMIT_MESSAGE" value="Add animation mainActivity" />
+    <MESSAGE value="create observ profile in mainActivity" />
+    <option name="LAST_COMMIT_MESSAGE" value="create observ profile in mainActivity" />
     <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.mainactivity\r\n\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.asLiveData\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.data.fierbase.AddPoints\r\nimport com.tpov.schoolquiz.data.fierbase.Buy\r\nimport com.tpov.schoolquiz.data.fierbase.Dates\r\nimport com.tpov.schoolquiz.data.fierbase.Life\r\nimport com.tpov.schoolquiz.data.fierbase.Points\r\nimport com.tpov.schoolquiz.data.fierbase.Profile\r\nimport com.tpov.schoolquiz.data.fierbase.Qualification\r\nimport com.tpov.schoolquiz.data.fierbase.TimeInGames\r\nimport com.tpov.schoolquiz.data.fierbase.toProfileEntity\r\nimport com.tpov.schoolquiz.domain.GetAllProfilesDBUseCase\r\nimport com.tpov.schoolquiz.domain.GetEventLiveDataUseCase\r\nimport com.tpov.schoolquiz.domain.GetIdQuizByNameQuizUseCase\r\nimport com.tpov.schoolquiz.domain.GetPlayersDBUseCase\r\nimport com.tpov.schoolquiz.domain.GetProfileFlowUseCase\r\nimport com.tpov.schoolquiz.domain.GetProfileUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuestion8FBUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuestionDetail8FBUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuestionListUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuiz8FBUseCase\r\nimport com.tpov.schoolquiz.domain.GetQuizLiveDataUseCase\r\nimport com.tpov.schoolquiz.domain.InsertProfileUseCase\r\nimport com.tpov.schoolquiz.domain.InsertQuestionUseCase\r\nimport com.tpov.schoolquiz.domain.InsertQuizUseCase\r\nimport com.tpov.schoolquiz.domain.SetQuestionDetailFBUseCase\r\nimport com.tpov.schoolquiz.domain.SetQuestionFBUseCase\r\nimport com.tpov.schoolquiz.domain.SetQuizDataFBUseCase\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport java.util.Locale\r\nimport javax.inject.Inject\r\n\r\n@InternalCoroutinesApi\r\nclass MainActivityViewModel @Inject constructor(\r\n    private val context: Context,\r\n    private val insertQuizUseCase: InsertQuizUseCase,\r\n    private val getQuizLiveDataUseCase: GetQuizLiveDataUseCase,\r\n    private val getQuiz8FBUseCase: GetQuiz8FBUseCase,\r\n    private val getQuestionDetail8FBUseCase: GetQuestionDetail8FBUseCase,\r\n    private val getQuestion8FBUseCase: GetQuestion8FBUseCase,\r\n    private val getIdQuizByNameQuizUseCase: GetIdQuizByNameQuizUseCase,\r\n    private val insertQuestionUseCase: InsertQuestionUseCase,\r\n    private val setQuizFBUseCase: SetQuizDataFBUseCase,\r\n    private val setQuestionFBUseCase: SetQuestionFBUseCase,\r\n    private val setQuestionDetailFBUseCase: SetQuestionDetailFBUseCase,\r\n    private val getProfileFlowUseCase: GetProfileFlowUseCase,\r\n    private val insertProfileUseCase: InsertProfileUseCase,\r\n    private val getQuestionListUseCase: GetQuestionListUseCase,\r\n    private val getProfileUseCase: GetProfileUseCase,\r\n    private val getAllProfilesDBUseCase: GetAllProfilesDBUseCase,\r\n    private val getPlayersDBUseCase: GetPlayersDBUseCase,\r\n    val getEventLiveDataUseCase: GetEventLiveDataUseCase\r\n) : ViewModel() {\r\n\r\n    var tpovId = 0\r\n\r\n    fun getAllProfiles() = getAllProfilesDBUseCase()\r\n    fun getPlayers() = getPlayersDBUseCase()\r\n\r\n    init {\r\n        SharedPreferencesManager.initialize(context)\r\n    }\r\n    fun init() {\r\n        log(\"fun init()\")\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        tpovId = sharedPref?.getInt(\"tpovId\", -1) ?: -1\r\n\r\n        log(\"init() tpovId = $tpovId\")\r\n            log(\"init() launch()\")\r\n            if (tpovId == -1) insertProfile()\r\n            getProfileFlowUseCase(tpovId)\r\n            getQuiz8FBUseCase()\r\n            getQuestion8FBUseCase()\r\n    }\r\n\r\n    fun getQuestionListByIdQuiz(idQuiz: Int): List<QuestionEntity> {\r\n        return getQuestionListUseCase().filter { it.idQuiz == idQuiz }\r\n    }\r\n\r\n\r\n    private fun insertProfile() {\r\n        log(\"fun insertProfile()\")\r\n\r\n        val userLocale: Locale = Locale.getDefault()\r\n        val userLanguageCode: String = userLocale.language\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n\r\n        with(sharedPref.edit()) {\r\n            putInt(\"tpovId\", 0)\r\n            apply()\r\n        }\r\n\r\n        log(\"set tpovId = 0\")\r\n        tpovId = 0\r\n\r\n        Log.d(\"daefdhrt\", \"insertProfile tpovId $tpovId\")\r\n        val profile = Profile(\r\n            0,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            Points(0, 0, 0, 0),\r\n            \"0\",\r\n            Buy(1, 0, 1, \"0\", \"0\", \"0\"),\r\n            \"0\",\r\n            \"\",\r\n            \"\",\r\n            0,\r\n            TimeInGames(0,0,0, 0),\r\n            AddPoints(0, 0, 0, 0, \"\"),\r\n            Dates(\r\n                TimeManager.getCurrentTime(),\r\n                \"\"\r\n            ),\r\n            \"\",\r\n            userLanguageCode,\r\n            Qualification(1, 0, 0,0,0,0,0),\r\n            Life(1, 300, 0, 0)\r\n        )\r\n\r\n        insertProfileUseCase(profile.toProfileEntity())\r\n    }\r\n\r\n    fun insertQuiz(quizEntity: QuizEntity) {\r\n\r\n        log(\"fun insertQuiz\")\r\n        insertQuizUseCase(quizEntity)\r\n    }\r\n\r\n    fun insertQuestion(questionEntity: QuestionEntity) {\r\n        log(\"fun insertQuestionList\")\r\n        insertQuestionUseCase(questionEntity)\r\n    }\r\n\r\n    fun insertQuizEvent(quizEntity: QuizEntity) {\r\n        log(\"fun updateQuizEvent\")\r\n        if (quizEntity.event == 1) {\r\n            quizEntity.event++\r\n\r\n            log(\"updateQuizEvent quizEntity.event = ${quizEntity.event}\")\r\n            insertQuiz(quizEntity.copy(id = null))\r\n        }\r\n    }\r\n\r\n    fun setQuestionsFB() {\r\n        log(\"fun setQuestionsFB\")\r\n        setQuestionFBUseCase()\r\n        setQuestionDetailFBUseCase()\r\n    }\r\n\r\n    private fun getQuizList(): LiveData<List<QuizEntity>> {\r\n        log(\"fun getQuizList\")\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        tpovId = sharedPref?.getInt(\"tpovId\", -1) ?: -1\r\n        log(\"getQuizList tpovId: $tpovId\")\r\n        return getQuizLiveDataUseCase.getQuizUseCase(tpovId)\r\n    }\r\n\r\n    val getQuizLiveData: LiveData<List<QuizEntity>> = getQuizList()\r\n    var getProfileFBLiveData: LiveData<ProfileEntity> =\r\n        getProfileFlowUseCase(this.tpovId).asLiveData()\r\n\r\n    val getProfile = getProfileUseCase(tpovId)\r\n\r\n    fun getIdQuizByNameQuiz(nameQuiz: String) = getIdQuizByNameQuizUseCase(nameQuiz, tpovId)\r\n\r\n    fun log(massage: String) {\r\n        Logcat.log(massage, \"MainActivityViewModel\", Logcat.LOG_VIEW_MODEL)\r\n    }\r\n\r\n    fun deleteQuiz(id: Int) {\r\n\r\n    }\r\n\r\n    fun getLvlTranslateByQuizId(id: Int): Int {\r\n        var lvlTranslate = 1000\r\n        getQuestionListByIdQuiz(id).forEach {\r\n            if (it.lvlTranslate < lvlTranslate) lvlTranslate = it.lvlTranslate\r\n        }\r\n        return  lvlTranslate\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityViewModel.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityViewModel.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityViewModel.kt	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/mainactivity/MainActivityViewModel.kt	(date 1682687533751)
@@ -1,10 +1,13 @@
 package com.tpov.schoolquiz.presentation.mainactivity
 
 import android.content.Context
+import android.content.SharedPreferences
 import android.util.Log
 import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.asLiveData
+import androidx.lifecycle.switchMap
 import com.tpov.schoolquiz.data.database.entities.ProfileEntity
 import com.tpov.schoolquiz.data.database.entities.QuestionEntity
 import com.tpov.schoolquiz.data.database.entities.QuizEntity
@@ -38,6 +41,7 @@
 import com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager
 import com.tpov.shoppinglist.utils.TimeManager
 import kotlinx.coroutines.InternalCoroutinesApi
+import kotlinx.coroutines.flow.Flow
 import java.util.Locale
 import javax.inject.Inject
 
@@ -64,24 +68,28 @@
 ) : ViewModel() {
 
     var tpovId = 0
+    val tpovIdLiveData = MutableLiveData<Int>()
 
     fun getAllProfiles() = getAllProfilesDBUseCase()
     fun getPlayers() = getPlayersDBUseCase()
 
+
     init {
         SharedPreferencesManager.initialize(context)
     }
+
     fun init() {
         log("fun init()")
         val sharedPref = context.getSharedPreferences("profile", Context.MODE_PRIVATE)
         tpovId = sharedPref?.getInt("tpovId", -1) ?: -1
 
         log("init() tpovId = $tpovId")
-            log("init() launch()")
-            if (tpovId == -1) insertProfile()
-            getProfileFlowUseCase(tpovId)
-            getQuiz8FBUseCase()
-            getQuestion8FBUseCase()
+        log("init() launch()")
+        if (tpovId == -1) insertProfile()
+        getProfileFlowUseCase(tpovId)
+        getQuiz8FBUseCase()
+        getQuestion8FBUseCase()
+
     }
 
     fun getQuestionListByIdQuiz(idQuiz: Int): List<QuestionEntity> {
@@ -118,7 +126,7 @@
             "",
             "",
             0,
-            TimeInGames(0,0,0, 0),
+            TimeInGames(0, 0, 0, 0),
             AddPoints(0, 0, 0, 0, ""),
             Dates(
                 TimeManager.getCurrentTime(),
@@ -126,7 +134,7 @@
             ),
             "",
             userLanguageCode,
-            Qualification(1, 0, 0,0,0,0,0),
+            Qualification(1, 0, 0, 0, 0, 0, 0),
             Life(1, 300, 0, 0)
         )
 
@@ -160,6 +168,7 @@
         setQuestionDetailFBUseCase()
     }
 
+
     private fun getQuizList(): LiveData<List<QuizEntity>> {
         log("fun getQuizList")
         val sharedPref = context.getSharedPreferences("profile", Context.MODE_PRIVATE)
@@ -169,8 +178,13 @@
     }
 
     val getQuizLiveData: LiveData<List<QuizEntity>> = getQuizList()
-    var getProfileFBLiveData: LiveData<ProfileEntity> =
-        getProfileFlowUseCase(this.tpovId).asLiveData()
+    val getProfileFBLiveData: LiveData<ProfileEntity> = tpovIdLiveData.switchMap { tpovId ->
+        log("getProfileFBLiveData tpovId: $tpovId")
+        getProfileFlowUseCase(tpovId).asLiveData()
+    }
+    fun updateTpovId(tpovId: Int) {
+        tpovIdLiveData.value = tpovId
+    }
 
     val getProfile = getProfileUseCase(tpovId)
 
@@ -189,6 +203,6 @@
         getQuestionListByIdQuiz(id).forEach {
             if (it.lvlTranslate < lvlTranslate) lvlTranslate = it.lvlTranslate
         }
-        return  lvlTranslate
+        return lvlTranslate
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/tpov/schoolquiz/presentation/custom/SharedPreferencesManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.custom\r\n\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport com.google.gson.Gson\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\n\r\nobject SharedPreferencesManager {\r\n    private const val PREFS_NAME_QUIZ = \"version_quiz\"\r\n    private const val PREFS_NAME_QUESTION = \"version_question\"\r\n    private lateinit var sharedPreferencesQuiz: SharedPreferences\r\n    private lateinit var sharedPreferencesQuestion: SharedPreferences\r\n    fun setTimeMassage(time: String) {\r\n        if (!::sharedPreferencesQuiz.isInitialized) {\r\n            throw IllegalStateException(\"SharedPreferencesManager is not initialized\")\r\n        }\r\n        val editor = sharedPreferencesQuiz.edit()\r\n        editor.putString(\"massageTime\", time)\r\n        editor.apply()\r\n    }\r\n    fun getTimeMassage(): String {\r\n\r\n        if (!::sharedPreferencesQuiz.isInitialized) {\r\n            throw IllegalStateException(\"SharedPreferencesManager is not initialized\")\r\n        }\r\n        return sharedPreferencesQuiz.getString(\"massageTime\", \"0\") ?: \"0\"\r\n    }\r\n    fun setVersionQuiz(key: String, value: Int, context: Context) {\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        log(\"fun getVersionQuiz tpovId: $tpovId\")\r\n        log(\"fun setVersionQuiz key: $key|$tpovId, value: $value\")\r\n\r\n        if (!::sharedPreferencesQuiz.isInitialized) {\r\n            throw IllegalStateException(\"SharedPreferencesManager is not initialized\")\r\n        }\r\n        val editor = sharedPreferencesQuiz.edit()\r\n        editor.putInt(\"$key|$tpovId\", value)\r\n        editor.apply()\r\n    }\r\n\r\n    fun getVersionQuiz(key: String, context: Context): Int {\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        log(\"fun getVersionQuiz tpovId: $tpovId\")\r\n        log(\"fun getVersionQuiz key: $key|$tpovId, value: ${sharedPreferencesQuiz.getInt(\"$key|$tpovId\", -1)}\")\r\n\r\n        if (!::sharedPreferencesQuiz.isInitialized) {\r\n            throw IllegalStateException(\"SharedPreferencesManager is not initialized\")\r\n        }\r\n        return sharedPreferencesQuiz.getInt(\"$key|$tpovId\", -1)\r\n    }\r\n\r\n    fun setProfile(context: Context, profile: ProfileEntity) {\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        val sharedPreferences = context.getSharedPreferences(\"$tpovId|Profile\", Context.MODE_PRIVATE)\r\n        val editor = sharedPreferences.edit()\r\n        val gson = Gson()\r\n        val json = gson.toJson(profile)\r\n        editor.putString(\"$tpovId|profile\", json)\r\n        editor.apply()\r\n    }\r\n\r\n    fun getProfile(context: Context): ProfileEntity? {\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        val sharedPreferences = context.getSharedPreferences(\"$tpovId|Profile\", Context.MODE_PRIVATE)\r\n        val gson = Gson()\r\n        val json = sharedPreferences.getString(\"$tpovId|profile\", null)\r\n        return if (json != null) {\r\n            gson.fromJson(json, ProfileEntity::class.java)\r\n        } else {\r\n            null\r\n        }\r\n    }\r\n\r\n    fun initialize(context: Context) {\r\n        sharedPreferencesQuiz = context.getSharedPreferences(PREFS_NAME_QUIZ, Context.MODE_PRIVATE)\r\n        sharedPreferencesQuestion = context.getSharedPreferences(PREFS_NAME_QUESTION, Context.MODE_PRIVATE)\r\n    }\r\n\r\n    private fun log(msg: String) {\r\n        Logcat.log(msg, \"SharedPreference\", Logcat.LOG_FRAGMENT)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/custom/SharedPreferencesManager.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/custom/SharedPreferencesManager.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/custom/SharedPreferencesManager.kt	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/custom/SharedPreferencesManager.kt	(date 1682677720950)
@@ -2,8 +2,6 @@
 
 import android.content.Context
 import android.content.SharedPreferences
-import com.google.gson.Gson
-import com.tpov.schoolquiz.data.database.entities.ProfileEntity
 
 object SharedPreferencesManager {
     private const val PREFS_NAME_QUIZ = "version_quiz"
@@ -28,7 +26,7 @@
     fun setVersionQuiz(key: String, value: Int, context: Context) {
         val sharedPref = context.getSharedPreferences("profile", Context.MODE_PRIVATE)
         val tpovId = sharedPref?.getInt("tpovId", 0) ?: 0
-        log("fun getVersionQuiz tpovId: $tpovId")
+        log("fun setVersionQuiz tpovId: $tpovId")
         log("fun setVersionQuiz key: $key|$tpovId, value: $value")
 
         if (!::sharedPreferencesQuiz.isInitialized) {
@@ -42,8 +40,7 @@
     fun getVersionQuiz(key: String, context: Context): Int {
         val sharedPref = context.getSharedPreferences("profile", Context.MODE_PRIVATE)
         val tpovId = sharedPref?.getInt("tpovId", 0) ?: 0
-        log("fun getVersionQuiz tpovId: $tpovId")
-        log("fun getVersionQuiz key: $key|$tpovId, value: ${sharedPreferencesQuiz.getInt("$key|$tpovId", -1)}")
+        log("fun getVersionQuiz key|tpovId: $key|$tpovId, value: ${sharedPreferencesQuiz.getInt("$key|$tpovId", -1)}")
 
         if (!::sharedPreferencesQuiz.isInitialized) {
             throw IllegalStateException("SharedPreferencesManager is not initialized")
@@ -51,29 +48,56 @@
         return sharedPreferencesQuiz.getInt("$key|$tpovId", -1)
     }
 
-    fun setProfile(context: Context, profile: ProfileEntity) {
-        val sharedPref = context.getSharedPreferences("profile", Context.MODE_PRIVATE)
-        val tpovId = sharedPref?.getInt("tpovId", 0) ?: 0
-        val sharedPreferences = context.getSharedPreferences("$tpovId|Profile", Context.MODE_PRIVATE)
-        val editor = sharedPreferences.edit()
-        val gson = Gson()
-        val json = gson.toJson(profile)
-        editor.putString("$tpovId|profile", json)
+    fun setProfileCounts(nolic: Int, gold: Int, skill: Int, premium: String, nick: String) {
+        if (!::sharedPreferencesQuiz.isInitialized) {
+            throw IllegalStateException("SharedPreferencesManager is not initialized")
+        }
+        val editor = sharedPreferencesQuiz.edit()
+        editor.putInt("countNolic", nolic)
+        editor.putInt("countGold", gold)
+        editor.putInt("countSkill", skill)
+        editor.putString("countPremium", premium)
+        editor.putString("countNick", nick)
+
         editor.apply()
     }
 
-    fun getProfile(context: Context): ProfileEntity? {
-        val sharedPref = context.getSharedPreferences("profile", Context.MODE_PRIVATE)
-        val tpovId = sharedPref?.getInt("tpovId", 0) ?: 0
-        val sharedPreferences = context.getSharedPreferences("$tpovId|Profile", Context.MODE_PRIVATE)
-        val gson = Gson()
-        val json = sharedPreferences.getString("$tpovId|profile", null)
-        return if (json != null) {
-            gson.fromJson(json, ProfileEntity::class.java)
-        } else {
-            null
+    fun getNolic(): Int {
+
+        if (!::sharedPreferencesQuiz.isInitialized) {
+            throw IllegalStateException("SharedPreferencesManager is not initialized")
         }
+        return sharedPreferencesQuiz.getInt("countNolic", 0)
     }
+    fun getGold(): Int {
+
+        if (!::sharedPreferencesQuiz.isInitialized) {
+            throw IllegalStateException("SharedPreferencesManager is not initialized")
+        }
+
+        return sharedPreferencesQuiz.getInt("countGold", 0)
+    }
+    fun getSkill(): Int {
+
+        if (!::sharedPreferencesQuiz.isInitialized) {
+            throw IllegalStateException("SharedPreferencesManager is not initialized")
+        }
+        return sharedPreferencesQuiz.getInt("countSkill", 0)
+    }
+    fun getPremium(): String {
+
+        if (!::sharedPreferencesQuiz.isInitialized) {
+            throw IllegalStateException("SharedPreferencesManager is not initialized")
+        }
+        return sharedPreferencesQuiz.getString("countPremium", "0") ?: ""
+    }
+    fun getNick(): String? {
+
+        if (!::sharedPreferencesQuiz.isInitialized) {
+            throw IllegalStateException("SharedPreferencesManager is not initialized")
+        }
+        return sharedPreferencesQuiz.getString("countNick", "")
+    }
 
     fun initialize(context: Context) {
         sharedPreferencesQuiz = context.getSharedPreferences(PREFS_NAME_QUIZ, Context.MODE_PRIVATE)
Index: local.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## This file must *NOT* be checked into Version Control Systems,\r\n# as it contains information specific to your local configuration.\r\n#\r\n# Location of the SDK. This is only used by Gradle.\r\n# For customization when using a Version Control System, please read the\r\n# header note.\r\n#Mon Apr 24 19:29:56 EEST 2023\r\nsdk.dir=C\\:\\\\Users\\\\oleg1\\\\AppData\\\\Local\\\\Android\\\\Sdk\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/local.properties b/local.properties
--- a/local.properties	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
+++ b/local.properties	(date 1682591706747)
@@ -4,5 +4,5 @@
 # Location of the SDK. This is only used by Gradle.
 # For customization when using a Version Control System, please read the
 # header note.
-#Mon Apr 24 19:29:56 EEST 2023
-sdk.dir=C\:\\Users\\oleg1\\AppData\\Local\\Android\\Sdk
+#Thu Apr 27 13:35:06 EEST 2023
+sdk.dir=C\:\\Users\\ovasilenko\\AppData\\Local\\Android\\Sdk
Index: app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.presentation.dialog\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.LinearLayout\r\nimport android.widget.RadioButton\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.google.android.material.textfield.TextInputEditText\r\nimport com.google.mlkit.common.model.DownloadConditions\r\nimport com.google.mlkit.nl.languageid.LanguageIdentification\r\nimport com.google.mlkit.nl.languageid.LanguageIdentifier\r\nimport com.tpov.schoolquiz.R\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.databinding.CreateQuestionDialogBinding\r\nimport com.tpov.schoolquiz.presentation.mainactivity.MainActivityViewModel\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport java.util.*\r\n\r\n\r\nclass CreateQuestionDialog() : DialogFragment() {\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    private val mainActivityViewModel by lazy {\r\n        ViewModelProvider(requireActivity())[MainActivityViewModel::class.java]\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    @RequiresApi(Build.VERSION_CODES.Q)\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder = AlertDialog.Builder(activity)\r\n        val binding = CreateQuestionDialogBinding.inflate(LayoutInflater.from(activity))\r\n        var question = ArrayList<QuestionEntity>()\r\n        val sharedPref = context?.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        val tpovId = sharedPref?.getInt(\"tpovId\", 0)\r\n        var nameQuestion = \"\"\r\n        var intvQuestion2 = TextInputEditText(requireContext())\r\n        var questionLayout2 = LinearLayout(context)\r\n        var tvQuestion2 = TextView(context)\r\n        var sumbolQuestion2 = TextView(context)\r\n\r\n        val languageIdentifier = LanguageIdentification.getClient()\r\n        val conditions = DownloadConditions.Builder()\r\n            .requireWifi()\r\n            .build()\r\n\r\n        builder.setView(binding.root)\r\n\r\n        var numQuestion = 0\r\n        var nameQuiz = \"\"\r\n\r\n\r\n        binding.tvNext.setOnClickListener {\r\n\r\n            tvQuestion2.text =\r\n                \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n            tvQuestion2 = TextView(context)\r\n\r\n            intvQuestion2.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(\r\n                    s: CharSequence?,\r\n                    start: Int,\r\n                    count: Int,\r\n                    after: Int\r\n                ) {\r\n                }\r\n\r\n                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                    nameQuestion = \"\"\r\n                    nameQuestion = s.toString()\r\n                    tvQuestion2.text =\r\n                        \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n                }\r\n\r\n                override fun afterTextChanged(s: Editable?) {}\r\n            })\r\n            if (numQuestion != 0) {\r\n                getLanguage(languageIdentifier, nameQuestion) { lang ->\r\n                    question.add(\r\n                        QuestionEntity(\r\n                            null,\r\n                            numQuestion - 1,\r\n                            nameQuestion,\r\n                            getTextTrue(binding.rbTrue).toBoolean(),\r\n                            getTypeText(binding.rbLightQuestion).toBoolean(),\r\n                            -1,\r\n                            lang,\r\n                            mainActivityViewModel.getProfileFBLiveData.value?.translater ?: -1\r\n                        )\r\n                    )\r\n                }\r\n\r\n            } else {\r\n                nameQuiz = binding.intvQuiz.text.toString()\r\n            }\r\n\r\n            Log.d(\"adasfgdrh\", \"===question ${question}\")\r\n            // Создание нового question_layout\r\n\r\n\r\n            questionLayout2.id = View.generateViewId()\r\n            questionLayout2.orientation = LinearLayout.HORIZONTAL\r\n\r\n            tvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(500, LinearLayout.LayoutParams.WRAP_CONTENT)\r\n            questionLayout2.addView(tvQuestion2)\r\n\r\n            // Добавление TextView для символа\r\n            sumbolQuestion2.layoutParams = LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT\r\n            )\r\n            sumbolQuestion2.text = \" -$ \"\r\n            questionLayout2.addView(sumbolQuestion2)\r\n            questionLayout2.background = null\r\n            // Добавление TextInputEditText для ввода текста вопроса\r\n            intvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 2F)\r\n            intvQuestion2.hint = \"your question\"\r\n            intvQuestion2.requestFocus()\r\n            val cursorDrawable = ContextCompat.getDrawable(requireContext(), R.drawable.cursor)\r\n            intvQuestion2.textCursorDrawable = cursorDrawable\r\n            questionLayout2.addView(intvQuestion2)\r\n\r\n            sumbolQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            tvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            intvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n\r\n            tvQuestion2.maxLines = 1\r\n            intvQuestion2.background = null\r\n\r\n            intvQuestion2.width = 30\r\n            // Добавление нового question_layout в layout\r\n            binding.layout.addView(questionLayout2)\r\n            questionLayout2 = LinearLayout(context)\r\n            sumbolQuestion2 = TextView(context)\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n\r\n            binding.rbTrue.setOnCheckedChangeListener { _, _ ->\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n\r\n            }\r\n\r\n            binding.rbLightQuestion.setOnCheckedChangeListener { _, _ ->\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n\r\n            numQuestion++\r\n        }\r\n\r\n        binding.tvEnd.setOnClickListener {\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n            tvQuestion2 = TextView(context)\r\n            intvQuestion2.addTextChangedListener(object : TextWatcher {\r\n                override fun beforeTextChanged(\r\n                    s: CharSequence?,\r\n                    start: Int,\r\n                    count: Int,\r\n                    after: Int\r\n                ) {\r\n                    // вызывается перед изменением текста в поле\r\n                }\r\n\r\n                override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                    nameQuestion = \"\"\r\n                    nameQuestion = s.toString()\r\n                    Log.d(\"adasfgdrh\", \"Текст изменился: $s\")\r\n                }\r\n\r\n                override fun afterTextChanged(s: Editable?) {\r\n                    // вызывается после изменения текста в поле\r\n                }\r\n            })\r\n\r\n            if (numQuestion != 0) {\r\n                getLanguage(languageIdentifier, nameQuestion) { lang ->\r\n\r\n                    question.add(\r\n                        QuestionEntity(\r\n                            null,\r\n                            numQuestion,\r\n                            nameQuestion,\r\n                            getTextTrue(binding.rbTrue).toBoolean(),\r\n                            getTypeText(binding.rbLightQuestion).toBoolean(),\r\n                            -1,\r\n                            lang,\r\n                            mainActivityViewModel.getProfile.translater\r\n                        )\r\n                    )\r\n                }\r\n            } else {\r\n                nameQuiz = binding.intvQuiz.text.toString()\r\n            }\r\n\r\n            Log.d(\"adasfgdrh\", \"===question $question\")\r\n            // Создание нового question_layout\r\n\r\n\r\n            questionLayout2.id = View.generateViewId()\r\n            questionLayout2.orientation = LinearLayout.HORIZONTAL\r\n\r\n            tvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(500, LinearLayout.LayoutParams.WRAP_CONTENT)\r\n            tvQuestion2.text =\r\n                \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|${++numQuestion}\"\r\n\r\n            binding.rbLightQuestion.setOnCheckedChangeListener { _, _ ->\r\n                // Установка значения tvQuestion2 в зависимости от состояния кнопок\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n\r\n            binding.rbTrue.setOnCheckedChangeListener { _, _ ->\r\n                // Установка значения tvQuestion2 в зависимости от состояния кнопок\r\n                tvQuestion2.text =\r\n                    \"${getTextTrue(binding.rbTrue)}|${getTypeText(binding.rbLightQuestion)}|$numQuestion\"\r\n            }\r\n            questionLayout2.addView(tvQuestion2)\r\n\r\n            // Добавление TextView для символа\r\n            sumbolQuestion2.layoutParams = LinearLayout.LayoutParams(\r\n                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT\r\n            )\r\n            sumbolQuestion2.text = \" -$ \"\r\n            questionLayout2.addView(sumbolQuestion2)\r\n            questionLayout2.background = null\r\n            // Добавление TextInputEditText для ввода текста вопроса\r\n            intvQuestion2.layoutParams =\r\n                LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 2F)\r\n            intvQuestion2.hint = \"your question\"\r\n            intvQuestion2.requestFocus()\r\n            val cursorDrawable = ContextCompat.getDrawable(requireContext(), R.drawable.cursor)\r\n            intvQuestion2.textCursorDrawable = cursorDrawable\r\n            questionLayout2.addView(intvQuestion2)\r\n\r\n            sumbolQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            tvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n            intvQuestion2.setTextAppearance(requireContext(), R.style.TerminalText)\r\n\r\n            tvQuestion2.maxLines = 1\r\n            intvQuestion2.background = null\r\n\r\n            intvQuestion2.width = 30\r\n\r\n            // Добавление нового question_layout в layout\r\n            binding.layout.addView(questionLayout2)\r\n            questionLayout2 = LinearLayout(context)\r\n            tvQuestion2 = TextView(context)\r\n            sumbolQuestion2 = TextView(context)\r\n            intvQuestion2 = TextInputEditText(requireContext())\r\n                mainActivityViewModel.insertQuiz(\r\n                    QuizEntity(\r\n                        null,\r\n                        nameQuiz,\r\n                        mainActivityViewModel.getProfile.name,\r\n                        TimeManager.getCurrentTime(),\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        null,\r\n                        1,\r\n                        0,\r\n                        0,\r\n                        false,\r\n                        tpovId ?: 0\r\n                    )\r\n                )\r\n\r\n                question.forEach {\r\n                    mainActivityViewModel.insertQuestion(\r\n                        it.copy(\r\n                            idQuiz = mainActivityViewModel.getIdQuizByNameQuiz(\r\n                                nameQuiz\r\n                            )\r\n                        )\r\n                    )\r\n            }\r\n        }\r\n\r\n        return builder.create()\r\n    }\r\n\r\n    private fun getLanguage(\r\n        languageIdentifier: LanguageIdentifier,\r\n        nameQuestion: String,\r\n        callback: (String) -> Unit\r\n    ) {\r\n        var lang = \"\"\r\n\r\n        languageIdentifier.identifyLanguage(nameQuestion)\r\n            .addOnSuccessListener { language ->\r\n                lang = language ?: \"und\"\r\n                if (lang == \"und\") {\r\n                    val userLocale: Locale = Locale.getDefault()\r\n                    val userLanguageCode: String = userLocale.language\r\n                    lang = userLanguageCode\r\n                }\r\n                callback(lang)\r\n            }\r\n            .addOnFailureListener {\r\n                val userLocale: Locale = Locale.getDefault()\r\n                val userLanguageCode: String = userLocale.language\r\n                lang = userLanguageCode\r\n                callback(lang)\r\n            }\r\n    }\r\n\r\n    private fun getTextTrue(rbTrue: RadioButton): String {\r\n        return if (rbTrue.isChecked) \"true\"\r\n        else \"false\"\r\n    }\r\n\r\n    private fun getTypeText(rbLightQuestion: RadioButton): String {\r\n        return if (rbLightQuestion.isChecked) \"false\"\r\n        else \"true\"\r\n    }\r\n\r\n    companion object {\r\n        const val NAME = \"name\"\r\n\r\n        fun newInstance(name: String): CreateQuestionDialog {\r\n            val fragment = CreateQuestionDialog()\r\n            val args = Bundle()\r\n            args.putString(\"name\", name)\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt
--- a/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
+++ b/app/src/main/java/com/tpov/schoolquiz/presentation/dialog/CreateQuestionDialog.kt	(date 1682603368363)
@@ -100,7 +100,7 @@
                             getTypeText(binding.rbLightQuestion).toBoolean(),
                             -1,
                             lang,
-                            mainActivityViewModel.getProfileFBLiveData.value?.translater ?: -1
+                            mainActivityViewModel.getProfile.translater
                         )
                     )
                 }
Index: app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.shoppinglist.utils\r\n\r\nimport android.content.SharedPreferences\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport java.text.SimpleDateFormat\r\nimport java.time.ZoneId\r\nimport java.time.temporal.ChronoUnit\r\nimport java.util.*\r\n\r\nobject TimeManager {\r\n\r\n    private const val DEF_TIME_FORMAT = \"hh:mm:ss - yyyy/MM/dd\"\r\n    fun getCurrentTime(): String{\r\n        Log.d(\"NewNoteActivity\", \"getCurrentTime\")\r\n\r\n        val formatter = SimpleDateFormat(\"HH:mm:ss - dd/MM/yy\", Locale.getDefault())\r\n        return formatter.format(Calendar.getInstance().time)\r\n    }\r\n\r\n    fun getTimeFormat(time: String, defPreferences: SharedPreferences): String {\r\n        val defFormatter = SimpleDateFormat(DEF_TIME_FORMAT, Locale.getDefault())\r\n        val defDate = defFormatter.parse(time)\r\n        val newFormat = defPreferences.getString(\"time_format_key\", DEF_TIME_FORMAT)\r\n        val newFormatter = SimpleDateFormat(newFormat, Locale.getDefault())\r\n        return if (defDate != null) {\r\n            newFormatter.format(defDate)\r\n        } else {\r\n            time\r\n        }\r\n    }\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getDaysBetweenDates(dateString1: String, dateString2: String): Long {\r\n        val formatter = SimpleDateFormat(DEF_TIME_FORMAT, Locale.getDefault())\r\n\r\n        // Преобразуйте строки даты в объекты Date\r\n        val date1 = formatter.parse(dateString1)\r\n        val date2 = formatter.parse(dateString2)\r\n\r\n        // Преобразуйте объекты Date в объекты LocalDate\r\n        val localDate1 = date1.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()\r\n        val localDate2 = date2.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()\r\n\r\n        // Вычислите разницу между двумя объектами LocalDate в днях\r\n        return ChronoUnit.DAYS.between(localDate1, localDate2)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt b/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt	(revision 826ec3cd2db00f5d94601241fbd72f7310c6c125)
+++ b/app/src/main/java/com/tpov/schoolquiz/data/utils/TimeManager.kt	(date 1682596403220)
@@ -4,6 +4,8 @@
 import android.os.Build
 import android.util.Log
 import androidx.annotation.RequiresApi
+import java.lang.Long.getLong
+import java.text.ParseException
 import java.text.SimpleDateFormat
 import java.time.ZoneId
 import java.time.temporal.ChronoUnit
@@ -31,18 +33,22 @@
         }
     }
     @RequiresApi(Build.VERSION_CODES.O)
-    fun getDaysBetweenDates(dateString1: String, dateString2: String): Long {
+    fun getDaysBetweenDates(dateString1: String, dateString2: String): Long? {
         val formatter = SimpleDateFormat(DEF_TIME_FORMAT, Locale.getDefault())
 
-        // Преобразуйте строки даты в объекты Date
-        val date1 = formatter.parse(dateString1)
-        val date2 = formatter.parse(dateString2)
+        return try {
+            // Преобразуйте строки даты в объекты Date
+            val date1 = formatter.parse(dateString1)
+            val date2 = formatter.parse(dateString2)
 
-        // Преобразуйте объекты Date в объекты LocalDate
-        val localDate1 = date1.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
-        val localDate2 = date2.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
+            // Преобразуйте объекты Date в объекты LocalDate
+            val localDate1 = date1.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
+            val localDate2 = date2.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
 
-        // Вычислите разницу между двумя объектами LocalDate в днях
-        return ChronoUnit.DAYS.between(localDate1, localDate2)
+            // Вычислите разницу между двумя объектами LocalDate в днях
+            ChronoUnit.DAYS.between(localDate1, localDate2)
+        } catch (e: ParseException) {
+            0
+        }
     }
 }
\ No newline at end of file
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_19_04_2023_9_20_[Changes]1/shelved.patch
deleted file mode 100644
