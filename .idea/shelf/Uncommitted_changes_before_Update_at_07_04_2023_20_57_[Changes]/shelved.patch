Index: app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data\r\n\r\nimport android.content.Context\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.preference.PreferenceManager\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.StorageReference\r\nimport com.tpov.schoolquiz.data.database.QuizDao\r\nimport com.tpov.schoolquiz.data.database.entities.*\r\nimport com.tpov.schoolquiz.data.fierbase.*\r\nimport com.tpov.schoolquiz.domain.repository.RepositoryFB\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.custom.SharedPreferencesManager\r\nimport com.tpov.schoolquiz.presentation.mainactivity.MainActivity\r\nimport com.tpov.shoppinglist.utils.TimeManager\r\nimport kotlinx.coroutines.*\r\nimport kotlinx.coroutines.flow.Flow\r\nimport java.io.File\r\nimport javax.inject.Inject\r\nimport javax.inject.Singleton\r\n\r\n@Singleton\r\nclass RepositoryFBImpl @Inject constructor(\r\n    private val dao: QuizDao\r\n) : RepositoryFB {\r\n\r\n    var synthLiveData = MutableLiveData<Int>()\r\n    var synth = 0\r\n    var newVersionQuiz = ArrayList<Int>()\r\n    var newVersionQuizDetail = ArrayList<Int>()\r\n\r\n    override fun getValSynth(): MutableLiveData<Int> {\r\n\r\n        log(\"getValSynth()  ${synthLiveData.value}\")\r\n        log(\"getValSynth()s  $synth\")\r\n        return synthLiveData\r\n    }\r\n\r\n    init {\r\n        val referenceValue = Integer.toHexString(System.identityHashCode(getValSynth()))\r\n\r\n        log(\"fun init referenceValue :$referenceValue\")\r\n    }\r\n\r\n\r\n    override fun getChatData(): Flow<List<ChatEntity>> {\r\n        val chatRef = FirebaseDatabase.getInstance().getReference(\"chat\")\r\n        chatRef.addValueEventListener(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                // Получаем данные из snapshot и сохраняем их в локальную базу данных\r\n                for (data in snapshot.children) {\r\n                    val chatEntity = data.getValue(ChatEntity::class.java)\r\n                    if (chatEntity != null) {\r\n                        dao.insertChat(chatEntity)\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                // Обработка ошибок\r\n            }\r\n        })\r\n        return dao.getChat()\r\n    }\r\n\r\n    override fun getQuiz8Data(context: Context) {\r\n\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"quiz8\")\r\n        log(\"fun getQuiz8Data\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuiz8Data onDataChange snapshot = ${snapshot.key}\")\r\n                var quizEntities: QuizEntity\r\n\r\n                for (data in snapshot.children) {\r\n                    log(\"getQuiz8Data onDataChange data = ${data.key}\")\r\n                    val quizFB = data.getValue(Quiz::class.java)\r\n\r\n                    val currentVersion =\r\n                        SharedPreferencesManager.getVersionQuiz(quizFB?.versionQuiz.toString())\r\n                    log(\"getQuiz8Data onDataChange quizFB.versionQuiz = ${quizFB?.versionQuiz}, currentVersion = $currentVersion\")\r\n                    if (quizFB != null && (quizFB.versionQuiz > currentVersion || currentVersion == -1)) {\r\n                        newVersionQuiz.add(quizFB.idQuiz)\r\n                        newVersionQuizDetail.add(quizFB.idQuiz)\r\n                        log(\"getQuiz8Data onDataChange соблюдение условий версий квиза\")\r\n                        savePictureToLocalDirectory(\r\n                            quizFB.picture,\r\n                            context\r\n                        ) { path ->\r\n                            log(\"getQuiz8Data onDataChange savePictureToLocalDirectory\")\r\n                            quizEntities = quizFB.toQuizEntity(0, path)\r\n\r\n                            log(\"getQuiz8Data Добавляем квиз\")\r\n                            if (currentVersion == -1) dao.insertQuiz(quizEntities)\r\n                            else dao.updateQuiz(quizEntities)\r\n                            // сохраняем версию квеста в SharedPreferences\r\n                            SharedPreferencesManager.setVersionQuiz(\r\n                                snapshot.key ?: \"0\",\r\n                                quizFB.versionQuiz\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuiz8Data error: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    fun savePictureToLocalDirectory(\r\n        pictureString: String,\r\n        context: Context,\r\n        callback: (path: String?) -> Unit\r\n    ) {\r\n        log(\"fun savePictureToLocalDirectory()\")\r\n        if (!context.cacheDir.exists()) context.cacheDir.mkdir()\r\n        val directory = File(context.cacheDir, \"\")\r\n        var uid = FirebaseAuth.getInstance().currentUser?.uid\r\n\r\n        val storage: FirebaseStorage = FirebaseStorage.getInstance()\r\n        val storageRef: StorageReference = storage.reference\r\n        val pathReference: StorageReference = storageRef.child(\"picture/$pictureString\")\r\n\r\n        val file = File(directory, \"$pictureString\")\r\n\r\n        log(\"savePictureToLocalDirectory() путь сохранения картинки: $pictureString\")\r\n        pathReference.getFile(file).addOnSuccessListener {\r\n            // Обработка успешного скачивания картинки\r\n            log(\"savePictureToLocalDirectory() картинка получена успешно\")\r\n\r\n            callback(\"$pictureString\")\r\n        }.addOnFailureListener {\r\n\r\n            log(\"savePictureToLocalDirectory() ошибка получение картинки: $it\")\r\n            // Обработка ошибок\r\n            callback(null)\r\n        }\r\n    }\r\n\r\n    @OptIn(DelicateCoroutinesApi::class)\r\n    override fun getQuiz7Data(context: Context) {\r\n\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"quiz7\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val quizEntities = mutableListOf<QuizEntity>()\r\n                for (data in snapshot.children) {\r\n                    val quizEntity = data.getValue(Quiz::class.java)\r\n                    if (quizEntity != null) {\r\n                        savePictureToLocalDirectory(\r\n                            quizEntity.picture,\r\n                            context\r\n                        ) { path ->\r\n                            if (path != null) {\r\n                                if (dao.getQuizById(\r\n                                        quizEntity.idQuiz,\r\n                                        quizEntity.tpovId\r\n                                    ).id != quizEntity.idQuiz\r\n                                ) quizEntities.add(\r\n                                    quizEntity.toQuizEntity(\r\n                                        0,\r\n                                        path\r\n                                    )\r\n                                )\r\n                            } else {\r\n                                // Обрабатывайте ошибки здесь\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                dao.insertQuizList(quizEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuiz6Data() {\r\n\r\n\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"quiz6\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val quizEntities = mutableListOf<QuizEntity>()\r\n                for (data in snapshot.children) {\r\n                    val quizEntity = data.getValue(QuizEntity::class.java)\r\n                    if (quizEntity != null) {\r\n                        if (dao.getQuizById(\r\n                                quizEntity.id!!,\r\n                                quizEntity.tpovId\r\n                            ).id != quizEntity.id\r\n                        ) quizEntities.add(quizEntity)\r\n                    }\r\n                }\r\n                dao.insertQuizList(quizEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuiz5Data() {\r\n\r\n\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"quiz5\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val quizEntities = mutableListOf<QuizEntity>()\r\n                for (data in snapshot.children) {\r\n                    val quizEntity = data.getValue(QuizEntity::class.java)\r\n                    if (quizEntity != null) {\r\n                        if (dao.getQuizById(\r\n                                quizEntity.id!!,\r\n                                quizEntity.tpovId\r\n                            ).id != quizEntity.id\r\n                        ) quizEntities.add(quizEntity)\r\n                    }\r\n                }\r\n                dao.insertQuizList(quizEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuiz4Data() {\r\n        var uid = FirebaseAuth.getInstance().currentUser?.uid\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"quiz4\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val quizEntities = mutableListOf<QuizEntity>()\r\n                for (data in snapshot.children) {\r\n                    val quizEntity = data.getValue(QuizEntity::class.java)\r\n                    if (quizEntity != null) {\r\n                        if (dao.getQuizById(\r\n                                quizEntity.id!!,\r\n                                quizEntity.tpovId\r\n                            ).id != quizEntity.id\r\n                        ) quizEntities.add(quizEntity)\r\n                    }\r\n\r\n                }\r\n                dao.insertQuizList(quizEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuiz3Data() {\r\n        var uid = FirebaseAuth.getInstance().currentUser?.uid\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"quiz3\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val quizEntities = mutableListOf<QuizEntity>()\r\n                for (data in snapshot.children) {\r\n                    val quizEntity = data.getValue(QuizEntity::class.java)\r\n                    if (quizEntity != null) {\r\n                        if (dao.getQuizById(\r\n                                quizEntity.id!!,\r\n                                quizEntity.tpovId\r\n                            ).id != quizEntity.id\r\n                        ) quizEntities.add(quizEntity)\r\n                    }\r\n                }\r\n                dao.insertQuizList(quizEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuiz2Data() {\r\n\r\n        log(\"fun getQuiz2Data\")\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"quiz2\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuiz2Data snapshot: ${snapshot.key}\")\r\n                for (data in snapshot.children) {\r\n                    log(\"getQuiz2Data data: ${data.key}\")\r\n                    val quizEntity = data.getValue(Quiz::class.java)\r\n\r\n                    val currentVersion =\r\n                        SharedPreferencesManager.getVersionQuiz(data.key!!)\r\n                    if (quizEntity != null && (quizEntity.versionQuiz > currentVersion || currentVersion == -1)) {\r\n                        newVersionQuiz.add(quizEntity.idQuiz)\r\n                        newVersionQuizDetail.add(quizEntity.idQuiz)\r\n                        log(\"getQuiz2Data таблица не пустая, добавляем в список\")\r\n                        if (currentVersion == -1) dao.insertQuiz(quizEntity.toQuizEntity(0, \"\"))\r\n                        else dao.updateQuiz(quizEntity.toQuizEntity(0, \"\"))\r\n                        SharedPreferencesManager.setVersionQuiz(\r\n                            snapshot.key ?: \"0\",\r\n                            quizEntity.versionQuiz\r\n                        )\r\n                    }\r\n                }\r\n\r\n                synthLiveData.value = 8\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuiz2Data ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuiz1Data(tpovId: Int) {\r\n\r\n        log(\"fun getQuiz1Data\")\r\n\r\n        var uid = FirebaseAuth.getInstance().uid\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"quiz1/$tpovId\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuiz1Data snapshot: ${snapshot.key}\")\r\n                for (quizList in snapshot.children) {\r\n                    log(\"getQuiz1Data quizList: ${quizList.key}\")\r\n                    val quizEntity = quizList.getValue(Quiz::class.java)\r\n\r\n                    val currentVersion =\r\n                        SharedPreferencesManager.getVersionQuiz(quizList.key!!)\r\n                    if (quizEntity != null && (quizEntity.versionQuiz > currentVersion || currentVersion == -1)) {\r\n                        newVersionQuiz.add(quizEntity.idQuiz)\r\n                        newVersionQuizDetail.add(quizEntity.idQuiz)\r\n                        log(\"getQuiz1Data квиз не пустой, добавляем в список\")\r\n                        if (currentVersion == -1) dao.insertQuiz(quizEntity.toQuizEntity(0, \"\"))\r\n                        else dao.updateQuiz(quizEntity.toQuizEntity(0, \"\"))\r\n\r\n                        SharedPreferencesManager.setVersionQuiz(\r\n                            snapshot.key ?: \"0\",\r\n                            quizEntity.versionQuiz\r\n                        )\r\n                    }\r\n\r\n                }\r\n                synthLiveData.value = 7\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n                log(\"getQuiz1Data ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion8Data() {\r\n\r\n        log(\"fun getQuestion8Data\")\r\n\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question8\")\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestion8Data snapshot: ${snapshot.key}\")\r\n                val questionEntities = mutableListOf<QuestionEntity>()\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    log(\"getQuestion8Data idQuizSnap: ${idQuizSnap.key}\")\r\n                    for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок idQuiz внутри uid\r\n                        log(\"getQuestion8Data idQuestionSnap: ${idQuestionSnap.key}\")\r\n                        for (languageSnap in idQuestionSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            log(\"getQuestion8Data languageSnap: ${languageSnap.key}\")\r\n                            for (questionSnap in languageSnap.children) { // перебор всех вопросов внутри language\r\n                                log(\"getQuestion8Data questionSnap: ${questionSnap.key}\")\r\n                                val question = questionSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    newVersionQuiz.forEach {\r\n                                        log(\"getQuestion8Data newVersionQuiz.forEach it: $it == idQuizSnap: ${idQuizSnap.key}\")\r\n                                        if (it == idQuizSnap.key?.toInt()) {\r\n                                            log(\"getQuestion8Data вопрос не пустой, добавляем в список\")\r\n                                            questionEntities.add(\r\n                                                QuestionEntity(\r\n                                                    null,\r\n                                                    idQuestionSnap.key?.toInt() ?: 0,\r\n                                                    question.nameQuestion,\r\n                                                    question.answerQuestion,\r\n                                                    question.typeQuestion,\r\n                                                    idQuizSnap.key?.toInt() ?: -1,\r\n                                                    languageSnap.key ?: \"eu\",\r\n                                                    question.lvlTranslate\r\n                                                )\r\n                                            )\r\n                                            newVersionQuiz.remove(it)\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuestionList(questionEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestion8Data ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion7Data() {\r\n\r\n\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question7\")\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionEntities = mutableListOf<QuestionEntity>()\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок idQuiz внутри uid\r\n                        for (languageSnap in idQuestionSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            for (questionSnap in languageSnap.children) { // перебор всех вопросов внутри language\r\n                                val question = questionSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    newVersionQuiz.forEach {\r\n                                        log(\"getQuestion8Data newVersionQuiz.forEach it: $it == idQuizSnap: ${idQuizSnap.key}\")\r\n                                        if (it == idQuizSnap.key?.toInt()) {\r\n                                            log(\"getQuestion8Data вопрос не пустой, добавляем в список\")\r\n                                            questionEntities.add(\r\n                                                QuestionEntity(\r\n                                                    null,\r\n                                                    idQuestionSnap.key?.toInt() ?: 0,\r\n                                                    question.nameQuestion,\r\n                                                    question.answerQuestion,\r\n                                                    question.typeQuestion,\r\n                                                    idQuizSnap.key?.toInt() ?: -1,\r\n                                                    languageSnap.key ?: \"eu\",\r\n                                                    question.lvlTranslate\r\n                                                )\r\n                                            )\r\n                                            newVersionQuiz.remove(it)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuestionList(questionEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                // обработка ошибок\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion6Data() {\r\n\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question6\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionEntities = mutableListOf<QuestionEntity>()\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок idQuiz внутри uid\r\n                        for (languageSnap in idQuestionSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            for (questionSnap in languageSnap.children) { // перебор всех вопросов внутри language\r\n                                val question = questionSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    newVersionQuiz.forEach {\r\n                                        log(\"getQuestion8Data newVersionQuiz.forEach it: $it == idQuizSnap: ${idQuizSnap.key}\")\r\n                                        if (it == idQuizSnap.key?.toInt()) {\r\n                                            log(\"getQuestion8Data вопрос не пустой, добавляем в список\")\r\n                                            questionEntities.add(\r\n                                                QuestionEntity(\r\n                                                    null,\r\n                                                    idQuestionSnap.key?.toInt() ?: 0,\r\n                                                    question.nameQuestion,\r\n                                                    question.answerQuestion,\r\n                                                    question.typeQuestion,\r\n                                                    idQuizSnap.key?.toInt() ?: -1,\r\n                                                    languageSnap.key ?: \"eu\",\r\n                                                    question.lvlTranslate\r\n                                                )\r\n                                            )\r\n                                            newVersionQuiz.remove(it)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuestionList(questionEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                // обработка ошибок\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion5Data() {\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question5\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionEntities = mutableListOf<QuestionEntity>()\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок idQuiz внутри uid\r\n                        for (languageSnap in idQuestionSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            for (questionSnap in languageSnap.children) { // перебор всех вопросов внутри language\r\n                                val question = questionSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    newVersionQuiz.forEach {\r\n                                        log(\"getQuestion8Data newVersionQuiz.forEach it: $it == idQuizSnap: ${idQuizSnap.key}\")\r\n                                        if (it == idQuizSnap.key?.toInt()) {\r\n                                            log(\"getQuestion8Data вопрос не пустой, добавляем в список\")\r\n                                            questionEntities.add(\r\n                                                QuestionEntity(\r\n                                                    null,\r\n                                                    idQuestionSnap.key?.toInt() ?: 0,\r\n                                                    question.nameQuestion,\r\n                                                    question.answerQuestion,\r\n                                                    question.typeQuestion,\r\n                                                    idQuizSnap.key?.toInt() ?: -1,\r\n                                                    languageSnap.key ?: \"eu\",\r\n                                                    question.lvlTranslate\r\n                                                )\r\n                                            )\r\n                                            newVersionQuiz.remove(it)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuestionList(questionEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                // обработка ошибок\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion4Data() {\r\n\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question4\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionEntities = mutableListOf<QuestionEntity>()\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок idQuiz внутри uid\r\n                        for (languageSnap in idQuestionSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            for (questionSnap in languageSnap.children) { // перебор всех вопросов внутри language\r\n                                val question = questionSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    newVersionQuiz.forEach {\r\n                                        log(\"getQuestion8Data newVersionQuiz.forEach it: $it == idQuizSnap: ${idQuizSnap.key}\")\r\n                                        if (it == idQuizSnap.key?.toInt()) {\r\n                                            log(\"getQuestion8Data вопрос не пустой, добавляем в список\")\r\n                                            questionEntities.add(\r\n                                                QuestionEntity(\r\n                                                    null,\r\n                                                    idQuestionSnap.key?.toInt() ?: 0,\r\n                                                    question.nameQuestion,\r\n                                                    question.answerQuestion,\r\n                                                    question.typeQuestion,\r\n                                                    idQuizSnap.key?.toInt() ?: -1,\r\n                                                    languageSnap.key ?: \"eu\",\r\n                                                    question.lvlTranslate\r\n                                                )\r\n                                            )\r\n                                            newVersionQuiz.remove(it)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuestionList(questionEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                // обработка ошибок\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion3Data() {\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question3\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionEntities = mutableListOf<QuestionEntity>()\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок idQuiz внутри uid\r\n                        for (languageSnap in idQuestionSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            for (questionSnap in languageSnap.children) { // перебор всех вопросов внутри language\r\n                                val question = questionSnap.getValue(Question::class.java)\r\n                                if (question != null) {\r\n                                    newVersionQuiz.forEach {\r\n                                        log(\"getQuestion8Data newVersionQuiz.forEach it: $it == idQuizSnap: ${idQuizSnap.key}\")\r\n                                        if (it == idQuizSnap.key?.toInt()) {\r\n                                            log(\"getQuestion8Data вопрос не пустой, добавляем в список\")\r\n                                            questionEntities.add(\r\n                                                QuestionEntity(\r\n                                                    null,\r\n                                                    idQuestionSnap.key?.toInt() ?: 0,\r\n                                                    question.nameQuestion,\r\n                                                    question.answerQuestion,\r\n                                                    question.typeQuestion,\r\n                                                    idQuizSnap.key?.toInt() ?: -1,\r\n                                                    languageSnap.key ?: \"eu\",\r\n                                                    question.lvlTranslate\r\n                                                )\r\n                                            )\r\n                                            newVersionQuiz.remove(it)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuestionList(questionEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                // обработка ошибок\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion2Data() {\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question2\")\r\n\r\n        log(\"fun getQuestion2Data()\")\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionEntities = mutableListOf<QuestionEntity>()\r\n\r\n                log(\"getQuestion2Data() snapshot: $snapshot\")\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри uid\r\n                    log(\"getQuestion2Data() idQuizSnap: $idQuizSnap\")\r\n                    for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок idQuiz внутри uid\r\n                        log(\"getQuestion2Data() idQuestionSnap: $idQuestionSnap\")\r\n                        for (languageSnap in idQuestionSnap.children) { // перебор всех папок language внутри idQuiz\r\n                            log(\"getQuestion2Data() languageSnap: $languageSnap\")\r\n                            val question = languageSnap.getValue(Question::class.java)\r\n                            if (question != null) {\r\n                                log(\"getQuestion2Data() квест не пустой, добавляем в список\")\r\n                                newVersionQuiz.forEach {\r\n                                    log(\"getQuestion8Data newVersionQuiz.forEach it: $it == idQuizSnap: ${idQuizSnap.key}\")\r\n                                    if (it == idQuizSnap.key?.toInt()) {\r\n                                        log(\"getQuestion8Data вопрос не пустой, добавляем в список\")\r\n                                        questionEntities.add(\r\n                                            QuestionEntity(\r\n                                                null,\r\n                                                idQuestionSnap.key?.toInt() ?: 0,\r\n                                                question.nameQuestion,\r\n                                                question.answerQuestion,\r\n                                                question.typeQuestion,\r\n                                                idQuizSnap.key?.toInt() ?: -1,\r\n                                                languageSnap.key ?: \"eu\",\r\n                                                question.lvlTranslate\r\n                                            )\r\n                                        )\r\n                                        newVersionQuiz.remove(it)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuestionList(questionEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestion2Data() ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestion1Data(tpovId: Int) {\r\n        log(\"fun getQuestion1Data()\")\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question1/$tpovId\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n\r\n                log(\"getQuestion1Data() snapshot: ${snapshot.key}\")\r\n                val questionEntities = mutableListOf<QuestionEntity>()\r\n                for (idQuizSnap in snapshot.children) { // перебор всех папок idQuiz внутри users\r\n                    log(\"getQuestion1Data() idQuizSnap: ${idQuizSnap.key}\")\r\n                    for (idQuestionSnap in idQuizSnap.children) { // перебор всех папок idQuestion внутри idQuiz\r\n                        log(\"getQuestion1Data() idQuestionSnap: ${idQuestionSnap.key}\")\r\n                        for (languageSnap in idQuestionSnap.children) { // перебор всех папок language внутри idQuestion\r\n                            log(\"getQuestion1Data() languageSnap: ${languageSnap.key}\")\r\n                            val question = languageSnap.getValue(Question::class.java)\r\n                            if (question != null) {\r\n\r\n                                log(\"getQuestion1Data() квест не пустой, добавляем в список\")\r\n                                newVersionQuiz.forEach {\r\n                                    log(\"getQuestion8Data newVersionQuiz.forEach it: $it == idQuizSnap: ${idQuizSnap.key}\")\r\n                                    if (it == idQuizSnap.key?.toInt()) {\r\n                                        log(\"getQuestion8Data вопрос не пустой, добавляем в список\")\r\n                                        questionEntities.add(\r\n                                            QuestionEntity(\r\n                                                null,\r\n                                                idQuestionSnap.key?.toInt() ?: 0,\r\n                                                question.nameQuestion,\r\n                                                question.answerQuestion,\r\n                                                question.typeQuestion,\r\n                                                idQuizSnap.key?.toInt() ?: -1,\r\n                                                languageSnap.key ?: \"eu\",\r\n                                                question.lvlTranslate\r\n                                            )\r\n                                        )\r\n                                        newVersionQuiz.remove(it)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuestionList(questionEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestion1Data() ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail1(tpovId: Int) {\r\n        log(\"fun getQuestionDetail1()\")\r\n        val questionRef =\r\n            FirebaseDatabase.getInstance().getReference(\"question_detail1/$tpovId\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestionDetail1() snapshot: ${snapshot.key}\")\r\n                val questionDetailEntities = mutableListOf<QuestionDetailEntity>()\r\n                for (idQuiz in snapshot.children) {\r\n                    log(\"getQuestionDetail1() idQuiz: ${idQuiz.key}\")\r\n                    for (idQuestionDetail in idQuiz.children) {\r\n                        log(\"getQuestionDetail1() idQuestionDetail: ${idQuestionDetail.key}\")\r\n                        for (data in idQuestionDetail.children) {\r\n                            log(\"getQuestionDetail1() data: ${data.key}\")\r\n                            val questionDetailEntity =\r\n                                data.getValue(QuestionDetailEntity::class.java)\r\n                            if (questionDetailEntity != null) {\r\n                                newVersionQuizDetail.forEach {\r\n                                    if (it == idQuiz.key?.toInt()) {\r\n                                        log(\"getQuestionDetail1() обновляем it: $it\")\r\n                                        questionDetailEntities.add(questionDetailEntity)\r\n                                        newVersionQuizDetail.remove(it)\r\n                                    }\r\n                                }\r\n\r\n\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuizDetailList(questionDetailEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n                log(\"getQuestionDetail1() ошибка: $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail2() {\r\n        log(\"fun getQuestionDetail2()\")\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question_detail2\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestionDetail2() snapshot: ${snapshot.key}\")\r\n                val questionDetailEntities = mutableListOf<QuestionDetailEntity>()\r\n                for (user in snapshot.children) {\r\n                    log(\"getQuestionDetail2() user: ${user.key}\")\r\n                    for (idQuiz in user.children) {\r\n                        log(\"getQuestionDetail2() idQuiz: ${idQuiz.key}\")\r\n                        val questionDetailEntity =\r\n                            idQuiz.getValue(QuestionDetailEntity::class.java)\r\n                        if (questionDetailEntity != null) {\r\n                            log(\"getQuestionDetail2() квест не пустой, добавляем в список\")\r\n                            newVersionQuizDetail.forEach {\r\n                                if (it == idQuiz.key?.toInt()) {\r\n                                    log(\"getQuestionDetail1() обновляем it: $it\")\r\n                                    questionDetailEntities.add(questionDetailEntity)\r\n                                    newVersionQuizDetail.remove(it)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n                dao.insertQuizDetailList(questionDetailEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getQuestionDetail2() ошибка: $error\")\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail3() {\r\n        log(\"fun getQuestionDetail3()\")\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question_detail3\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionDetailEntities = mutableListOf<QuestionDetailEntity>()\r\n                for (user in snapshot.children) {\r\n                    for (idQuiz in user.children) {\r\n                        val questionDetailEntity =\r\n                            idQuiz.getValue(QuestionDetailEntity::class.java)\r\n                        if (questionDetailEntity != null) {\r\n                            newVersionQuizDetail.forEach {\r\n                                if (it == idQuiz.key?.toInt()) {\r\n                                    log(\"getQuestionDetail1() обновляем it: $it\")\r\n                                    questionDetailEntities.add(questionDetailEntity)\r\n                                    newVersionQuizDetail.remove(it)\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                dao.insertQuizDetailList(questionDetailEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail4() {\r\n\r\n        val questionRef = FirebaseDatabase.getInstance().getReference(\"question_detail4\")\r\n\r\n        questionRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionDetailEntities = mutableListOf<QuestionDetailEntity>()\r\n                for (user in snapshot.children) {\r\n                    for (idQuiz in user.children) {\r\n                        val questionDetailEntity =\r\n                            idQuiz.getValue(QuestionDetailEntity::class.java)\r\n                        if (questionDetailEntity != null) {\r\n                            newVersionQuizDetail.forEach {\r\n                                if (it == idQuiz.key?.toInt()) {\r\n                                    log(\"getQuestionDetail1() обновляем it: $it\")\r\n                                    questionDetailEntities.add(questionDetailEntity)\r\n                                    newVersionQuizDetail.remove(it)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuizDetailList(questionDetailEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail5() {\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"question_detail5\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionDetailEntities = mutableListOf<QuestionDetailEntity>()\r\n                for (user in snapshot.children) {\r\n                    for (idQuiz in user.children) {\r\n                        val questionDetailEntity =\r\n                            idQuiz.getValue(QuestionDetailEntity::class.java)\r\n                        if (questionDetailEntity != null) {\r\n                            newVersionQuizDetail.forEach {\r\n                                if (it == idQuiz.key?.toInt()) {\r\n                                    log(\"getQuestionDetail1() обновляем it: $it\")\r\n                                    questionDetailEntities.add(questionDetailEntity)\r\n                                    newVersionQuizDetail.remove(it)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuizDetailList(questionDetailEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail6() {\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"question_detail6\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionDetailEntities = mutableListOf<QuestionDetailEntity>()\r\n                for (user in snapshot.children) {\r\n                    for (idQuiz in user.children) {\r\n                        val questionDetailEntity =\r\n                            idQuiz.getValue(QuestionDetailEntity::class.java)\r\n                        if (questionDetailEntity != null) {\r\n                            newVersionQuizDetail.forEach {\r\n                                if (it == idQuiz.key?.toInt()) {\r\n                                    log(\"getQuestionDetail1() обновляем it: $it\")\r\n                                    questionDetailEntities.add(questionDetailEntity)\r\n                                    newVersionQuizDetail.remove(it)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuizDetailList(questionDetailEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail7() {\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"question_detail7\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val questionDetailEntities = mutableListOf<QuestionDetailEntity>()\r\n                for (user in snapshot.children) {\r\n                    for (idQuiz in user.children) {\r\n                        val questionDetailEntity =\r\n                            idQuiz.getValue(QuestionDetailEntity::class.java)\r\n                        if (questionDetailEntity != null) {\r\n                            newVersionQuizDetail.forEach {\r\n                                if (it == idQuiz.key?.toInt()) {\r\n                                    log(\"getQuestionDetail1() обновляем it: $it\")\r\n                                    questionDetailEntities.add(questionDetailEntity)\r\n                                    newVersionQuizDetail.remove(it)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuizDetailList(questionDetailEntities)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getQuestionDetail8() {\r\n        log(\"fun getQuestionDetail8()\")\r\n        val quizRef = FirebaseDatabase.getInstance().getReference(\"question_detail8\")\r\n\r\n        quizRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getQuestionDetail8() snapshot: ${snapshot.key}\")\r\n                val questionDetailEntities = mutableListOf<QuestionDetailEntity>()\r\n                for (user in snapshot.children) {\r\n                    log(\"getQuestionDetail8() user: ${user.key}\")\r\n                    for (idQuiz in user.children) {\r\n                        log(\"getQuestionDetail8() idQuiz: ${idQuiz.key}\")\r\n                        val questionDetailEntity =\r\n                            idQuiz.getValue(QuestionDetailEntity::class.java)\r\n                        if (questionDetailEntity != null) {\r\n                            log(\"getQuestionDetail8() квест не пустой, добавляем в список\")\r\n                            newVersionQuizDetail.forEach {\r\n                                if (it == idQuiz.key?.toInt()) {\r\n                                    log(\"getQuestionDetail1() обновляем it: $it\")\r\n                                    questionDetailEntities.add(questionDetailEntity)\r\n                                    newVersionQuizDetail.remove(it)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                dao.insertQuizDetailList(questionDetailEntities)\r\n\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun getProfile(context: Context) {\r\n        log(\"fun getProfile()\")\r\n        val profileRef = FirebaseDatabase.getInstance().getReference(\"Profiles\")\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n\r\n        profileRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getProfile() snapshot: ${snapshot.key}\")\r\n                var tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n                val profile = snapshot.child(\"$tpovId\").getValue(Profile::class.java)\r\n\r\n                log(\"getProfile() tpovId: $tpovId\")\r\n\r\n                if (profile != null) {\r\n                    log(\"getProfile() профиль не пустой\")\r\n                    if (dao.getProfileByTpovId(tpovId) == null) {\r\n                        log(\"getProfile() профиль по tpovid пустой, создаем новый\")\r\n                        dao.insertProfile(profile.toProfileEntity())\r\n\r\n                    } else {\r\n                        log(\"getProfile() профиль по tpovid найден\")\r\n                        dao.updateProfiles(\r\n                            dao.getProfileByFirebaseId(\r\n                                FirebaseAuth.getInstance().currentUser?.uid ?: \"\"\r\n                            )\r\n                                .copy(\r\n                                    addPointsGold = profile.addPoints.addGold,\r\n                                    addPointsNolics = profile.addPoints.addNolics,\r\n                                    addTrophy = profile.addPoints.addTrophy,\r\n                                    addPointsSkill = profile.addPoints.addSkill,\r\n                                    addPointsSkillInSeason = profile.addPoints.addSkillInSesone,\r\n                                    gamer = profile.qualification.gamer,\r\n                                    sponsor = profile.qualification.sponsor,\r\n                                    tester = profile.qualification.tester,\r\n                                    translater = profile.qualification.translater,\r\n                                    moderator = profile.qualification.moderator,\r\n                                    admin = profile.qualification.admin,\r\n                                    developer = profile.qualification.developer\r\n                                )\r\n                        )\r\n                    }\r\n                    synthLiveData.value = ++synth\r\n                    log(\"getProfile() synth: ${synthLiveData.value}\")\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getProfile() ошибка \")\r\n            }\r\n        })\r\n    }\r\n\r\n    override suspend fun setQuizData(tpovId: Int) {\r\n        log(\"fun setQuizData()\")\r\n        var quizDB = dao.getQuizList(tpovId)\r\n        var idQuiz = 0\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val quizRef1 = database.getReference(\"quiz1\")\r\n        val quizRef2 = database.getReference(\"quiz2\")\r\n        val quizRef3 = database.getReference(\"quiz3\")\r\n        val quizRef4 = database.getReference(\"quiz4\")\r\n        val quizRef5 = database.getReference(\"quiz5\")\r\n        val quizRef6 = database.getReference(\"quiz6\")\r\n        val quizRef7 = database.getReference(\"quiz7\")\r\n        val quizRef8 = database.getReference(\"quiz8\")\r\n\r\n        val playersRef = FirebaseDatabase.getInstance().getReference(\"players\")\r\n        // создаем скоуп для запуска корутин\r\n        val coroutineScope = CoroutineScope(Dispatchers.Default)\r\n\r\n// запускаем корутину\r\n        coroutineScope.launch {\r\n            log(\"setQuizData() launch\")\r\n            var readValue = true\r\n            var blockServer = false\r\n            quizDB.forEach {\r\n                if (it.id!! < 100) {\r\n                    log(\"setQuizData() найден квест который не был синхронизирован с сервером\")\r\n                    blockServer = true\r\n                }\r\n            }\r\n\r\n            val databaseReference = FirebaseDatabase.getInstance().getReference(\"players\")\r\n            databaseReference.child(\"read\").addValueEventListener(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    if (blockServer) {\r\n                        readValue = dataSnapshot.value as Boolean\r\n                        log(\"setQuizData() databaseReference readValue: $readValue\")\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    log(\"setQuizData() databaseReference error read fb: $databaseError\")\r\n                }\r\n            })\r\n\r\n            playersRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n                    log(\"setQuizData() playersRef snapshot: $snapshot\")\r\n\r\n                    coroutineScope.launch {\r\n                        if (blockServer) {\r\n                            while (!readValue) {\r\n                                log(\"setQuizData() playersRef сервер занят, ждем\")\r\n                                delay(100) // заменяем Thread.sleep() на delay()\r\n                            }\r\n\r\n                            val players =\r\n                                snapshot.value as Map<*, *> // Преобразование значений в Map\r\n                            idQuiz =\r\n                                (players[\"idQuiz\"] as Long).toInt() // Получение значения переменной allQuiz\r\n                            log(\"setQuizData() playersRef idQuiz: $idQuiz\")\r\n                            val updates = hashMapOf<String, Any>(\"read\" to false)\r\n                            playersRef.updateChildren(updates)\r\n                        }\r\n\r\n                        quizDB.forEach {\r\n                            log(\"setQuizData() playersRef quizDB перебираем\")\r\n                            if (it.event == 1) {\r\n\r\n                                log(\"setQuizData() playersRef quizDB event1\")\r\n                                if (it.id!! >= 100) {\r\n                                    log(\"setQuizData() playersRef quizDB event1 id >= 100 просто созраняем на сервер\")\r\n                                    quizRef1.child(\"${tpovId}/${it.id.toString()}\")\r\n                                        .setValue(it)\r\n                                } else {\r\n                                    log(\"setQuizData() playersRef quizDB event1 id < 100 синхронизируем с сервером\")\r\n\r\n                                    idQuiz++\r\n                                    val oldId = it.id\r\n                                    it.id = idQuiz\r\n                                    quizRef1.child(\"${tpovId}/$idQuiz\").setValue(it)\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId!!).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = it.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuizDetail(item.copy(idQuiz = it.id!!))\r\n                                    }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(it)\r\n                                    dao.deleteQuizById(oldId!!)\r\n\r\n                                }\r\n\r\n                            } else if (it.event == 2) {\r\n                                log(\"setQuizData() playersRef quizDB event2\")\r\n                                if (it.id!! >= 100) {\r\n                                    log(\"setQuizData() playersRef quizDB id >= 100  event2 просто созраняем на сервер\")\r\n                                    quizRef1.child(\"${tpovId}/${it.id.toString()}\")\r\n                                        .setValue(it)\r\n                                } else {\r\n\r\n                                    log(\"setQuizData() playersRef quizDB id < 100 event2 синхронизируем с сервером\")\r\n                                    idQuiz++\r\n                                    var oldId = it.id!!\r\n                                    it.id = idQuiz\r\n                                    quizRef2.child(\"$idQuiz\").setValue(it)\r\n\r\n                                    dao.getQuestionByIdQuiz(oldId).forEach { item ->\r\n                                        dao.insertQuestion(item.copy(idQuiz = it.id!!))\r\n                                    }\r\n                                    dao.getQuestionDetailByIdQuiz(oldId)\r\n                                        .forEach { item ->\r\n                                            dao.insertQuizDetail(item.copy(idQuiz = it.id!!))\r\n                                        }\r\n                                    dao.deleteQuestionDetailByIdQuiz(oldId)\r\n                                    dao.deleteQuestionByIdQuiz(oldId)\r\n                                    dao.insertQuiz(it)\r\n                                    dao.deleteQuizById(oldId!!)\r\n\r\n                                }\r\n                            } else if (it.event == 3) quizRef3.child(it.id.toString())\r\n                                .setValue(it)\r\n                            else if (it.event == 4) quizRef4.child(it.id.toString())\r\n                                .setValue(it)\r\n                            else if (it.event == 5) quizRef5.child(it.id.toString())\r\n                                .setValue(it)\r\n                            else if (it.event == 6) quizRef6.child(it.id.toString())\r\n                                .setValue(it)\r\n                            else if (it.event == 7) quizRef7.child(it.id.toString())\r\n                                .setValue(it)\r\n                            else if (it.event == 8) {\r\n                                log(\"setQuizData() event8 просто сохраняем на сервер\")\r\n                                quizRef8.child(it.id.toString()).setValue(it)\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n                    log(\"setQuizData() error: $error\")\r\n                }\r\n            })\r\n\r\n            var synth2 = true\r\n            log(\"setQuizData() dao.getQuizList(tpovId): ${dao.getQuizList(tpovId)}\")\r\n            while (synth2) {\r\n                synth2 = false\r\n                dao.getQuizList(tpovId).forEach {\r\n                    log(\"setQuizData() it: $it\")\r\n                    if (it.id!! < 100) synth2 = true\r\n                }\r\n            }\r\n            synthLiveData.postValue(++synth)\r\n            if (blockServer) {\r\n\r\n                log(\"setQuizData() blockServer = true\")\r\n                coroutineScope.launch {\r\n                    while (true) {\r\n                        var openServer = true\r\n                        quizDB.forEach {\r\n                            if (it.id!! < 100) openServer = false\r\n                        }\r\n                        log(\"setQuizData() сервер не завершился, ждем..\")\r\n                        if (openServer) break\r\n                        delay(100)\r\n                    }\r\n\r\n                    log(\"setQuizData() открываем доступ к серверу\")\r\n\r\n                    val databaseReference = FirebaseDatabase.getInstance().reference\r\n                    val updates = hashMapOf<String, Any>(\r\n                        \"players/read\" to true,\r\n                        \"players/idQuiz\" to idQuiz\r\n                    )\r\n                    databaseReference.updateChildren(updates).addOnFailureListener {\r\n                        log(\"setQuizData() ошибка : $it\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun setQuestionData(tpovId: Int) {\r\n\r\n        log(\"fun setQuestionData()\")\r\n        var question = dao.getQuestionList()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val questionRef1 = database.getReference(\"question1\")\r\n        val questionRef2 = database.getReference(\"question2\")\r\n        val questionRef3 = database.getReference(\"question3\")\r\n        val questionRef4 = database.getReference(\"question4\")\r\n        val questionRef5 = database.getReference(\"question5\")\r\n        val questionRef6 = database.getReference(\"question6\")\r\n        val questionRef7 = database.getReference(\"question7\")\r\n        val questionRef8 = database.getReference(\"question8\")\r\n\r\n        var i = 0\r\n        question.forEach {\r\n            log(\r\n                \"setQuestionData() перебираем квесты size: ${question.size}, dao.getQuizTpovIdById(it.idQuiz): ${\r\n                    dao.getQuizTpovIdById(\r\n                        it.idQuiz\r\n                    )\r\n                }, = tpovid: $tpovId\"\r\n            )\r\n            if (dao.getQuizTpovIdById(it.idQuiz) == tpovId) {\r\n                synthLiveData.value = --synth\r\n                log(\"setQuestionData() найдет квест который совпадает с tpovId, idQuiz: ${it.idQuiz}\")\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 1) questionRef1.child(\"${tpovId}/${it.idQuiz}/${it.id}/${it.language}\")\r\n                    .setValue(it).addOnSuccessListener {\r\n                        synthLiveData.value = ++synth\r\n                    }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 2) questionRef2.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 3) questionRef3.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 4) questionRef4.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 5) questionRef5.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 6) questionRef6.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 7) questionRef7.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 8) questionRef8.child(\"${it.idQuiz}/${it.id}/${it.language}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            }\r\n        }\r\n        synthLiveData.value = ++synth\r\n\r\n\r\n    }\r\n\r\n    override fun setTpovIdFB(context: Context) {\r\n\r\n        log(\"fun setTpovIdFB()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val ref = database.getReference(\"players\")\r\n        var uid = FirebaseAuth.getInstance().uid\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        var tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        log(\"setTpovIdFB() tpovId = $tpovId\")\r\n\r\n        ref.child(\"listTpovId/$uid\").setValue(tpovId).addOnSuccessListener {\r\n            log(\"setTpovIdFB() успех загрузки на сервер\")\r\n            synthLiveData.value = ++synth\r\n        }.addOnFailureListener {\r\n\r\n            log(\"setTpovIdFB() ошибка: $it\")\r\n        }\r\n    }\r\n\r\n    override fun getTpovIdFB(context: Context) {\r\n        synth = 0\r\n        synthLiveData.value = 0\r\n        log(\"fun getTpovIdFB()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val uid = FirebaseAuth.getInstance().uid\r\n        val ref = database.getReference(\"players\")\r\n\r\n        ref.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getTpovIdFB() snapshot: $snapshot\")\r\n\r\n                val tpovId: Long =\r\n                    snapshot.child(\"listTpovId/$uid\").getValue(Long::class.java) ?: 0\r\n                log(\"getTpovIdFB() tpovId: $tpovId\")\r\n                val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n                with(sharedPref.edit()) {\r\n                    putInt(\"tpovId\", tpovId.toInt())\r\n                    apply()\r\n                }\r\n\r\n                log(\"getTpovIdFB()/ set tpovId: $tpovId\")\r\n                synthLiveData.value = ++synth\r\n\r\n                log(\"getTpovIdFB()/ set synth: ${synthLiveData.value}\")\r\n                log(\"getTpovIdFB()/ set synth: ${synth}\")\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getTpovIdFB() ошибка $error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun setQuestionDetail(tpovId: Int) {\r\n\r\n        log(\"fun setQuestionDetail()\")\r\n\r\n        var questionDetail = dao.getQuestionDetailList()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val questionDetailRef1 = database.getReference(\"questionDetail1\")\r\n        val questionDetailRef2 = database.getReference(\"questionDetail2\")\r\n        val questionDetailRef3 = database.getReference(\"questionDetail3\")\r\n        val questionDetailRef4 = database.getReference(\"questionDetail4\")\r\n        val questionDetailRef5 = database.getReference(\"questionDetail5\")\r\n        val questionDetailRef6 = database.getReference(\"questionDetail6\")\r\n        val questionDetailRef7 = database.getReference(\"questionDetail7\")\r\n        val questionDetailRef8 = database.getReference(\"questionDetail8\")\r\n\r\n        questionDetail.forEach {\r\n            if (dao.getQuizTpovIdById(it.idQuiz) == tpovId) {\r\n                synthLiveData.value = --synth\r\n                log(\"setQuestionDetail() найден квест с таким же tpovId, idQuiz: ${it.idQuiz}\")\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 1) questionDetailRef1.child(\"${tpovId}/${it.idQuiz}/${it.id}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 2) questionDetailRef2.child(\"${it.idQuiz}/${it.id}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 3) questionDetailRef3.child(\"${it.idQuiz}/${it.id}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 4) questionDetailRef4.child(\"${it.idQuiz}/${it.id}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 5) questionDetailRef5.child(\"${it.idQuiz}/${it.id}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 6) questionDetailRef6.child(\"${it.idQuiz}/${it.id}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 7) questionDetailRef7.child(\"${it.idQuiz}/${it.id}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n                if (dao.getEventByIdQuiz(it.idQuiz) == 8) questionDetailRef8.child(\"${it.idQuiz}/${it.id}\")\r\n                    .setValue(it).addOnSuccessListener { synthLiveData.value = ++synth }\r\n            }\r\n        }\r\n        synthLiveData.value = ++synth\r\n\r\n    }\r\n\r\n    override fun setProfile(context: Context) {\r\n        log(\"fun setProfile()\")\r\n        val database = FirebaseDatabase.getInstance()\r\n        val profileRef = database.getReference(\"Profiles\")\r\n        val profilesRef = database.getReference(\"players\")\r\n        var idUsers = 0\r\n        var oldIdUser = 0\r\n        val sharedPref = context.getSharedPreferences(\"profile\", Context.MODE_PRIVATE)\r\n        var tpovId = sharedPref?.getInt(\"tpovId\", 0) ?: 0\r\n        var profile = dao.getProfileByTpovId(tpovId)\r\n\r\n        log(\"setProfile() tpovId: $tpovId\")\r\n        if (tpovId == 0) {\r\n\r\n            profilesRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(snapshot: DataSnapshot) {\r\n\r\n                    log(\"setProfile() snapshot: ${snapshot.key}\")\r\n                    idUsers =\r\n                        ((snapshot.value as Map<*, *>)[\"idUser\"] as Long).toInt() // Получение значения переменной allQuiz\r\n                    oldIdUser = tpovId\r\n                    idUsers++\r\n\r\n                    profilesRef.updateChildren(\r\n                        hashMapOf<String, Any>(\r\n                            \"idUser\" to idUsers\r\n                        )\r\n                    )\r\n\r\n                    profileRef.child(idUsers.toString()).setValue(\r\n                        profile.copy(\r\n                            tpovId = idUsers,\r\n                            idFirebase = FirebaseAuth.getInstance().currentUser?.uid ?: \"\",\r\n                            dateSynch = TimeManager.getCurrentTime()\r\n                        ).toProfile()\r\n                    ).addOnSuccessListener {\r\n\r\n                        dao.updateProfiles(\r\n                            profile.copy(\r\n                                tpovId = idUsers,\r\n                                idFirebase = FirebaseAuth.getInstance().currentUser?.uid ?: \"\",\r\n                                dateSynch = TimeManager.getCurrentTime()\r\n                            )\r\n                        )\r\n\r\n                        dao.getQuizList(oldIdUser).forEach {\r\n                            dao.updateQuiz(it.copy(tpovId = idUsers))\r\n                        }\r\n\r\n                        with(sharedPref.edit()) {\r\n                            putInt(\"tpovId\", idUsers)\r\n                            apply()\r\n                        }\r\n                        setTpovIdFB(context)\r\n\r\n                        log(\"setProfile() tpovId: $tpovId\")\r\n                    }.addOnFailureListener {\r\n                        log(\"setProfile() error1: $it\")\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(error: DatabaseError) {\r\n\r\n                    log(\"setProfile() error2: $error\")\r\n\r\n                }\r\n            })\r\n\r\n\r\n        } else {\r\n            log(\"setProfile() id != 0 просто сохраняем на сервер profile: $profile, tpovId: $tpovId\")\r\n            try {\r\n                log(\"setProfile() id != 0 просто сохраняем на сервер profile: $profile, tpovId: $tpovId\")\r\n                profileRef.child(tpovId.toString()).setValue(profile.toProfile())\r\n                    .addOnSuccessListener {\r\n                        synthLiveData.value = ++synth\r\n                    }\r\n\r\n                log(\"setProfile() id != 0 просто сохраняем на сервер\")\r\n            } catch (e: java.lang.Exception) {\r\n                synthLiveData.value = ++synth\r\n                log(\"setProfile() id != 0 и в бд пусто, ничего не отправляем\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    override fun setEvent(position: Int) {\r\n    }\r\n\r\n    override fun getUserName(tpovId: Int): Profile {\r\n        log(\"fun getUserName()\")\r\n        val profileRef = FirebaseDatabase.getInstance().getReference(\"Profiles\")\r\n        var profile = Profile()\r\n\r\n        profileRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                log(\"getUserName() snapshot: ${snapshot.key}\")\r\n                profile = snapshot.child(\"$tpovId\").getValue(Profile::class.java)!!\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                log(\"getUserName() ошибка \")\r\n            }\r\n\r\n        })\r\n        return profile\r\n    }\r\n\r\n    @OptIn(InternalCoroutinesApi::class)\r\n    fun log(m: String) {\r\n        Logcat.log(m, \"RepositoryFB\", Logcat.LOG_FIREBASE)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt b/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt	
+++ b/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt	
@@ -3,6 +3,7 @@
 import android.content.Context
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.Observer
 import androidx.preference.PreferenceManager
 import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.database.DataSnapshot
@@ -13,6 +14,7 @@
 import com.google.firebase.storage.StorageReference
 import com.tpov.schoolquiz.data.database.QuizDao
 import com.tpov.schoolquiz.data.database.entities.*
+import com.tpov.schoolquiz.data.database.observer
 import com.tpov.schoolquiz.data.fierbase.*
 import com.tpov.schoolquiz.domain.repository.RepositoryFB
 import com.tpov.schoolquiz.presentation.custom.Logcat
@@ -1013,7 +1015,10 @@
                         }
                     }
                 }
-                dao.insertQuizDetailList(questionDetailEntities)
+
+
+// Пример добавления слушателя
+                dao.insertQuizDetailList(questionDetailEntities).observe(this, observer)
 
             }
 
Index: app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tpov.schoolquiz.data.database\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.asLiveData\r\nimport androidx.room.*\r\nimport com.tpov.schoolquiz.data.database.entities.ApiQuestion\r\nimport com.tpov.schoolquiz.data.database.entities.ChatEntity\r\nimport com.tpov.schoolquiz.data.database.entities.ProfileEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuizEntity\r\nimport com.tpov.schoolquiz.data.database.entities.QuestionDetailEntity\r\nimport com.tpov.schoolquiz.presentation.custom.Logcat\r\nimport com.tpov.schoolquiz.presentation.mainactivity.MainActivity\r\nimport kotlinx.coroutines.InternalCoroutinesApi\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\n@Dao\r\n\r\ninterface QuizDao {\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertQuizDetailDB(note: QuestionDetailEntity)\r\n\r\n    fun insertQuizDetail(note: QuestionDetailEntity) {\r\n        log(\"fun insertQuizDetail $note\")\r\n        insertQuizDetailDB(note)\r\n    }\r\n\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertQuizDetailListDB(note: List<QuestionDetailEntity>)\r\n\r\n    fun insertQuizDetailList(note: List<QuestionDetailEntity>) {\r\n        log(\"fun insertQuizDetailList $note\")\r\n        insertQuizDetailListDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertProfileDB(profile: ProfileEntity)\r\n\r\n    fun insertProfile(profile: ProfileEntity) {\r\n        log(\"fun insertProfile $profile\")\r\n        insertProfileDB(profile)\r\n    }\r\n\r\n    fun insertQuiz(note: QuizEntity) {\r\n        if (note.id == null) {\r\n            var id = -1\r\n            do {\r\n                id++\r\n                val quiz = getNameQuizByIdQuiz(id)\r\n            } while (quiz != null)\r\n            note.id = id\r\n        }\r\n\r\n        log(\"fun insertQuiz $note\")\r\n        this.insertQuizNewId(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertQuizNewId(note: QuizEntity)\r\n\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertQuestionDB(name: QuestionEntity)\r\n\r\n    fun insertQuestion(note: QuestionEntity) {\r\n        log(\"fun insertQuestion $note\")\r\n        insertQuestionDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertQuizListDB(note: List<QuizEntity>)\r\n\r\n    fun insertQuizList(note: List<QuizEntity>) {\r\n        log(\"fun insertQuizList $note\")\r\n        insertQuizListDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertQuestionListDB(name: List<QuestionEntity>)\r\n\r\n    fun insertQuestionList(note: List<QuestionEntity>) {\r\n        log(\"fun insertQuestionList $note\")\r\n        insertQuestionListDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertListApiQuestionDB(name: List<ApiQuestion>)\r\n\r\n    fun insertListApiQuestion(note: List<ApiQuestion>) {\r\n        log(\"fun insertListApiQuestion $note\")\r\n        insertListApiQuestionDB(note)\r\n    }\r\n\r\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\r\n    fun insertChatDB(chatEntity: ChatEntity)\r\n\r\n    fun insertChat(chatEntity: ChatEntity) {\r\n        log(\"fun insertChat $chatEntity\")\r\n        insertChatDB(chatEntity)\r\n    }\r\n\r\n    fun getProfileFlow(tpovId: Int): Flow<ProfileEntity>  {\r\n        log(\"fun getProfileFlow tpovId: $tpovId, return: ${getProfileByTpovIdDB(tpovId)}\")\r\n        return getProfileFlowDB(tpovId)\r\n    }\r\n    fun getProfile(tpovId: Int): ProfileEntity {\r\n        log(\"fun getProfile tpovId: $tpovId, return: ${getProfileDB(tpovId)}\")\r\n        return getProfileDB(tpovId)\r\n    }\r\n    fun getTpovIdByEmail(email: String): Int {\r\n        log(\"fun getTpovIdByEmail email: $email, return: ${getTpovIdByEmailDB(email)}\")\r\n        return getTpovIdByEmailDB(email)\r\n    }\r\n    fun getProfileByTpovId(tpovId: Int): ProfileEntity {\r\n        log(\"fun getProfileByTpovId tpovId: $tpovId, return: ${getProfileByTpovIdDB(tpovId)}\")\r\n        return getProfileByTpovIdDB(tpovId)\r\n    }\r\n    fun getTpovIdByUid(uid: String?): ProfileEntity {\r\n        log(\"fun getTpovIdByUid uid: $uid, return: ${getTpovIdByUidDB(uid)}\")\r\n        return getTpovIdByUidDB(uid)\r\n    }\r\n    fun getQuizList(tpovId: Int): List<QuizEntity> {\r\n        log(\"fun getQuizList tpovId: $tpovId, return: ${getQuizListDB(tpovId)}\")\r\n        return getQuizListDB(tpovId)\r\n    }\r\n\r\n    fun getTranslateEvent(): List<QuestionEntity> {\r\n        log(\"fun getTranslateEvent return: ${getTranslateEventDB()}\")\r\n        return getTranslateEventDB()\r\n    }\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE tpovId LIKE :tpovId\")\r\n    fun getProfileFlowDB(tpovId: Int): Flow<ProfileEntity>\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE tpovId LIKE :tpovId\")\r\n    fun getProfileDB(tpovId: Int): ProfileEntity\r\n\r\n    @Query(\"SELECT tpovId FROM profiles WHERE login LIKE :email\")\r\n    fun getTpovIdByEmailDB(email: String): Int\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE tpovId LIKE :tpovId\")\r\n    fun getProfileByTpovIdDB(tpovId: Int): ProfileEntity\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE idFirebase LIKE :uid\")\r\n    fun getTpovIdByUidDB(uid: String?): ProfileEntity\r\n\r\n    @Query(\"SELECT * FROM front_list WHERE tpovId LIKE :tpovId\")\r\n    fun getQuizListDB(tpovId: Int): List<QuizEntity>\r\n\r\n    @Query(\"\"\"\r\n    SELECT * FROM new_user_table WHERE idQuiz NOT IN (\r\n        SELECT id\r\n        FROM front_list\r\n    )\r\n\"\"\")\r\n    fun getTranslateEventDB(): List<QuestionEntity>\r\n\r\n    fun getQuizEvent(): List<QuizEntity> {\r\n        log(\"fun getQuizEvent return: ${getQuizEventDB()}\")\r\n        return getQuizEventDB()\r\n    }\r\n\r\n    fun getQuestionList(): List<QuestionEntity> {\r\n        log(\"fun getQuestionList return: ${getQuestionListDB()}\")\r\n        return getQuestionListDB()\r\n    }\r\n    fun getQuestionDetailList(): List<QuestionDetailEntity> {\r\n        log(\"fun getQuestionDetailList return: ${getQuestionDetailListDB()}\")\r\n        return getQuestionDetailListDB()\r\n    }\r\n    fun getQuizLiveData(tpovId: Int): LiveData<List<QuizEntity>> {\r\n        log(\"fun getQuizLiveData, tpovId: $tpovId, return: ${getQuizListDB(tpovId)}\")\r\n        return getQuizLiveDataDB(tpovId)\r\n    }\r\n    fun getListApiQuestion(): List<ApiQuestion> {\r\n        log(\"fun getListApiQuestion return: ${getListApiQuestionDB()}\")\r\n        return getListApiQuestionDB()\r\n    }\r\n    fun getQuizById(id: Int, tpovId: Int): QuizEntity {\r\n        log(\"fun getQuizById, id: $id, tpovId: $tpovId, return: ${getQuizById(id, tpovId)}\")\r\n        return getQuizByIdDB(id, tpovId)\r\n    }\r\n    fun getQuizListIdByTpovId(tpovId: Int): Int {\r\n        log(\"fun getQuizListIdByTpovId, tpovId: $tpovId, return: ${getQuizListIdByTpovIdDB(tpovId)}\")\r\n        return getQuizListIdByTpovIdDB(tpovId)\r\n    }\r\n    fun getQuizTpovIdById(id: Int): Int {\r\n        log(\"fun getQuizTpovIdById, id: $id, return: ${getQuizTpovIdByIdDB(id)}\")\r\n        return getQuizTpovIdByIdDB(id)\r\n    }\r\n    fun getQuestionDetailListByNameQuiz(nameQuiz: String): List<QuestionDetailEntity> {\r\n        log(\"fun getQuestionDetailListByNameQuiz, nameQuiz: $nameQuiz, return: ${getQuestionDetailListByNameQuizDB(nameQuiz)}\")\r\n        return getQuestionDetailListByNameQuizDB(nameQuiz)\r\n    }\r\n    fun getQuestionByIdQuiz(nameQuiz: String): List<QuestionEntity> {\r\n        log(\"fun getQuestionByIdQuiz, nameQuiz: $nameQuiz, return: ${getQuestionByIdQuizDB(nameQuiz)}\")\r\n        return getQuestionByIdQuizDB(nameQuiz)\r\n    }\r\n    fun getListApiQuestionBySystemDate(systemDate: String): List<ApiQuestion> {\r\n        log(\"fun getListApiQuestionBySystemDate, systemDate: $systemDate, return: ${getListApiQuestionBySystemDateDB(systemDate)}\")\r\n        return getListApiQuestionBySystemDateDB(systemDate)\r\n    }\r\n    fun getAllProfilesList(): ProfileEntity {\r\n        log(\"fun getAllProfilesList, return: ${getAllProfilesListDB()}\")\r\n        return getAllProfilesListDB()\r\n    }\r\n    fun getProfileByFirebaseId(id: String): ProfileEntity {\r\n        log(\"fun getProfileByFirebaseId, id: $id, return: ${getProfileByFirebaseIdDB(id)}\")\r\n        return getProfileByFirebaseIdDB(id)\r\n    }\r\n    fun getChat(): Flow<List<ChatEntity>> {\r\n        log(\"fun getChat, return: ${getChatDB().asLiveData().value}\")\r\n        return getChatDB()\r\n    }\r\n    fun getEventByIdQuiz(id: Int): Int? {\r\n        log(\"fun getEventByIdQuiz, id: $id, return: ${getEventByIdQuizDB(id)}\")\r\n        return getEventByIdQuizDB(id)\r\n    }\r\n    fun getIdQuizByNameQuiz(nameQuiz: String, tpovId: Int): Int? {\r\n        log(\"fun getIdQuizByNameQuiz, nameQuiz: $nameQuiz, tpovId: $tpovId, return: ${getIdQuizByNameQuizDB(nameQuiz, tpovId)}\")\r\n        return getIdQuizByNameQuizDB(nameQuiz, tpovId)\r\n    }\r\n    fun getNameQuizByIdQuiz(id: Int): String? {\r\n        log(\"fun getNameQuizByIdQuiz, id: $id, return: ${getNameQuizByIdQuizDB(id)}\")\r\n        return getNameQuizByIdQuizDB(id)\r\n    }\r\n    fun getQuestionByIdQuiz(id: Int): List<QuestionEntity> {\r\n        log(\"fun getQuestionByIdQuiz, id: $id, return: ${getQuestionByIdQuizDB(id)}\")\r\n        return getQuestionByIdQuizDB(id)\r\n    }\r\n    fun getQuestionDetailByIdQuiz(id: Int): List<QuestionDetailEntity> {\r\n        log(\"fun getQuestionDetailByIdQuiz, id: $id, return: ${getQuestionDetailByIdQuizDB(id)}\")\r\n        return getQuestionDetailByIdQuizDB(id)\r\n    }\r\n\r\n    @Query(\"SELECT * FROM front_list\")\r\n    fun getQuizEventDB(): List<QuizEntity>\r\n\r\n    @Query(\"SELECT * FROM new_user_table\")\r\n    fun getQuestionListDB(): List<QuestionEntity>\r\n\r\n    @Query(\"SELECT * FROM table_data\")\r\n    fun getQuestionDetailListDB(): List<QuestionDetailEntity>\r\n\r\n    @Query(\"SELECT * FROM front_list WHERE tpovId LIKE :tpovId\")\r\n    fun getQuizLiveDataDB(tpovId: Int): LiveData<List<QuizEntity>>\r\n\r\n    @Query(\"SELECT * FROM table_generate_question\")\r\n    fun getListApiQuestionDB(): List<ApiQuestion>\r\n\r\n    @Query(\"SELECT * FROM front_list WHERE id LIKE :id AND tpovId LIKE :tpovId\") // 50/50\r\n    fun getQuizByIdDB(id: Int, tpovId: Int): QuizEntity\r\n\r\n    @Query(\"SELECT id FROM front_list WHERE tpovId LIKE :tpovId\")\r\n    fun getQuizListIdByTpovIdDB(tpovId: Int): Int\r\n\r\n    @Query(\"SELECT tpovId FROM front_list WHERE id LIKE :id\")\r\n    fun getQuizTpovIdByIdDB(id: Int): Int\r\n\r\n    @Query(\"SELECT * FROM table_data WHERE idQuiz LIKE :nameQuiz\")\r\n    fun getQuestionDetailListByNameQuizDB(nameQuiz: String): List<QuestionDetailEntity>\r\n\r\n    @Query(\"SELECT * FROM new_user_table WHERE idQuiz LIKE :nameQuiz\")\r\n    fun getQuestionByIdQuizDB(nameQuiz: String): List<QuestionEntity>\r\n\r\n    @Query(\"SELECT * FROM table_generate_question WHERE date LIKE :systemDate\")\r\n    fun getListApiQuestionBySystemDateDB(systemDate: String): List<ApiQuestion>\r\n\r\n    @Query(\"SELECT * FROM profiles\")\r\n    fun getAllProfilesListDB(): ProfileEntity\r\n\r\n    @Query(\"SELECT * FROM profiles WHERE idFirebase = :id\")\r\n    fun getProfileByFirebaseIdDB(id: String): ProfileEntity\r\n\r\n    @Query(\"SELECT * FROM chat_data\")\r\n    fun getChatDB(): Flow<List<ChatEntity>>\r\n\r\n    @Query(\"SELECT event FROM front_list WHERE id = :id\")\r\n    fun getEventByIdQuizDB(id: Int): Int?\r\n\r\n    @Query(\"SELECT id FROM front_list WHERE nameQuiz = :nameQuiz AND tpovId = :tpovId\")\r\n    fun getIdQuizByNameQuizDB(nameQuiz: String, tpovId: Int): Int?\r\n\r\n    @Query(\"SELECT nameQuiz FROM front_list WHERE id = :id\")\r\n    fun getNameQuizByIdQuizDB(id: Int): String?\r\n\r\n    @Query(\"SELECT * FROM new_user_table WHERE idQuiz = :id\")\r\n    fun getQuestionByIdQuizDB(id: Int): List<QuestionEntity>\r\n\r\n    @Query(\"SELECT * FROM table_data WHERE idQuiz = :id\")\r\n    fun getQuestionDetailByIdQuizDB(id: Int): List<QuestionDetailEntity>\r\n\r\n    @Query(\"DELETE FROM new_user_table WHERE idQuiz IS :id\")\r\n    fun deleteQuestionByIdQuiz(id: Int)\r\n\r\n    @Query(\"DELETE FROM table_data WHERE idQuiz IS :id\")\r\n    fun deleteQuestionDetailByIdQuiz(id: Int)\r\n\r\n\r\n    @Query(\"DELETE FROM chat_data WHERE time LIKE :time\")\r\n    fun deleteChat(time: String)\r\n\r\n    @Query(\"DELETE FROM front_list WHERE id LIKE :id\")\r\n    fun deleteQuizById(id: Int)\r\n\r\n    @Update\r\n    fun updateQuizDetail(questionDetailEntity: QuestionDetailEntity)\r\n\r\n    @Update\r\n    fun updateQuiz(quizEntity: QuizEntity)\r\n\r\n    @Update\r\n    fun updateApiQuestion(generateQuestion: ApiQuestion)\r\n\r\n    @Update\r\n    fun updateProfiles(profileEntity: ProfileEntity)\r\n\r\n    @Update\r\n    fun updateQuestion(questionEntity: QuestionEntity)\r\n\r\n}\r\n\r\n@OptIn(InternalCoroutinesApi::class)\r\nfun log(m: String) { Logcat.log(m, \"QuizDao\", Logcat.LOG_DATABASE)}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt b/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt
--- a/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt	
+++ b/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt	
@@ -1,6 +1,7 @@
 package com.tpov.schoolquiz.data.database
 
 import androidx.lifecycle.LiveData
+import androidx.lifecycle.Observer
 import androidx.lifecycle.asLiveData
 import androidx.room.*
 import com.tpov.schoolquiz.data.database.entities.ApiQuestion
@@ -319,7 +320,10 @@
     @Update
     fun updateQuestion(questionEntity: QuestionEntity)
 
+
 }
-
+val observer = Observer<Int> {
+    // Обработка изменения в базе данных
+}
 @OptIn(InternalCoroutinesApi::class)
 fun log(m: String) { Logcat.log(m, "QuizDao", Logcat.LOG_DATABASE)}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AndroidLayouts\">\r\n    <shared>\r\n      <config>\r\n        <device id=\"_device_class_phone\" />\r\n        <device id=\"_device_class_foldable\" />\r\n        <device id=\"_device_class_desktop\" />\r\n        <locale>uk</locale>\r\n        <target>android-33-ext4</target>\r\n      </config>\r\n    </shared>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5af0db75-4be5-4ef3-8f7e-967bab06300d\" name=\"Changes\" comment=\"create logcat custom\">\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.gradle/file-system.probe\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gradle/file-system.probe\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/compiler.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/compiler.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app/src/main/res/layout/title_fragment.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/src/main/res/layout/title_fragment.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[17e6bcfc]\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"layoutResourceFile\" />\r\n        <option value=\"resourceFile\" />\r\n        <option value=\"Kotlin Class\" />\r\n        <option value=\"Kotlin Object\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MdM8qyqboV1nJrQXz70kLiA3XM\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"PROJECT_TRUSTED_KEY\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.cidr.known.project.marker\" value=\"true\" />\r\n    <property name=\"android-custom-viewC:/Users/oleg1/.gradle/caches/modules-2/files-2.1/androidx.recyclerview/recyclerview/1.1.0/f2bdf79e1977939817f54a9d3e2f6bc52b63bdd0/recyclerview-1.1.0-sources.jar!/androidx/recyclerview/widget/RecyclerView.java_SELECTED\" value=\"RecyclerView\" />\r\n    <property name=\"cidr.known.project.marker\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"project.structure.last.edited\" value=\"SDK Location\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.17\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\r\n  </component>\r\n  <component name=\"PsdUISettings\">\r\n    <option name=\"MODULE_TAB\" value=\"Properties\" />\r\n    <option name=\"LAST_EDITED_BUILD_TYPE\" value=\"release\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\java\\com\\tpov\\schoolquiz\\domain\" />\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\res\\drawable-hdpi\" />\r\n      <recent name=\"D:\\SchoolQuiz\\app\\src\\main\\res\\drawable-xxhdpi\" />\r\n      <recent name=\"F:\\Developer\\Programmer\\Android\\SchoolQuiz\\app\\src\\main\\res\\drawable\" />\r\n    </key>\r\n    <key name=\"CopyKotlinDeclarationDialog.RECENTS_KEY\">\r\n      <recent name=\"com.tpov.schoolquiz.domain\" />\r\n      <recent name=\"com.tpov.schoolquiz.presentation.network.event\" />\r\n      <recent name=\"com.tpov.schoolquiz.data.fierbase\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" activateToolWindowBeforeRun=\"false\">\r\n      <module name=\"schoolquiz.app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"false\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"INSPECTION_WITHOUT_ACTIVITY_RESTART\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Hybrid>\r\n      <Java />\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n        <option name=\"PROFILING_MODE\" value=\"NOT_SET\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5af0db75-4be5-4ef3-8f7e-967bab06300d\" name=\"Changes\" comment=\"\" />\r\n      <created>1678092861294</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678092861294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"build\">\r\n      <created>1680408918363</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680408918363</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"fix build\">\r\n      <created>1680435462178</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680435462178</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"fix event adapter\">\r\n      <created>1680449661463</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680449661463</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"create logcat custom\">\r\n      <created>1680493508899</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680493508899</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:io.reactivex.rxjava2:rxjava\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:com.google.protobuf:protobuf-java\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"java:io.grpc:grpc-api\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"front\" />\r\n    <MESSAGE value=\"build\" />\r\n    <MESSAGE value=\"fix build\" />\r\n    <MESSAGE value=\"fix event adapter\" />\r\n    <MESSAGE value=\"create logcat custom\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"create logcat custom\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -15,27 +15,17 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5af0db75-4be5-4ef3-8f7e-967bab06300d" name="Changes" comment="create logcat custom">
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/executionHistory/executionHistory.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/fileHashes.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/7.6/fileHashes/resourceHashesCache.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/outputFiles.bin" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.gradle/file-system.probe" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/file-system.probe" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/compiler.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/compiler.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="5af0db75-4be5-4ef3-8f7e-967bab06300d" name="Changes" comment="fix clipToPadding main recycler">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/RepositoryFBImpl.kt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/app/src/main/res/layout/title_fragment.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/layout/title_fragment.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/com/tpov/schoolquiz/data/database/QuizDao.kt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[17e6bcfc]" />
+  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[C:\Users\oleg1\.android\avd\Pixel_XL_API_33.avd]" />
   <component name="ExternalProjectsData">
     <projectState path="$PROJECT_DIR$">
       <ProjectState />
@@ -200,7 +190,14 @@
       <option name="project" value="LOCAL" />
       <updated>1680493508899</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="fix clipToPadding main recycler">
+      <created>1680540011712</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1680540011712</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="UnknownFeatures">
@@ -225,6 +222,7 @@
     <MESSAGE value="fix build" />
     <MESSAGE value="fix event adapter" />
     <MESSAGE value="create logcat custom" />
-    <option name="LAST_COMMIT_MESSAGE" value="create logcat custom" />
+    <MESSAGE value="fix clipToPadding main recycler" />
+    <option name="LAST_COMMIT_MESSAGE" value="fix clipToPadding main recycler" />
   </component>
 </project>
\ No newline at end of file
